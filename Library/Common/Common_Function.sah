
/*************************************************************************
 ** CompanyName : Sanovi Technologies Ltd.
 ** Application Name : DRM 
 ** Objective : This script contains all the functions which are used commonly 
 **             for for all the solutions. 
 ** AuthorName : Automation Team
 ** Created Date : FEB 2017
 ************************************************************************/


var $g_error = _continueOnError();
if($g_error != null){
	_log($g_error);
}

var $SAHI_HOME = Get_Sahi_Home_Path();

var $ipAddress = Get_Ip_address();

/**
* Function is called when any error occurs in the script.
*@param :  $exception
*@return : true
*@Author: Swati Choudhary
*
*/


function onScriptError($exception) {
	//_logExceptionAsFailure($exception);
	_focusWindow();
	_takeScreenShot(); 
	return true;
}
onScriptFailure = onScriptError;
onScriptError = onScriptError;

/**
* Function is called at the end of the script.
*@param :  null
*@return : null
*@Author: Swati Choudhary
*
*/
function onScriptEnd() {
	var $newBuild = _getGlobal("newBuildName");
	var $status = _scriptStatus(); // "FAILURE" or "SUCCESS"
	var $scriptName = _scriptName();
	var $suiteInfo = _suiteInfo();
	var $host = Packages.java.net.InetAddress.getLocalHost().getHostAddress();
	var $reportId = $suiteInfo["suiteReportId"];
	var $scriptPath = _scriptPath(); // Script name with full file path	
	var $logMessage = "\nYou can view the logs report from the below link:";
	var $logSuitePath = $logMessage + "\nSuite Report: http://"+$host+":9999/_s_/dyn/pro/DBReports_suiteReport?id="+$reportId+"&o=list";	
	var $logPath = $logSuitePath + "\nTest Case Report: http://"+$host+":9999/_s_/dyn/pro/DBReports_testCaseReport?id="+$reportId+"&o=list";
	//sendEmail("Daily Build Sahi Automation Status:" + "testing done on Build: " + $newBuild + ' ' + $status + ": " + "Suite Name:" + $scriptName, "Script: " + $scriptPath + "\nStatus: " + $status + "\n" + $logPath);
	_execute("cmd /c taskKill /F /IM PsExec.exe");

	var $summaryText =  "\n" + $scriptName + " = " + $status + ";";
	writeToFileAppend($summaryText, $SAHI_HOME +"conf\\SummaryReport.txt");
	
}


/**
* Function is to send an email.
*@param :  $emailSubject, $emailBody
*@return : null
*@Author: Swati Choudhary
*
*/
function sendEmail($emailSubject, $emailBody) {
	var $host = "192.168.1.15";
	var $port = "25";
	var $username = "bugzilla@sanovi.com";
	var $password = "sanovi@2012";
	var $isSSL = false; // set to true if you use SSL
	var $mailer = new Packages.net.sf.sahi.ant.Mailer($host, $port, $username, $password, $isSSL);
	var $from = "bugzilla@sanovi.com";
	var $to = "automation_team@sanovi.com";
	$mailer.send($from, $to, $emailSubject, $emailBody);
}

/**
* Function is  for Firefox Security pop handler after refresh the screen.
*@param :  null
*@return : null
*@Author: Swati Choudhary
*
*/
function Popup_Handler() {
	_focusWindow(); // focus before reload
	_call(window.setTimeout("top.location.reload()", 1000));
	_sahi.wait(3000);
	_execute($SAHI_HOME + "\\utility\\Popup.exe","true");
	//_typeKeyCodeNative(java.awt.event.KeyEvent.VK_ENTER);
}

/**
* Function is to get the Sahi home Path.
*@param :  null
*@return : null
*@Author: Ananth Sakthi
*
*/
function Get_Sahi_Home_Path() {
	$l_Sahi_UserData = _userDataDir("\\");
	$SAHI_USERDATA = $l_Sahi_UserData + "\\";
	$g_Sahi_UserData = $l_Sahi_UserData.replace(/\\/g,"/") + "/";
	$l_Userdir = $l_Sahi_UserData.substring(0,1);
	$sahi_build_userDrive = $l_Userdir;
	$l_Userpath = $l_Sahi_UserData.substring(3,($l_Sahi_UserData.length)-9);
	$l_Userpath = $l_Userpath.replace(/\\/g,"/");
	$g_mnt_UserData = "/mnt/" + $l_Userpath +"/userdata/";	
	//$SAHI_HOME = $l_Sahi_UserData + "\\scripts\\SCC_Automation_Pumice_Tonalite_JR_7.1_SP1\\";
	//$g_mnt_SAHI_HOME = $g_Sahi_UserData +"/scripts/SCC_Automation_Pumice_Tonalite_JR_7.1_SP1/";
	$SAHI_HOME = $l_Sahi_UserData + "\\scripts\\RO_Automation\\";
	$g_mnt_SAHI_HOME = $g_Sahi_UserData +"/scripts/RO_Automation/";
	_log($SAHI_HOME);
	return $SAHI_HOME;
	return $g_mnt_SAHI_HOME;	
}


/**
* Function is to get the ip address of the current machine.
*@param :  null
*@return : null
*@Author: Ananth Sakthi
*
*/
function Get_Ip_address() {
	var $ipAddresswithSpaces = Packages.java.net.InetAddress.getLocalHost().getHostAddress();
	var $ipAddress = $ipAddresswithSpaces.replace(/\r\n/g, '').trim();

	return $ipAddress;
}
/**
* Function is to Login to DRM GUI application
*@param :  $username, $password
*@return : null
*@Author: Anita Gaded
*
*/ 
function login($username, $password) {
	var $i = 0;
	var $j = 0;
	for (i = 0; i < 15; i++) {	
		if($securedUrl =="yes" || $securedUrl =="YES" || $securedUrl =="Yes"){
			_navigateTo('https://' + $drmServer + ':'+ $urlPortNo +'/PanacesGUI');
		}
		else if ($urlPortNo != "na" || $urlPortNo != ""){
			_navigateTo('http://' + $drmServer + ':'+ $urlPortNo +'/PanacesGUI');
		}
		else{
			_navigateTo('http://' + $drmServer + '/PanacesGUI');
		}
		if (_exists(_textbox($obj_username))) {
			_setValue(_textbox($obj_username), $username);
			_setValue(_password($obj_password), $password);
			_click(_submit($obj_submit));
			
			////////////////////////////////////AS per GDPR merge /////
			if(_exists(_div($obj_Loginfailed))){
				_setValue(_textbox($obj_username), $username);
				if($g_isGDPRCompliancepswd =="yes" || $g_isGDPRCompliancepswd =="Yes" || $g_isGDPRCompliancepswd =="YES"){					
					_setValue(_password($obj_password), "Cloud123456789$"); // RO GDPR server GUI pwd  Cloud123456789$
				}
				else{
					_setValue(_password($obj_password), "Cloud123$");// without GDPR compliance  //Cloud123$
				}
				if(_exists(_radio($obj_agree))){
					_click(_radio($obj_agree));
				}
				_click(_submit($obj_submit));
				
			}
			
			if(_exists(_div($obj_AuthFail))){
				_setValue(_textbox($obj_username), $username);
				if($g_isGDPRCompliancepswd =="yes" || $g_isGDPRCompliancepswd =="Yes" || $g_isGDPRCompliancepswd =="YES"){					
					_setValue(_password($obj_password), "Cloud123456789$"); // RO GDPR server GUI pwd  Cloud123456789$
				}
				else{
					_setValue(_password($obj_password), "Cloud123$");// without GDPR compliance  //Cloud123$
				}
				_click(_submit($obj_submit));
				
			}
			/////////////////////////// As per GDPR RO login updated -by anita ////////////
			if(_exists(_cell($obj_FirstLogin))){
											
				if($g_isGDPRCompliancepswd =="yes" || $g_isGDPRCompliancepswd =="Yes" || $g_isGDPRCompliancepswd =="YES"){					
					_setValue(_password($obj_newPassword), $password); // RO GDPR server GUI pwd
				}
				else{
					_setValue(_password($obj_curpassword), $password);// without GDPR compliance 
				}
				
				
				if($g_isGDPRCompliancepswd =="yes" || $g_isGDPRCompliancepswd =="Yes" || $g_isGDPRCompliancepswd =="YES"){	
					_setValue(_password($obj_curpassword), $password);				
					_setValue(_password($obj_newPassword), "Cloud123456789$"); // RO GDPR server GUI pwd Cloud123456789$
					_setValue(_password($obj_confPassword),"Cloud123456789$"); // Cloud123456789$
				}
				else{
					_setValue(_password($obj_curpassword), $password);
					_setValue(_password($obj_newPassword), "Cloud123$"); //Cloud123$
					_setValue(_password($obj_confPassword),"Cloud123$");
				}				
				_click(_button($obj_save));
				
				_wait(2000);
				
				_assertEqual($obj_PassChange, _lastAlert());
			
				_assertEqual("Adobe Flash player is not installed/enabled. Some of the pages require Adobe flash player version 10.0 or higher. Please install/enable Adobe flash player to view flash enabled pages.", _lastAlert());
				
				_setValue(_textbox($obj_username), $username);
				
				if($g_isGDPRCompliancepswd =="yes" || $g_isGDPRCompliancepswd =="Yes" || $g_isGDPRCompliancepswd =="YES"){					
					_setValue(_password($obj_password), "Cloud123456789$"); // RO GDPR server GUI pwd  Cloud123456789$
				}
				else{
					_setValue(_password($obj_password), "Cloud123$");// without GDPR compliance  //Cloud123$
				}
				_click(_submit($obj_submit));
			}
			///////////////////////////////////////////////////////////
			if (_exists(_span($obj_drmErrMsg))) {
				if (_exists(_cell($obj_corrAction))) {
					var $serverWaitstr = _getText(_cell($obj_corrAction));		
					var $serverWaitstr = $serverWaitstr.split($obj_apprx);		
					var $serverWaitstr = $serverWaitstr[1].split(" ");		
					var $serverWaitTime = $serverWaitstr[1];		
					var $waitTime = parseInt($serverWaitTime + "0000");
				
				} else {
					var $waitTime = 20000;
				}
				_wait($waitTime);
				_call(history.back());
				$i = $i + 1;
				_log($i);
			} else {
				$j = 1;
			}
		}
		if ($j == 1) {
			break;
		}
	}
	// If same user already login into the server
	if (_exists(_cell($obj_Longmsg))) {
		_click(_submit($obj_yes1));
	}
	_log($obj_admin);
	if (_exists(_link($obj_admin))||_exists(_label($obj_admin))) {
		_log("Logged in Successfully");
		_log("");
	} else {
		_fail("login not succesfully.So that stopping further execution.");
	}
}


function UploadLicenseSQL(){
	
	var $licenseDir = $DRMbuild + "/DRM_Build/License/";	
	if($osHardening=="yes" || $osHardening=="YES" || $osHardening=="Yes"){
		var $sshCommand = "sudo rm -rf " + $licenseDir +"/sql_OSHard.sh";
	    $statusString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		var $sshCommand = "sudo rm -rf " + $licenseDir +"/license.sql";
	    $statusString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		
		var $sshCommand = "sudo wget -r -nd -P " + $licenseDir +" http://172.168.20.43/jenkins/job/DRM_Automation/ws/license.sql;echo EXIT Code : $?";	 
	    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	    var $sshCommand = "sudo wget -r -nd -P " + $licenseDir + " http://172.168.20.43/jenkins/job/DRM_Automation/ws/sql_OSHard.sh;echo EXIT Code : $?";
	    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand); 
	    
	    
	    var $sshCommand = "sudo chown root:root " +  $licenseDir +"/license.sql";
	    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		var $sshCommand = "sudo chown root:root " +  $licenseDir +"/sql_OSHard.sh";
	    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	   
	    var $sshCommand = "sudo chmod 777 " + $licenseDir +"/sql_OSHard.sh";
	    $statusString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);    
	    var $sshCommand = "sudo chmod 777 " + $licenseDir +"/license.sql";
	    $statusString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	     
		var $sshCommand = "sudo sed -i " + "'s/\r$//'" + " " +$licenseDir +"/sql_OSHard.sh";
	    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		var $sshCommand = "sudo chown root:root " +  $licenseDir +"/sql_OSHard.sh";
	    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		
	    var $sshCommand  = "sudo sh " + $licenseDir +"/sql_OSHard.sh";
	    $statusString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	    _wait(20000);
	}
	else{
		var $sshCommand = "rm -rf " + $licenseDir +"/sql_OSHard.sh";
	    $statusString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		var $sshCommand = "rm -rf " + $licenseDir +"/license.sql";
	    $statusString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		
		var $sshCommand = "wget -r -nd -P " + $licenseDir +" http://172.168.20.43/jenkins/job/DRM_Automation/ws/license.sql;echo EXIT Code : $?";	 
	    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	    var $sshCommand = "wget -r -nd -P " + $licenseDir + " http://172.168.20.43/jenkins/job/DRM_Automation/ws/sql_OSHard.sh;echo EXIT Code : $?";
	    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand); 
	    
	    
	    var $sshCommand = "chown root:root " +  $licenseDir +"/license.sql";
	    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		var $sshCommand = "chown root:root " +  $licenseDir +"/sql_OSHard.sh";
	    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	   
	    var $sshCommand = "chmod 777 " + $licenseDir +"/sql_OSHard.sh";
	    $statusString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);    
	    var $sshCommand = "chmod 777 " + $licenseDir +"/license.sql";
	    $statusString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	     
		var $sshCommand = "sed -i " + "'s/\r$//'" + " " +$licenseDir +"/sql_OSHard.sh";
	    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		var $sshCommand = "chown root:root " +  $licenseDir +"/sql_OSHard.sh";
	    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		
	    var $sshCommand  = "sh " + $licenseDir +"/sql_OSHard.sh";
	    $statusString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	    _wait(20000);
	}
    login($username, $password);
    _wait(3000);
    logout();
    _wait(3000);
} //end

//verify login page after license.xml file upload - addedby anita
function loginPage($username, $password) {

		if($securedUrl =="yes" || $securedUrl =="YES" || $securedUrl =="Yes"){
			_navigateTo('https://' + $drmServer + ':'+ $urlPortNo +'/PanacesGUI');
		}
		else if ($urlPortNo != "na" || $urlPortNo != ""){
			_navigateTo('http://' + $drmServer + ':'+ $urlPortNo +'/PanacesGUI');
		}
		else{
			_navigateTo('http://' + $drmServer + '/PanacesGUI');
		}
		if (_exists(_textbox("username"))) {
			_setValue(_textbox("username"), $username);
			_setValue(_password("password"), $password);
			_click(_submit("/Submit/"));
			_wait(5000);
			//////////////////////////////Verify after license upload //////////////////////
			if(_exists(_div("/Your license is invalid/"))){
				var $msg = _getText(_div("/Your license is invalid/"));
				_log($msg);
				_log("Workaround for license upload using sql file");
				UploadLicenseSQL();
			}
			else{
				_log("license upload success");
				// If same user already login into the server
				if (_exists(_cell("You're either logged in from another computer, or your session may have expired. Do you want to login here?"))) {
					_click(_submit("YES"));
				}
				if(_exists(_div("discovery"))){
					_click(_div("discovery"));
					_log("logged in");
				}
				if (_exists(_link("Admin"))) {
					_log("logged in successfully");
				} 
				else {
					_fail("login not successfully...or License upload failed.So that stopping further execution.");
				}
				logout();
				_wait(3000);
			}
		}
}


/**
*This function Create fileset
*@param :  null
*@return : null
*@Author : Govinda Mengji
*/


function Create_fileset()
{	
	_navigateTo('http://' + $drmServer + ':8080/PFRGUI');
	_setValue(_textbox("username"), "sfradmin");
	_setValue(_password("password"), "sfradmin");
	_click(_button("Login"));
	_setValue(_textbox("server"), $compIPPR);
	_click(_button("add server"));
	_click(_link($compIPPR));
	_click(_link("Add"));
  _setValue(_textbox("fsName"), $filesetName);
	_setValue(_textbox("sourceIP"), $compIPPR);
   _setValue(_textbox("targetIP"), $compIPDR);
	_setValue(_textbox("repinterval"), "300");
	_setValue(_textbox("sourcePath"), $installexepathPR);
	_setValue(_textbox("targetPath"), $installexepathDR);
	_click(_button("Add"));
	_click(_checkbox("cb"));
	_click(_button("Add Fileset"));
	_wait(1000);
	_click(_link($filesetName));
   if(_exists(_link("Disable"))){
	_click(_link("Logout"));
   }
	
}

/**
*This function Fetching fileset Name
*@param :  null
*@return : null
*@Author : Govinda Mengji
*/

function filesetName(){
	navigateToDiscovery();
	_click(_link("Subsystems"));
	_click(_link("Protection Schemes"));
	_click(_link($sernamePR));
	$filesetName=_getText(_cell(1, _near(_cell("Protection Scheme Fileset Name:"))));
	_log("filesetName",$filesetName);
	return $filesetName;
	
}


/**
* Function is to Logout to DRM GUI application
*@param :  null
*@return : null
*@Author: Swati Choudhary
*
*/

function logout() {
	_click(_link($obj_logout));
}

/**
* Function is to create site for PR 
*@param :  null
*@return : null
*@Author: Swati Choudhary
*
*/

function Create_Site_PR() {
	Create_site($locationPR, $incharge, $addressPR);
}

/**
* Function is to create site for DR 
*@param :  null
*@return : null
*@Author: Swati Choudhary
*
*/
function Create_Site_DR() {
	Create_site($locationDR, $incharge, $addressDR);
}

/**
* Function is to create site 
*@param : $location, $incharge, $address
*@return : null
*@Author: Swati Choudhary
*
*/

function Create_site($location, $incharge, $address) {
	navigateToDiscovery();
	_click(_link($obj_site));
	if (_exists(_link($location))) {
		_log("Site already exists");
	} else {
		_click(_link($obj_creatnewSite));
		_setValue(_textbox($obj_location), $location);
		_setSelected(_select($obj_incharge), $incharge);
		_setValue(_textarea($obj_address), $address);
		_click(_submit($obj_save));
		_wait(10000);
		navigateToDiscovery();
		
		_log($obj_site);
		_log($location);		
		_click(_link($obj_site));
		if (_exists(_link($location))) {
			_log("Site created succesfully");
		} else {
			_fail("site not created succesfully.So that stopping execution.");
		}
	}

}// End of site()


/**
* Function is for credential creation 
*@param : $username, $password, $protocol, $label
*@return : null
*@Author: Swati Choudhary
*
*/
function Create_Credential($username, $password, $protocol, $label) {
	navigateToDiscovery();
	_click(_link("Credentials"));
	if (_exists(_link($label))) {
		_log("credential already exists");
	} else {
		_click(_link("Create Credential"));
		_setValue(_textbox("username"), $username);
		_setValue(_password("password"), $password);
		_setSelected(_select("protocol"), $protocol);
		_setValue(_textbox("label"), $label);
		_click(_submit("Save "));
		_wait(10000);
		navigateToDiscovery();
		_click(_link("Credentials"));
		if (_exists(_link($label))) {
			_log("credential created succesfully");
		} else {
			_fail("Credential not created succesfully.So that stopping execution.");
		}
	}
}// End of credential()

/**
* Function is to connect MSSQL Database
*@param : $ip,$database,$user, $pwd
*@return : $db
*@Author: Swati Choudhary
*
*/

function Get_MSsql_Db_Connection_URL($ip,$database,$user, $pwd){
	var $db = _getDB("com.microsoft.sqlserver.jdbc.SQLServerDriver", 'jdbc:sqlserver://'+ $ip + ':1433;databaseName=' + $database + ';user='+ $user + ';password=' + $pwd,$user,$pwd);
	_log("Database Connection Established");
	return $db;
}

/**
* Function is to connect Sybase Database
*@param : $ip,$database,$user, $pwd
*@return : $db
*@Author: Anantha Sakthi
*
*/

function Get_Sybase_Connection_URL($ip,$database,$user, $pwd){
	var $Url="jdbc:sybase:Tds:" + $ip + ":5000/" + $database;
	var $db = _getDB("com.sybase.jdbc2.jdbc.SybDriver",$Url,$user, $pwd);

	_log("Sybase Database Connection Established");
	return $db;
}

/**
* Function is to connect DB2 Database
*@param : $ip,$database,$user, $pwd
*@return : $db
*@Author: Anantha Sakthi
*
*/

function Get_DB2_Db_Connection_URL($ip,$database,$user, $pwd){
	var $l_dbURL =  "jdbc:db2://" + $ip + ":50000/" + $database;
	var $l_db = _getDB("com.ibm.db2.jcc.DB2Driver", $l_dbURL, $user, $pwd);
	_log("Database Connection Established");
	return $l_db;
}

/**
* Function is to connect Postgres Database
*@param : $ip,$database,$user, $pwd
*@return : $db
*@Author: Anantha Sakthi
*
*/

function Get_Postgres_Connection_URL($ip,$database,$user, $pwd){
	var $Url="jdbc:postgresql://" + $ip + ":5432/" + $database;
	var $db = _getDB("org.postgresql.Driver",$Url,$user, $pwd);

	_log("PostGres Database Connection Established");
	return $db;
}

/**
* Function is to connect MYSQL Database
*@param : $user, $pwd, $ip, $port, $database
*@return : $props
*@Author: Swati Choudhary
*
*/

function Get_Mysql_Db_Connection_URL($user, $pwd, $ip, $port, $database) {

	// Conecting to the database using JDBC connectivity
	var $databaseConnection = "jdbc:mysql://"+ $ip + ":" + $port + "/" + $database + "?" + $user + "&" + $pwd;
	_log("databaseconnection", $databaseConnection);
	var $props = new java.util.Properties();
	$props.put("user", $user);
	$props.put("password", $pwd);
	$props.put("databaseconnection", $databaseConnection);
	return $props;
} // End of Mysql_Db_Connection()

/**
* Function is to connect Oracle Database
*@param : $ip, $dbSidSelect
*@return : $databaseConnection
*@Author: Aditi Jain
*
*/
function Get_Oracle_Db_Connection_URL($ip, $dbSidSelect) {
	// Connecting to the database using JDBC connectivity
	var $databaseConnection = 'jdbc:oracle:thin:@' + $ip + ":" + $oraclePort + ":" + $dbSidSelect;
	_log("databaseconnection", $databaseConnection);
	var $databaseConnectivityStatus = "Database Connection Established";
	_log("Database Connection Established");
	return $databaseConnection;
}

/**
* Function is to connect Oracle Database to get properties
*@param : $user, $pwd, $internalLogon
*@return : $props
*@Author: Aditi Jain
*
*/
function Get_User_Properties_for_OracleDb_Connection($user, $pwd, $internalLogon) {
	var $props = new java.util.Properties();
	$props.put("user", $userPR);
	$props.put("password", $pwdPR);
	$props.put("internal_logon", $internalLogon);
	return $props;
}// End of Get_User_Properties_for_OracleDb_Connection


/**
* Function is to connect Remote using ssh ganymed
*@param : $sshIP, $sshUserID, $sshPassword, $sshCommand
*@return : $Output
*@Author: Anantha Sakthi
*
*/

function SecuredShellConnection($sshIP, $sshUserID, $sshPassword, $sshCommand,$error) {

    var $outputAr = []; 
    try {

    conn = new  Packages.ch.ethz.ssh2.Connection($sshIP); /* Create a connection instance */
    conn.connect(); /* Now connect */
    _log("Connected Successfully");
    /*
    * Authenticate. If you get an IOException saying something like
    * "Authentication method password not supported by the server at this stage."
    * then please check the FAQ.
    */

    if ($sshPassword.indexOf(".pem") > -1){
    	ppkfile = new java.io.File($sshPassword);
    
    	isAuthenticated = conn.authenticateWithPublicKey($sshUserID, ppkfile,"");
    } else {
    
    	isAuthenticated = conn.authenticateWithPassword($sshUserID, $sshPassword);
    }
    if (isAuthenticated == false) {
           _log("Authentication failed");
           _fail("Authentication failed");
           
    }
    _log("Logged In Successfully");
    sess = conn.openSession();
    _log("session opened Successfully");
    try{
      sess.execCommand($sshCommand);
      _log("Command ---> " + $sshCommand + " executed Succesfully" );
          _wait(5000);
     }catch(e){
            _log($e.toString(),"Custom1");
     }
     _log("---------------------------------Command Output-----------------------------------------","Custom1");
    stdout = new Packages.ch.ethz.ssh2.StreamGobbler(sess.getStdout());
    stderr = new Packages.ch.ethz.ssh2.StreamGobbler(sess.getStderr());
    
    stdin = sess.getStdin();
    
    brOut = new java.io.BufferedReader( new  java.io.InputStreamReader(stdout));
    brErr = new java.io.BufferedReader( new  java.io.InputStreamReader(stderr));
    
   // if(($line = brOut.readLine()) == "Password:"){
    //	stdin.write(new String("y\n").getBytes());
 //   }
    
    
    while (($line = brOut.readLine()) != null) {           
            _log($line);
           $outputAr.push($line);
           if($line >= 500){
        	   break;        	   
           }
    }     
    
    if($error == "Y" ){
	    var $outputAr = [];
	    while (($line = brErr.readLine()) != null) {           
	        _log($line);
	       $outputAr.push($line);
	       if($line >= 500){
	    	   break;        	   
	       }
	    }  
    }
    _log("---------------------------------------------------------------------------------------","Custom1"); 
    } catch ($e) {
    	 _log($e.toString(),"Custom1");
           sess.close(); /* Close this session */
           _log("Close this session");
           conn.close(); /* Close the connection */
           _log("Close the connection");          
          
    } 
    
    sess.close(); /* Close this session */
    _log("Close this session");
    conn.close(); /* Close the connection */
    _log("Close the connection");
    
    var $output = $outputAr.toString();
   // _assertExists("command output", $output);    

    return $output;    
}


/**
* Function is to connect windows Remote using Winexe
*@param : $sshIP, $sshUserID, $sshPassword, $sshCommand
*@return : $Output
*@Author: Anantha Sakthi
*
*/

function RemoteConnectionToWindows($sshIP, $sshUserID, $sshPassword, $sshCommand,$error) {

	var $winExeCommand = 'ls ' + $DRMbuildServer + "/winexe";
	
	$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $winExeCommand);
	
		
	if ( $status != $DRMbuildServer + "/winexe" ){
		
		$winExeWget_Command = "wget -r -nd -P " + $DRMbuildServer + " http://172.168.20.43/jenkins/job/DRM_Automation/ws/winexe";
		$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $winExeWget_Command,"Y");
		
		$winExeWget_Command = "chmod 777 " +$DRMbuildServer + "/winexe";
		
		$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $winExeWget_Command,"Y");
	}
			
	$WinExe_command = ".././"+$DRMbuildServer+"/winexe --user " + $sshUserID + " --password="+$sshPassword+" //"+$sshIP + " \"cmd /c " + $sshCommand + "\"";
	
	_log($WinExe_command);
	
	var $outputAr = []; 
    try {

    conn = new  Packages.ch.ethz.ssh2.Connection($drmServer); /* Create a connection instance */
    conn.connect(); /* Now connect */
    _log("Connected Successfully");
    /*
    * Authenticate. If you get an IOException saying something like
    * "Authentication method password not supported by the server at this stage."
    * then please check the FAQ.
    */

    isAuthenticated = conn.authenticateWithPassword($drmUserName, $drmPassword);

    if (isAuthenticated == false) {
           _log("Authentication failed");
           _fail("Authentication failed");
           
    }         
    _log("Logged In Successfully");
    sess = conn.openSession();
    _log("session opened Successfully");
    try{
      sess.execCommand($WinExe_command);
      _log("Command ---> " + $WinExe_command + " executed Succesfully" );
          _wait(5000);
     }catch(e){
            _log($e.toString(),"Custom1");
     }
     _log("---------------------------------Command Output-----------------------------------------","Custom1");
    stdout = new Packages.ch.ethz.ssh2.StreamGobbler(sess.getStdout());
    stderr = new Packages.ch.ethz.ssh2.StreamGobbler(sess.getStderr());
    
    stdin = sess.getStdin();
    
    brOut = new java.io.BufferedReader( new  java.io.InputStreamReader(stdout));
    brErr = new java.io.BufferedReader( new  java.io.InputStreamReader(stderr));
    
   // if(($line = brOut.readLine()) == "Password:"){
    //	stdin.write(new String("y\n").getBytes());
 //   }
    
    
    while (($line = brOut.readLine()) != null) {           
            _log($line);
           $outputAr.push($line);
           if($line >= 500){
        	   break;        	   
           }
    }     
    
    if($error == "Y" ){
    	
	    var $outputAr = [];
	    while (($line = brErr.readLine()) != null) {           
	        _log($line);
	       $outputAr.push($line);
	       if($line >= 500){
	    	   break;        	   
	       }
	    }  
    }
    _log("---------------------------------------------------------------------------------------","Custom1"); 
    } catch ($e) {
    	 _log($e.toString(),"Custom1");
           sess.close(); /* Close this session */
           _log("Close this session");
           conn.close(); /* Close the connection */
           _log("Close the connection");          
          
    } 
    
    sess.close(); /* Close this session */
    _log("Close this session");
    conn.close(); /* Close the connection */
    _log("Close the connection");
    

   
     $output  = $outputAr.toString();   
    _assertExists("command output", $output);    

    return $output;    
}


/**
* Function is to connect Remote using ssh
*@param : $sshIP, $sshUserID, $sshPassword, $sshCommand
*@return : $status
*@Author: Swati Choudhary
*
*/
function Execute_Ssh_Command($sshIP, $sshUserID, $sshPassword, $sshCommand,$prompt,$promptCommond) {
	_wait(5000);
	var $ssh = new Packages.org.twdata.enchanter.impl.DefaultStreamConnection();
	$ssh.connect($sshIP, $sshUserID, $sshPassword);
	java.lang.System.out.println("Connection using SSH success");	
	// changing Prompt option
	$ssh.sendLine('PS1=">"');
	java.lang.System.out.println("Sent prompt setting");
	var $line = $ssh.getLine();
	$ssh.waitFor('>');
	java.lang.System.out.println("Got pprompt setting response");
	// sending Commend to execute on machine
	$ssh.sendLine($sshCommand);
	java.lang.System.out.println("Sent command");
	var $line = $ssh.getLine();
	java.lang.System.out.println("Got response for command");
	// Collect the out put till it shows the prompt again
	var $i = 0;
	var $outputAr = [];	
	
	
	_log("Got the response for command");
	while (true) {			
		
		if($prompt == "Y" && $i == 0 ){	
			_wait(5000);
			$ssh.sendLine($promptCommond);		
			break;

		} else {
			var $line = $ssh.getLine();	
		}
		
					
		java.lang.System.out.println("waiting for commond to complete "+$i);
		java.lang.System.out.println("========"+$line);

		if ($line == null || '>' == _sahi.trim($line) || $i++ > 500 ){		
			break;
		}
		$outputAr.push($line);
	}// End of while loop
	var $output = $outputAr;
	//_assertExists("command output", $output);
	$ssh.waitFor('>');
	// disconnect from the ssh session

	$ssh.sendLine("kill $(ps -aef | grep ssh | grep root@notty | awk '{print $2}')");
	//$ssh.sendLine("kill $(ps -aef | grep ssh | grep root@pts | tail -n 1 | awk '{print $2}')");
	java.lang.System.out.println("kill process in");
	_wait(5000);
	$ssh.disconnect();	
	//java.lang.System.out.println("ssh disconnected");
	var $status = new java.util.Properties();
	$status.put("output", $output);
	return $status;
	
}// End of SSH_connetion

/**
* This function we need to execute after installation of new build and before importing the license.
*@param : null
*@return : null
*@Author: Swati Choudhary
*
*/

function EMMA_Setup() {
    _wait(20000);
    var $sshCommand = 'sh' + ' ' + $EAMSROOT + 'bin/' + 'Emma.sh';
    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
    var $output = $status.split(",").pop();
    _assertEqual("Emma setup done",$output);
}   

/**
* Function is for Installation of DRM server in silent Mode
*@param : null
*@return : null
*@Author: Swati Choudhary
*
*/

/**
* This Precheck Precheck_Tomcat_Home before installing DRM server.
*@param : null
*@return : null
*@Author: Anita
*/
function Precheck_Tomcat_Home(){
	_log("Remove the existing work folder in $TOMCAT_HOME");
	var $sshCommand = "sudo rm -rf " + $tomcatHome+"/work/*";
    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
    var $sshCommand = "sudo ls " + $tomcatHome;
    var $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
    _log($status);
}
// jarReplacement_Post_DRM_Installation added by anita
function JarReplacement_Post_DRM_Installation(){
	replacementOfJars();
	//updateServerXMLFile();
	//updateWebXMLFile();  //this is veryfirst time drm 
	 PreConditionCheck_Permission(); //for VM protection enable the permission for remote/agents folder	
	 SecurityInjection_PostInstallation();// for VM protection enable the permission
	
	var $sshCommand = 'sudo sh ' + $EAMSROOT + '/bin/panaces stop';
	$panacesStartString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	 _wait(5000);
	
	var $sshCommand = 'sudo sh ' + $EAMSROOT + '/bin/panaces start';
	$panacesStartString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	 
	var $sshCommand = 'sudo sh ' + $EAMSROOT + '/bin/panaces status';
	$panacesStartString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	_assertExists("panacesStartString", $panacesStartString);
}


function Install_Panaces_Server_SilentMode() {

	// calling precheck function before starting installation of drm server
	Precheck_Befors_panaces_Server_Instalation("1");
	Precheck_Tomcat_Home();
	if($osHardening=="yes" || $osHardening=="YES" || $osHardening=="Yes"){
		
		var $sshCommand = 'sudo sh '+ $DRMbuildServer +  'install.bin -f ' + $DRMbuildServer +  'PanacesServerInstaller.properties';
		$statusString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand,"Y");
		
	    var $panacesStatusString = $statusString.split(",");	       
	     var $panacesStatusString = $panacesStatusString.pop().trim();	       
	     _log($panacesStatusString);
	    
	    if($panacesStatusString != "Exiting with exit code: 0"){
	           _assertTrue(false);        
	           _log("Installation Exit code is not zero");
	    }
	    
	    var $sshCommand = 'sudo sh' + ' ' + $installedDRMBuildPath;
		$panacesStartString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand,"Y");
		_assertExists("panacesStartString", $panacesStartString);
		
		
		if ($panacesStartString == $installedDRMBuildPath + ": " + $installedDRMBuildPath + ": " + "is a directory" ){
			_log("EAMSROOT exsiting");
			if($gpl_jarReplaceReq =="yes" || $gpl_jarReplaceReq =="YES"||  $gpl_jarReplaceReq=="Yes"){
				_log("$gpl_jarReplaceReq " + $gpl_jarReplaceReq);
				replacementOfJars();
			}
			//updateServerXMLFile(); //if Eamsroot path change
			//updateWebXMLFile();  //this is veryfirst time drm 
			//PreConditionCheck_Permission(); //for VM protection enable the permission for remote/agents folder	

			// SecurityInjection_PostInstallation();// for VM protection enable the permission
	
		   var $sshCommand = "sudo ls -lrt " + $tomcatHome;
		    var $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		    _log($status);
		    
		    // Starting panaces after replcaing all 3rdParty jars
	     	     
		    var $sshCommand = 'sudo sh ' + $EAMSROOT + '/bin/SecurityUserInjection.sh';
			SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		    
		    
		    if($BrowserLang != "N"){
		    	_log("Selected language for RO installation is ","english");
				/*var $sshCommand = "rm -f " + $tomcatHome + "/webapps/PanacesGUI/scripts/ThirdPartyJSLib.zip"
				
				$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);*/
				var $sshCommand = "sed -i 's@language=en.*@language=ja@' " + $EAMSROOT+"installconfig/panaces.properties";
				_assertExists("$sshCommand", $sshCommand);
				$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
				
				var $sshCommand = "sed -i 's@country=US.*@country=JP@' " + $EAMSROOT+"installconfig/panaces.properties";
				_assertExists("$sshCommand", $sshCommand);
				$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		    }
		    else if($BrowserLang == "Y-JA"){
		    	_log("Selected language for RO installation is ","japanese");
		    	}

		    else if($BrowserLang == "Y-EN"){
		    	_log("Selected language for RO installation is ","japanese");
		    	}
		    
		    var $sshCommand = 'sudo sh ' + $EAMSROOT + '/bin/panaces start';
		    $panacesStartString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		    
		    _wait(60000);
		    
		    var $sshCommand = 'sudo sh ' + $EAMSROOT + '/bin/panaces status';
		    $panacesStartString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		    
		    _assertExists("panacesStartString", $panacesStartString);

		}
		else{
			_log("Panaces has installed properly in EAMSROOT path:"+$installedDRMBuildPath);
		}
	    
	} 
	
	else{
		var $sshCommand = 'sh' + ' ' + $DRMbuildServer +  'install.bin -f' + ' ' + $DRMbuildServer +  'PanacesServerInstaller.properties';
	       $statusString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand,"Y");

	       var $panacesStatusString = $statusString.split(",");
	       
	       var $panacesStatusString = $panacesStatusString.pop().trim();
	       
	       _log($panacesStatusString);
	       
	       if($panacesStatusString != "Exiting with exit code: 0"){
	              _assertTrue(false);        
	              _log("Installation Exit code is not zero");
	       }
	    var $sshCommand = "rm -f " + $EAMSROOT + "/tools/mysql/mysql-connector-java-5.1.20-bin.jar;echo EXIT Code : $?";
	    $status = Execute_Ssh_Command($drmServer, $drmUserName, $drmPassword, $sshCommand);
	    
	    var $sshCommand = "wget -r -nd -P " + $EAMSROOT + "/tools/mysql/" + " http://172.168.20.43/jenkins/job/DRM_Automation/ws/GPL/mysql-connector-java-5.1.20-bin.jar;echo EXIT Code : $?";
	    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	    
	    ////////////////////////////////Remove Zero kb jar files and Replace the Jars from tp folder//////////////////////
	      var $sshCommand = "rm -f " + $DRMbuild +"/tp" ;
	       $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	       
	       _log("copy the tp.tar.gz to DRM build path");
	        var $sshCommand = "wget -r -nd -P " + $DRMbuild + " http://172.168.20.43/jenkins/job/DRM_Automation/ws/GPL/tp.tar.gz";
	       $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	       
	       _log("Extract the tp.tar.gz files");
	       var $sshCommand = "tar xf " + $DRMbuild +"/tp.tar.gz -C " + $DRMbuild ;
	       $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	       
	       var $sshCommand = "sed -i " + "'s/\r$//'" + " " +$DRMbuild +"/tp/JarReplacementScript.sh";
	       $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		   
		    var $sshCommand = "chmod 755 " +  $DRMbuild +"/tp/JarReplacementScript.sh";
		    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	       
	       var $sshCommand = "sh " +  $DRMbuild +"/tp/JarReplacementScript.sh " +$EAMSROOT + " " + $tomcatHome;
	       $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	       
	       _wait(5000);
	       
	       _log("Extract the ThirdPartyJSLib.tar.gz files");
	       
	       var $sshCommand = "tar xf " + $DRMbuild +"/tp/ThirdPartyJSLib.tar.gz -C " + $tomcatHome+"/webapps/PanacesGUI/scripts/" ;
	       $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	       
	       // Copy the ThirdParty JS files to /opt/jboss-ews-2.0/tomcat7//webapps/PanacesGUI/scripts/
	       
	       var $sshCommand = "cp " + $tomcatHome+"/webapps/PanacesGUI/scripts/ThirdPartyJSLib/*.js " + $tomcatHome+"/webapps/PanacesGUI/scripts/";
	       $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	       _wait(3000);
	       var $sshCommand = "rm -rf " + $tomcatHome+"/webapps/PanacesGUI/scripts/ThirdPartyJSLib";
	       $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	       
	       var $sshCommand = "ls -lrt " + $tomcatHome+"/webapps/PanacesGUI/scripts/" ;
	       $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	       
	       var $sshCommand = "rm -f " + $DRMbuild +"/tp.tar.gz" ;
	       $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		   // Starting panaces
	       
	       if($BrowserLang == "N"){
	       	_log("Selected language for RO installation is ","english");
	   		/*var $sshCommand = "rm -f " + $tomcatHome + "/webapps/PanacesGUI/scripts/ThirdPartyJSLib.zip"
	   		
	   		$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);*/
	   		var $sshCommand = "sed -i 's@language=ja.*@language=en@' " + $EAMSROOT+"installconfig/panaces.properties";
	   		_assertExists("$sshCommand", $sshCommand);
	   		$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	   		
	   		var $sshCommand = "sed -i 's@country=JP.*@country=US@' " + $EAMSROOT+"installconfig/panaces.properties";
	   		_assertExists("$sshCommand", $sshCommand);
	   		$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	       }
	       else if($BrowserLang == "Y-JA"){
	       	_log("Selected language for RO installation is ","japanese");
	       	}

	       else if($BrowserLang == "Y-EN"){
	       	_log("Selected language for RO installation is ","japanese");
	       	}
	
		    var $sshCommand = 'sh ' + $EAMSROOT + 'bin/' + 'panaces start';
		    $panacesStartString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	
		    _assertExists("panacesStartString", $panacesStartString);
		    _wait(30000);
	}
 
    ///////////////////////////////////////////////////////////////////////////////////////
    
	/*var $sshCommand = "sed -i '9i$EAMSROOT=" + $EAMSROOT + "' " + $EAMSROOT + "/bin/Emma.sh";
    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
    EMMA_Setup();*/
	
	verify_SCC_panaces_status();
    
} //end of Install_Panaces_Server_SilentMode()

function verify_SCC_panaces_status(){
	
	var $sshCommand = 'sudo sh' + ' ' + $EAMSROOT + 'bin/' + 'panaces status';
    $panacesStatusString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	
	//// JY SP3 DRM with ActiveMQ /////////////////////////////////
	if($drmServer == "192.168.20.72"){
		var $panacesStatusString = $panacesStatusString.split(",");
		var $activeMQStatusString = $panacesStatusString[3];
		_assertExists("panacesServerStatus", $activeMQStatusString);
		var $panacesServerStatus = $panacesStatusString[4];
		_assertExists("panacesServerStatus", $panacesServerStatus);
		var $tomcatServerStatus = $panacesStatusString[5];
		_assertExists("TomcatServerStatus", $tomcatServerStatus);
		var $agentNodeStatus = $panacesStatusString[7];
		_assertExists("AgentNodeStatus", $agentNodeStatus);	
	}
	else{

		var $panacesStatusString = $panacesStatusString.split(",");
		var $activeMQStatusString = $panacesStatusString[0];
		_assertExists("activeMQServerStatus", $activeMQStatusString);
		var $panacesServerStatus = $panacesStatusString[1];
		_assertExists("panacesServerStatus", $panacesServerStatus);
		var $tomcatServerStatus = $panacesStatusString[2];
		_assertExists("TomcatServerStatus", $tomcatServerStatus);
		var $agentNodeStatus = $panacesStatusString[4];
		_assertExists("AgentNodeStatus", $agentNodeStatus);	
	}
	
	
	if ($activeMQStatusString == "Active MQ server is running") {
		var $panacesStatusMQ = "Active MQ server is running";
		_assertExists("Panaces Server Status is: ", $panacesStatusMQ);
	}

    if ($panacesServerStatus == "Panaces server is running") {
           var $panacesStatus = "Panaces Server is Running";
           _assertExists("Panaces Server Status is: ", $panacesStatus);
    } else if ($panacesServerStatus == "Panaces server is  not running") {
           var $panacesStatus = "Panaces Server Not Running";
           _assertExists("Panaces Server Status is: ", $panacesStatus);
    } else {
           var $panacesStatus = "Build Not installed successfully";
           _assertExists("Panaces Server Status is: ", $panacesStatus);
    }
    _assertEqual("Panaces server is running", $panacesServerStatus, "Validating Panaces server is running or not from server");

    if ($tomcatServerStatus == "Tomcat server is running") {
           var $tomcatStatus = "Tomcat server is running";
           _assertExists("Tomcat Server Status is: ", $tomcatStatus);
    } else if ($tomcatServerStatus == "Tomcat server is not running") {
           var $tomcatStatus = "Tomcat Server Not Running";
           _assertExists("Tomcat Server Status is: ", $tomcatStatus);
    } else {
           var $tomcatStatus = "Build Not installed successfully";
           _assertExists("Tomcat Server Status is: ", $tomcatStatus);
    }
    _assertEqual("Tomcat server is running", $tomcatServerStatus, "Validating Tomcat server is running or not from server");

    if ($agentNodeStatus == "Agent Node is running") {
           var $agentStatus = "Agent Node is running";
           _assertExists("Agent Node Status is: ", $agentStatus);
    } else if ($agentNodeStatus == "Agent Node is not running") {
           var $agentStatus = "Agent Node is not running";
           _assertExists("Agent Node Status is: ", $agentStatus);
    } else {
           var $agentStatus = "Build Not installed successfully";
           _assertExists("Agent Node Status is: ", $agentStatus);
    }
    _assertEqual("Agent Node is running", $agentNodeStatus, "Validating Agent Node is running or not from server");

    // Checking overall status of panaces installation
    if (($activeMQStatusString == "Active MQ server is running")&&($panacesStatus == "Panaces Server is Running") && ($tomcatStatus == "Tomcat server is running") && ($agentStatus == "Agent Node is running")) {
           var $panacesinstallationStatus = "Panaces installed successfully";
           _log("Panaces installed and started successfully");
    } else {
           _log("Panaces not installed or not started successfully");
           //_fail("panaces server not Installed successfully.So that stopping execution.Kindly look in to the logs.");
    }
    _wait(60000);
}

	
function replacementOfJars(){
	var $sshCommand = "sudo rm -f " + $EAMSROOT + "/tools/mysql/mysql-connector-java-5.1.20-bin.jar;echo EXIT Code : $?";
    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
    
    var $sshCommand = "sudo wget -r -nd -P " + $EAMSROOT + "/tools/mysql/" + " http://172.168.20.43/jenkins/job/DRM_Automation/ws/GPL/mysql-connector-java-5.1.20-bin.jar;echo EXIT Code : $?";
    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
    
    var $sshCommand = "sudo chown panacesuser:panacesusergroup " + $EAMSROOT + "/tools/mysql/mysql-connector-java-5.1.20-bin.jar;echo EXIT Code : $?";
    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
    
    var $sshCommand = "sudo chmod 775 " + $EAMSROOT + "/tools/mysql/mysql-connector-java-5.1.20-bin.jar;echo EXIT Code : $?";
    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
    
    ////////////////////////////////Remove Zero kb jar files and Replace the Jars from tp folder//////////////////////
      var $sshCommand = "sudo rm -f " + $DRMbuild +"/tp" ;
       $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
       
       _log("copy the tp.tar.gz to DRM build path");
        var $sshCommand = "sudo wget -r -nd -P " + $DRMbuild + " http://172.168.20.43/jenkins/job/DRM_Automation/ws/GPL/tp.tar.gz";
       $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
       
       _log("Extract the tp.tar.gz files");
       var $sshCommand = "sudo tar xf " + $DRMbuild +"/tp.tar.gz -C " + $DRMbuild ;
       $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
       
       var $sshCommand = "sudo chmod 777 " +  $DRMbuild +"/tp";
	    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	    
	    var $sshCommand = "sed -i " + "'s/\r$//'" + " " +$DRMbuild +"/tp/JarReplacementScriptOSHard.sh";
 	    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
 	    
 	    var $sshCommand = "sudo chown root:root " +  $DRMbuild +"/tp/JarReplacementScriptOSHard.sh";
 	    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
 	       
 	    var $sshCommand = "sudo chmod 777 " +  $DRMbuild +"/tp/JarReplacementScriptOSHard.sh";
 	    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
 	    
 	   var $sshCommand = "ls -lrt " +  $DRMbuild +"/tp";
	    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	    
	    var $sshCommand = "sudo sh " +  $DRMbuild +"/tp/JarReplacementScriptOSHard.sh " + $EAMSROOT +" "+$tomcatHome;
       $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
         	    
       _wait(5000);
       
       _log("Extract the ThirdPartyJSLib.tar.gz files"); 
       _log("ThirdPartyJSLib copy for DRill Listing page");
       
       var $sshCommand = "sudo tar xf " + $DRMbuild +"/tp/ThirdPartyJSLib.tar.gz -C " + $tomcatHome+"/webapps/PanacesGUI/scripts/" ;
       $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
       
       var $sshCommand = "sudo chmod 777 " +  $tomcatHome+"/webapps/PanacesGUI/scripts/ThirdPartyJSLib" ;
       $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
       
       var $sshCommand = "sudo chown tomcatuser:tomcatusergroup " +  $tomcatHome+"/webapps/PanacesGUI/scripts/ThirdPartyJSLib" ;
       $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
       
       var $sshCommand = "sudo chmod 757 " +  $tomcatHome+"/webapps/PanacesGUI/scripts/ThirdPartyJSLib/*" ;
       $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
       
       // Copy the ThirdParty JS files to /opt/jboss-ews-2.0/tomcat7//webapps/PanacesGUI/scripts/
       
       var $sshCommand = "sudo cp " + $tomcatHome+"/webapps/PanacesGUI/scripts/ThirdPartyJSLib/*.js " + $tomcatHome+"/webapps/PanacesGUI/scripts/";
       $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
       _wait(3000);
       var $sshCommand = "sudo chown tomcatuser:tomcatusergroup " +  $tomcatHome+"/webapps/PanacesGUI/scripts/*.js" ;
       $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
       
       var $sshCommand = "sudo chmod 757 " +  $tomcatHome+"/webapps/PanacesGUI/scripts/*.js" ;
       $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
       
       var $sshCommand = "sudo rm -rf " + $tomcatHome+"/webapps/PanacesGUI/scripts/ThirdPartyJSLib";
       $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
       
       var $sshCommand = "ls -lrt " + $tomcatHome+"/webapps/PanacesGUI/scripts/" ;
       $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
       
       var $sshCommand = "sudo rm -f " + $DRMbuild +"/tp.tar.gz" ;
       $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
       _log("$securedUrl "+$securedUrl);
       if($securedUrl != "yes" || $securedUrl != "Yes" || $securedUrl != "YES"){
    	   var $sshCommand = "sudo chmod 757 " + $tomcatHome+"/webapps/*" ;
           $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
       }
       
}//end fun jarReplacememt


/**
* Function is for Pre check before Installation of DRM server in silent Mode
*@param : $flag
*@return : null
*@Author: Swati Choudhary
*
*/

function Precheck_Befors_panaces_Server_Instalation($flag) {
	// Verify Eamsserver status is running or not
	var $sshCommand = "ps -ef|grep EamsServer|grep -v grep|awk ' { print $2 }'";
	$runningPanaces = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);

	_assertExists("RunningPanaces", $runningPanaces);

	// if Verify Eamsserver status is running then killing running process

	if ($runningPanaces != null || $runningPanaces != "") {
		var $sshCommand = "kill $(ps -ef|grep EamsServer|grep -v grep|awk ' { print $2 }')";
		$runningPanaces = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);

		_assertExists("RunningPanaces", $runningPanaces);

	}

	// Verify Tomcat Server status is running or not
	var $sshCommand = "ps -ef|grep org.apache.catalina.startup.Bootstrap|grep -v grep|awk ' { print $2 }'";
	$runningTomcat = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);

	_assertExists("Running tomcat PID is", $runningTomcat);

	// if Verify Tomcat Server status is running then killing running process

	if ($runningTomcat != null) {
		var $sshCommand = "kill $(ps -ef|grep org.apache.catalina.startup.Bootstrap|grep -v grep|awk ' { print $2 }')";
		$runningTomcat = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);

		_assertExists("Running tomcat PID is", $runningTomcat);
	}

	// Verify Ahent Node status is running or not
	var $sshCommand = "ps -ef|grep panaces.agents|grep -v grep|awk ' { print $2 }'";
	$runningAgentNode = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);

	_assertExists("Running tomcat PID is", $runningAgentNode);

	// if Verify Ahent Node is running then killing running process
	if ($runningAgentNode != null) {
		var $sshCommand = "kill $(ps -ef|grep panaces.agents|grep -v grep|awk ' { print $2 }')";
		$runningAgentNode = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);

		_assertExists("Running tomcat PID is", $runningAgentNode);

	}

	// Verify Panaces Server ,Tomcat Server and Agent Node
	if (($runningPanaces == "") && ($runningTomcat == "") && ($runningAgentNode == "")) {
		_log("there is NO Panaces Server ,Tomcat Server and Agent Node running");
	} else {
		_log("there is Panaces Server or Tomcat Server or Agent Node running and not killed properly");
		_fail("Panaces Server or Tomcat Server or Agent Node running and not killed properly.So that stopping execution.Kindly look in to the logs.");
	}

	if($osHardening=="yes" || $osHardening=="YES"){
		
		var $sshCommand = "sudo killall -9 java";
		$runningAgentNode = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		
		var $sshCommand = 'sudo rm -rf ' + $EAMSROOT;
		$chekingPanaces = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand,"Y");
		
		// Verify that $EAMSROOT or folder existing or not
		var $sshCommand = 'sudo sh ' + $EAMSROOT;
		$chekingPanaces = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand,"Y");
		_assertExists("RunningPanaces", $chekingPanaces);
	}
	else{
		var $sshCommand = 'rm -rf ' + $EAMSROOT;
		$chekingPanaces = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand,"Y");
		
		// Verify that $EAMSROOT or folder existing or not
		var $sshCommand = 'sh ' + $EAMSROOT;
		$chekingPanaces = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand,"Y");
		_assertExists("RunningPanaces", $chekingPanaces);
	}
	if ($chekingPanaces == $EAMSROOT + ": " + $EAMSROOT + ": " + "is a directory") {
		_log("$EAMSROOT already exsiting");
		UnInstall_Panaces_Server_SilentMode("1"); // If $EAMSROOT or folder existing then uninstalling or deleting it.
	} else {
		_log("$EAMSROOT not exists,User can continue with Installation");
	}
}

/**
* Function is for UnInstallation of DRM server in silent Mode
*@param :null
*@return : null
*@Author: Swati Choudhary
*
*/

function UnInstall_Panaces_Server_SilentMode() {

	if($osHardening=="yes" || $osHardening=="YES"){
		var $sshCommand = 'sudo sh' + ' ' + $installedDRMBuildPath;
		$panacesStartString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand,"Y");
		_assertExists("panacesStartString", $panacesStartString);

		if ($panacesStartString == $installedDRMBuildPath + ": " + $installedDRMBuildPath + ": " + "is a directory") {
			_log("EAMSROOT exsiting");

			// Stoping panaces
			var $sshCommand = 'sudo sh' + ' ' + $installedDRMBuildPath + 'bin/' + 'panaces stop';
			$panacesStartString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);

			_assertExists("panacesStartString", $panacesStartString);

			_wait(20000);
			// checking panaces,tomcat,agent Node status
			var $sshCommand = 'sudo sh' + ' ' + $installedDRMBuildPath + 'bin/' + 'panaces status';
			$panacesStatus = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);

			var $panacesStatusString = $panacesStatus.split(",");
			
			if($BrowserLang == "Y-JA"){
				var $panacesServerStatus = $panacesStatusString[1];
				var $tomcatServerStatus = $panacesStatusString[2];
				var $agentNodeStatus = $panacesStatusString[4];
			}
			else{
				var $panacesServerStatus = $panacesStatusString[0];
				var $tomcatServerStatus = $panacesStatusString[1];
				var $agentNodeStatus = $panacesStatusString[3];			
			}
			_assertExists("panacesServerStatus", $panacesServerStatus);
			_assertExists("TomcatServerStatus", $tomcatServerStatus);
			_assertExists("AgentNodeStatus", $agentNodeStatus);
			
			
			if (($panacesServerStatus == "Panaces server is  not running") && ($tomcatServerStatus == "Tomcat server is not running") && ($agentNodeStatus == "Agent Node is not running")) {
		
				_log("Panaces,Tomcat,AgentNode Stopped successfully");
				_wait(10000);
				var $sshCommand = 'sudo sh' + ' ' + $installedDRMBuildPath + 'UninstallerData/Uninstall_IBM_Resiliency_Orchestration -i silent';
				$statusString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		       
				var $splitString = $statusString.split(",");
				var $installationStatus = $splitString.pop().trim();
				_wait(20000);
				if($installationStatus != "Installation Complete."){
					_log("Uninstallation Not done successfully");
					_assertTrue(false);
				} else {
					_log("Uninstallation Done successfully");
				}
				_wait(20000);

				var $sshCommand = 'sudo sh ' + $installedDRMBuildPath;
				$chekingEAMSROOT = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand,"Y");

				_assertExists("Verif EAMS folder", $chekingEAMSROOT);
				
				var $sshCommand = 'sudo rm -rf ' + $installedDRMBuildPath;
				$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);

				// Deleting $installedDRMBuildPath
				if ($chekingEAMSROOT == $installedDRMBuildPath + ": " + $installedDRMBuildPath + ": " + "is a directory") {
					_log("chekingEAMSROOT exsiting");
					var $sshCommand = 'sudo rm -rf ' + $installedDRMBuildPath;
					_assertExists("sshCommand", $sshCommand);
					$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
					_log("$EAMSROOT Deleted  successfully");
				} else {
					_log("there is no  EAMSROOT existing ");
				}
				// Droping the panaces database
				_wait(10000);
				var $sshCommand = 'mysqladmin -u root -f drop panaces';
				_assertExists("sshCommand", $sshCommand);
				$databaseStatus = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
				_assertExists("databaseStatus", $databaseStatus);

				// verify database panaces dropped status
				if ($databaseStatus == "Database \"panaces\" dropped") {
					_log("Database panaces dropped sucessfully");
				} else {
					_log("Database panaces not dropped successfully");  
					_fail("Database panaces not dropped sucessfully.So that stopping execution.Kindly look in to the logs.");
				}
			} else {	
				_log("Panaces,Tomcat,AgentNode Not Stopped successfully");
				_fail("Panaces,Tomcat,AgentNode Not Stopped successfully.So that stopping execution.Kindly look in to the logs.");
			}
		} else {
			_log("There is no PANACES builed installed");
		}
		if($BrowserLang == "Y-JA"){
			var $sshCommand = 'sudo sh' + ' ' + $installedDRMBuildPath + 'bin/' + 'panaces stop';
			$panacesStartString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
			
			var $sshCommand = 'sudo killall -9 java';
			$panacesStartString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
			
			var $sshCommand = 'sudo sh' + ' ' + $installedDRMBuildPath + 'UninstallerData/Uninstall_IBM_Resiliency_Orchestration -i silent';
			$statusString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
			
			var $sshCommand = 'sudo rm -rf ' + $installedDRMBuildPath;
			$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
			
		}
	}
	else{
		var $sshCommand = 'sh' + ' ' + $installedDRMBuildPath;
		$panacesStartString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand,"Y");
		_assertExists("panacesStartString", $panacesStartString);

		if ($panacesStartString == $installedDRMBuildPath + ": " + $installedDRMBuildPath + ": " + "is a directory" ) {
			_log("EAMSROOT exsiting");

			// Stoping panaces
			var $sshCommand = 'sh' + ' ' + $installedDRMBuildPath + 'bin/' + 'panaces stop';
			$panacesStartString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);

			_assertExists("panacesStartString", $panacesStartString);

			_wait(20000);
			// checking panaces,tomcat,agent Node status
			var $sshCommand = 'sh' + ' ' + $installedDRMBuildPath + 'bin/' + 'panaces status';
			$panacesStatus = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);

			var $panacesStatusString = $panacesStatus.split(",");
			
			if($BrowserLang == "Y-JA"){
				var $panacesServerStatus = $panacesStatusString[1];
				var $tomcatServerStatus = $panacesStatusString[2];
				var $agentNodeStatus = $panacesStatusString[4];
			}
			else{
				var $panacesServerStatus = $panacesStatusString[0];
				var $tomcatServerStatus = $panacesStatusString[1];
				var $agentNodeStatus = $panacesStatusString[3];			
			}
			_assertExists("panacesServerStatus", $panacesServerStatus);
			_assertExists("TomcatServerStatus", $tomcatServerStatus);
			_assertExists("AgentNodeStatus", $agentNodeStatus);
			
			//**
//			var $panacesStatusString = $panacesStatus.split(",");
//			var $panacesServerStatus = $panacesStatusString[0];
//			_assertExists("panacesServerStatus", $panacesServerStatus);
//			var $tomcatServerStatus = $panacesStatusString[1];
//			_assertExists("TomcatServerStatus", $tomcatServerStatus);
//			var $agentNodeStatus = $panacesStatusString[3];
//			_assertExists("AgentNodeStatus", $agentNodeStatus);
			//**
			if (($panacesServerStatus == "Panaces server is  not running") && ($tomcatServerStatus == "Tomcat server is not running") && ($agentNodeStatus == "Agent Node is not running")) {
		
				_log("Panaces,Tomcat,AgentNode Stopped successfully");
				_wait(10000);
				var $sshCommand = 'sh' + ' ' + $installedDRMBuildPath + 'UninstallerData/Uninstall_IBM_Resiliency_Orchestration -i silent';
				$statusString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		       
				var $splitString = $statusString.split(",");
				var $installationStatus = $splitString.pop().trim();
				_wait(20000);
				if($installationStatus != "Installation Complete."){
					_log("Uninstallation Not done successfully");
					_assertTrue(false);
				} else {
					_log("Uninstallation Done successfully");
				}
				_wait(20000);

				var $sshCommand = 'sh ' + $installedDRMBuildPath;
				$chekingEAMSROOT = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand,"Y");

				_assertExists("Verif EAMS folder", $chekingEAMSROOT);
				
				var $sshCommand = 'rm -rf ' + $installedDRMBuildPath;
				$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);

				// Deleting $installedDRMBuildPath
				if ($chekingEAMSROOT == $installedDRMBuildPath + ": " + $installedDRMBuildPath + ": " + "is a directory") {
					_log("chekingEAMSROOT exsiting");
					var $sshCommand = 'rm -rf ' + $installedDRMBuildPath;
					_assertExists("sshCommand", $sshCommand);
					$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
					_log("$EAMSROOT Deleted  successfully");
				} else {
					_log("there is no  EAMSROOT existing ");
				}
				// Droping the panaces database
				_wait(10000);
				var $sshCommand = 'mysqladmin -u root -f drop panaces';
				_assertExists("sshCommand", $sshCommand);
				$databaseStatus = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);

				_assertExists("databaseStatus", $databaseStatus);

				// verify database panaces dropped status
				if ($databaseStatus == "Database \"panaces\" dropped") {
					_log("Database panaces dropped sucessfully");
				} else {
					_log("Database panaces not dropped successfully");
					_fail("Database panaces not dropped sucessfully.So that stopping execution.Kindly look in to the logs.");
				}
			} else {
		
				_log("Panaces,Tomcat,AgentNode Not Stopped successfully");
				_fail("Panaces,Tomcat,AgentNode Not Stopped successfully.So that stopping execution.Kindly look in to the logs.");
			}
		} else {
			_log("There is no PANACES builed installed");
		}
	}	
}

/**
* Function is for Updating Panaces property Server file to install the DRM server in silent Mode
*@param :null
*@return : null
*@Author: Swati Choudhary
*
*/

function update_Panaces_Server_propertyFile() {
	
	//To edit the java_home Path into tocat server.	
	
	var $sshCommand = "sed -i 's@JAVA_HOME=.*@JAVA_HOME=" + $JAVA_HOME + "@' " + $tomcatHome + "/bin/startup.sh";
	_assertExists("$sshCommand for update java home path", $sshCommand);
	$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);

	var $sshCommand = "sed -i 's@USER_INSTALL_DIR=.*@USER_INSTALL_DIR=" + $EAMSROOT + "@' " + $DRMbuildServer + "PanacesServerInstaller.properties";
	_assertExists("$sshCommand", $sshCommand);
	$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	
	
	// _assertExists("USER_INSTALL_DIR = ", $statusString);

	var $sshCommand = "sed -i 's@KEYSTORE_FILE_PATH=.*@KEYSTORE_FILE_PATH=" + $EAMSROOT + 'installconfig/keystore/sanovi.keystore' + "@' " + $DRMbuildServer + "PanacesServerInstaller.properties";
	$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	// _assertExists("KEYSTORE_FILE_PATH = ", $statusString);

	var $sshCommand = "sed -i 's@REFRESH_EXISTING_SCHEMA=.*@REFRESH_EXISTING_SCHEMA=" + $refreshExistingSchema + "@' " + $DRMbuildServer + "PanacesServerInstaller.properties";
	$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	// _assertExists("REFRESH_EXISTING_SCHEMA = ", $statusString);

	var $sshCommand = "sed -i 's@USER_MANAGEMENT_MODE=.*@USER_MANAGEMENT_MODE=" + $userManagementMode + "@' " + $DRMbuildServer +  "PanacesServerInstaller.properties";
	$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	// _assertExists("USER_MANAGEMENT_MODE = ", $statusString);

	var $sshCommand = "sed -i 's@ADVANCED_SERVER_TYPE=.*@ADVANCED_SERVER_TYPE=" + $advancedServerType + "@' " + $DRMbuildServer + "PanacesServerInstaller.properties";
	$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	// _assertExists("ADVANCED_SERVER_TYPE = ", $statusString);

	var $sshCommand = "sed -i 's@LICENSE_ACCEPTED=.*@LICENSE_ACCEPTED=TRUE@' " + $DRMbuildServer +  "PanacesServerInstaller.properties";
	$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);

	var $sshCommand = "sed -i 's@SUPPORT_USER_PASSWORD=.*@SUPPORT_USER_PASSWORD=Drmsupport123$@' " + $DRMbuildServer  + "PanacesServerInstaller.properties";
	$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);

	var $sshCommand = "sed -i 's@.*TOMCAT_HOME=.*@TOMCAT_HOME=" + $tomcatHome + "@' " + $DRMbuildServer + "PanacesServerInstaller.properties";
	$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);

	var $sshCommand = "sed -i 's@SANOVI_USER_PASSWORD=.*@SANOVI_USER_PASSWORD=Sanovi123$@' " + $DRMbuildServer + "PanacesServerInstaller.properties";
	$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);

	var $sshCommand = "sed -i 's@INSTALLER_UI=.*@INSTALLER_UI=silent@' " + $DRMbuildServer + "PanacesServerInstaller.properties";
	$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);

	var $sshCommand = "cat " + $DRMbuildServer +  "PanacesServerInstaller.properties";
	_assertExists("$sshCommand", $sshCommand);
	$updatedPanacesServerFileStatus = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	_assertExists("updatedPanacesServerFileStatus", $updatedPanacesServerFileStatus);
	
	if($BrowserLang == "Y-JA"){
		var $panacesPropertyFile = "INSTALLER_UI=silent" + ",MODIFY_SYSTEM_FILES=1,USER_INSTALL_DIR=" + $EAMSROOT + ",KEYSTORE_FILE_PATH=" + $EAMSROOT + 'installconfig/keystore/sanovi.keystore' + ",REFRESH_EXISTING_SCHEMA="
			+ $refreshExistingSchema + ",STOP_SANOVIDRM_AND_UNINSTALL=0,MYSQL_ROOT_PASSWORD=,USER_MANAGEMENT_MODE=" + $userManagementMode + ",ADVANCED_SERVER_TYPE=" + $advancedServerType
			+ ",ADVANCED_SERVER_URL=,ADVANCED_SERVER_DOMAIN=,DIRECTORY_USERNAME=,DIRECTORY_PASSWORD=,SEARCH_BASE_FOR_READING_ROLES=,LICENSE_ACCEPTED=TRUE" + ",SUPPORT_USER_PASSWORD=Drmsupport123$" + ",TOMCAT_HOME="
			+ $tomcatHome + ",SANOVI_USER_PASSWORD=Sanovi123$,USER_INPUT_RESULT_NAT_IP=";
	}
	else{
	var $panacesPropertyFile = "INSTALLER_UI=silent" + ",MODIFY_SYSTEM_FILES=1,USER_INSTALL_DIR=" + $EAMSROOT + ",KEYSTORE_FILE_PATH=" + $EAMSROOT + 'installconfig/keystore/sanovi.keystore' + ",REFRESH_EXISTING_SCHEMA="
			+ $refreshExistingSchema + ",STOP_SANOVIDRM_AND_UNINSTALL=0,MYSQL_ROOT_PASSWORD=,USER_MANAGEMENT_MODE=" + $userManagementMode + ",ADVANCED_SERVER_TYPE=" + $advancedServerType
			+ ",ADVANCED_SERVER_URL=,ADVANCED_SERVER_DOMAIN=,DIRECTORY_USERNAME=,DIRECTORY_PASSWORD=,SEARCH_BASE_FOR_READING_ROLES=,EULA_ACCEPTED=YES" + ",SUPPORT_USER_PASSWORD=Drmsupport123$" + ",TOMCAT_HOME="
			+ $tomcatHome + ",SANOVI_USER_PASSWORD=Sanovi123$,USER_INPUT_RESULT_NAT_IP=";
	}
	_assertExists("$panacesProperty", $panacesPropertyFile);
	_assertEqual($panacesPropertyFile, $updatedPanacesServerFileStatus, "Verifying Property File is updated successfully or not");
	/*
	if ($panacesPropertyFile != $updatedPanacesServerFileStatus) {
		_log("Property File not updated successfully");
		_fail("Property File not updated successfully,so that stopping execution");
	}
	*/
}


/**
* Function is to Copy the Build to install the DRM server in silent Mode
*@param :null
*@return : null
*@Author: Swati Choudhary
*
*/

function Panaces_Build_Copy_into_DRM_Server() {	
	 
	var $sshCommand = 'sh ' + $DRMbuildServer;
	$chekingDRMBuild = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand,"Y");
	_assertExists("Verif build folder", $chekingDRMBuild);

	if($osHardening=="yes" || $osHardening=="YES"){
	// Deleting $DRMbuild server Folder
		if ($chekingDRMBuild == $DRMbuildServer + ": " + $DRMbuildServer + ": " + "is a directory") {
			_log("$chekingDRMBuild exsiting");
			var $sshCommand = 'sudo'+' ' +'rm -rf ' + $DRMbuildServer;
			_assertExists("sshCommand", $sshCommand);
			$status = Execute_Ssh_Command($drmServer, $drmUserName, $drmPassword, $sshCommand);
			_log("Build folder Deleted successfully");
		} else {
			_log("There is no  build Folder existing ");
		}
		if($BrowserLang == "Y-JA"){
			var $sshCommand = 'sudo'+' ' +'rm -rf ' + $DRMbuildServer;
			Execute_Ssh_Command($drmServer, $drmUserName, $drmPassword, $sshCommand);
		}
		var $sshCommand =   'sudo'+' ' +"mkdir " + $DRMbuild + "/DRM_Build";
		Execute_Ssh_Command($drmServer, $drmUserName, $drmPassword, $sshCommand);
		
		var $sshCommand = 'sudo'+' ' +"chmod 777 "+ $DRMbuild+"/DRM_Build";
		$status = Execute_Ssh_Command($drmServer, $drmUserName, $drmPassword, $sshCommand);
		
		var $sshCommand =   'sudo'+' ' +"mkdir " + $DRMbuildServer;
		Execute_Ssh_Command($drmServer, $drmUserName, $drmPassword, $sshCommand);
		
		var $sshCommand = 'sudo'+' ' +"chmod 777 "+ $DRMbuildServer;
		
		$status = Execute_Ssh_Command($drmServer, $drmUserName, $drmPassword, $sshCommand);
		
		/*var $sshCommand = 'sudo'+' ' +"chown sanovi:sanovi "+ $DRMbuildServer;
		$status = Execute_Ssh_Command($drmServer, $drmUserName, $drmPassword, $sshCommand);*/
	}
	else{
		if ($chekingDRMBuild == $DRMbuildServer + ": " + $DRMbuildServer + ": " + "is a directory") {
			_log("$chekingDRMBuild exsiting");
			var $sshCommand = 'rm -rf ' + $DRMbuildServer;
			_assertExists("sshCommand", $sshCommand);
			$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
			_log("Build folder Deleted successfully");
		} else {
			_log("There is no  build Folder existing ");
		}
		if($BrowserLang == "Y-JA"){
			var $sshCommand = 'sudo'+' ' +'rm -rf ' + $DRMbuildServer;
		}

	var $sshCommand =  "mkdir " + $DRMbuild + "/DRM_Build;mkdir " + $DRMbuildServer;
	SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	}
	var $sshCommand = "wget -r -nd -P " + $DRMbuildServer + " " + $g_buildUrl + "/SanoviDRM/Server/PanacesServerInstaller.properties;echo EXIT Code : $?";

	$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	
	var $patt1=new RegExp("EXIT Code : 0");
	var $outproperties = $patt1.test($status);
	
	var $sshCommand = "wget -r -nd -P " + $DRMbuildServer + " " + $g_buildUrl + "/SanoviDRM/Server/install.bin;echo EXIT Code : $?";

	$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	

	var $patt1=new RegExp("EXIT Code : 0");
	var $outInstallBin = $patt1.test($status);
	
	if($osHardening=="yes" || $osHardening=="YES"){
	var $sshCommand = 'sudo'+' ' +"chmod 777 "+ $DRMbuildServer + "*.*" ;

	$status = Execute_Ssh_Command($drmServer, $drmUserName, $drmPassword, $sshCommand);
	}
	else{
	var $sshCommand = "chmod 777 "+ $DRMbuildServer + "*.*" ;

	$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	}
	if ($outInstallBin == true && $outproperties == true) {
		_log("DRMbuild copied successfully");
	} else {
		_log("DRMbuild not copied successfully");
		_fail("DRMbuild not copied successfully,so that stopping execution");
	}
}


/**
* Function is for License installation inn two ways liense genration upload and another sql method if fails
*@param :null
*@return : null
*@Author: Anantha Sakthi
*
*/

function License_installation() {	


	if($osHardening=="yes" || $osHardening=="YES"){
		var $licenseDir = $DRMbuild + "/DRM_Build/License/";	
			
		var $sshCommand =  "sudo rm -rf " + $licenseDir + "/*";
		$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		
		var $sshCommand =  "sudo mkdir " + $licenseDir;
		$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		
		var $sshCommand =  "sudo chmod 777 " + $licenseDir;
		$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		
		var $sshCommand = "sudo wget -r -nd -P " + $licenseDir + " http://172.168.20.43/jenkins/job/DRM_Automation/ws/Automation/License/LicenseScript.zip;echo EXIT Code : $?";		
		$wgetStatusString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		
		var $sshCommand = "sudo unzip -d " + $licenseDir + " " + $licenseDir +"LicenseScript.zip";	
		$wgetStatusString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand,"Y");
			
		var $sshCommand = "sudo wget -r -nd -P " + $licenseDir + " "+	$g_licenseZipPath+";echo EXIT Code : $?";		
		$wgetStatusString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);

		var $sshCommand = "sudo chmod 777 "+ $licenseDir + "/*";
		$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		
		var $sshCommand = "sudo sh "+$licenseScriptPath + ' ' + $zipPath + '\ ' + $EAMSROOT;
		var $statusString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		
		var $licenseOutput = $statusString.split(",");
		$licenseOutput.pop();
		var $uploadLicenseStatus = $licenseOutput.pop();

		_assertExists("uploadLicenseStatus", $uploadLicenseStatus);
		if ($uploadLicenseStatus == "License installed successfully"){
			_log("License Uploaded succesfully");
		} 
	}else{
		var $licenseDir = $DRMbuild + "/DRM_Build/License/";	
		
		var $sshCommand =  "rm -rf " + $licenseDir + "/*";
		$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		
		var $sshCommand =  "mkdir -P " + $licenseDir;
		$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		
		var $sshCommand = "wget -r -nd -P " + $licenseDir + " http://172.168.20.43/jenkins/job/DRM_Automation/ws/Automation/License/LicenseScript.zip;echo EXIT Code : $?";
		
		$wgetStatusString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		
		var $sshCommand = "unzip -d " + $licenseDir + " " + $licenseDir +"LicenseScript.zip";
		
		$wgetStatusString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand,"Y");
		
		
		var $sshCommand = "wget -r -nd -P " + $licenseDir + " "+	$g_licenseZipPath+";echo EXIT Code : $?";
		
		$wgetStatusString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);

		var $sshCommand = "chmod 777 "+ $licenseDir + "/*";
		$status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		
		var $sshCommand = "sh "+$licenseScriptPath + ' ' + $zipPath + '\ ' + $EAMSROOT;
		var $statusString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		
		var $licenseOutput = $statusString.split(",");
		$licenseOutput.pop();
		var $uploadLicenseStatus = $licenseOutput.pop();

		_assertExists("uploadLicenseStatus", $uploadLicenseStatus);
		if ($uploadLicenseStatus == "License installed successfully"){
			_log("License Uploaded succesfully");
		} 
	}	
    _wait(10000);
    
    var $sshCommand = 'sudo sh ' + $EAMSROOT + '/bin/panaces stop';
    $panacesStartString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
    _wait(5000);
    var $sshCommand = 'sudo sh ' + $EAMSROOT + '/bin/panaces start';
    $panacesStartString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);    
    _wait(30000);
 
    $i = 0;
   	while(true){
   		var $sshCommand = "tail -5 "+ $EAMSROOT+"/var/log/console.log";
   		$panacesStatusString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
   		
   		if($panacesStatusString.indexOf("Panaces Services successfully") > -1){
   									  
   			_log("Panaces services Started Successfully, so start verifying the other services");
   			// for maria DB 
   			if($osHardening=="yes" || $osHardening=="YES"){
   				var $sshCommand = "sudo sh "+$licenseScriptPath + ' ' + $zipPath + '\ ' + $EAMSROOT;
   	   			$statusString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
				_wait(30000);
   	   			// verify login page
				//loginPage($username, $password); 				
				break;
   			}else{
   				var $sshCommand = "sh "+$licenseScriptPath + ' ' + $zipPath + '\ ' + $EAMSROOT;
   	   			$statusString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
				_wait(30000);
   	   			// verify login page
				//loginPage($username, $password); 				
				break;
   			}
   		}
   		/*        
   		 * putting $i == 10 , since some times once firing panaces start command does not work
   		 */
   		if($i == 10){
   			_log("Firing command to start panaces server once again after waiting for more than 10 mins");
   		    SecuredShellConnection($drmServer, $drmUserName, $drmPassword, 'sudo sh ' + $EAMSROOT + '/bin/panaces start');    
   		    _wait(30000);
   		}
   		if($i == 20){
   			_log("Failed Panaces services Started Successfully, so start verifying the other services");
   			break;
   		}
   		_wait(60000);
   		$i++;
   	}
}

/**
* This Precheck Precheck_Tomcat_Home before installing DRM server.
*@param : null
*@return : null
*@Author: Anita
*/
function Precheck_Tomcat_Home(){
	_log("Remove the existing work folder in $TOMCAT_HOME");
	var $sshCommand = "sudo rm -rf " + $tomcatHome+"/work/*";
    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
    var $sshCommand = "sudo ls " + $tomcatHome;
    var $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
    _log($status);
}

//jarReplacement_Post_DRM_Installation added by anita
function JarReplacement_Post_DRM_Installation(){
	replacementOfJars();
	//updateServerXMLFile();
	//updateWebXMLFile();  //this is veryfirst time drm 
	 PreConditionCheck_Permission(); //for VM protection enable the permission for remote/agents folder	
	 SecurityInjection_PostInstallation();// for VM protection enable the permission
	
	var $sshCommand = 'sudo sh ' + $EAMSROOT + '/bin/panaces stop';
	$panacesStartString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	 _wait(5000);
	
	var $sshCommand = 'sudo sh ' + $EAMSROOT + '/bin/panaces start';
	$panacesStartString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	 
	var $sshCommand = 'sudo sh ' + $EAMSROOT + '/bin/panaces status';
	$panacesStartString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	_assertExists("panacesStartString", $panacesStartString);
}

/**
* Function is for Updating Agent property file to install the DRM server in silent Mode at PR.
*@param :null
*@return : null
*@Author: Swati Choudhary
*
*/
function Update_PropertyFile_LocalAgent_PR() {
	Update_local_Agent_propertyFile($agentBuildPR, $compIPPR, $remoteUserNameValPR, $remotePwdValPR, $panacesAgentNodeAddressPR, $localAgentPathPR);
}

/**
* Function is for Updating Agent property file to install the DRM server in silent Mode at DR.
*@param :null
*@return : null
*@Author: Swati Choudhary
*
*/
function Update_PropertyFile_LocalAgent_DR() {
	Update_local_Agent_propertyFile($agentBuildDR, $compIPDR, $remoteUserNameValDR, $remotePwdValDR, $panacesAgentNodeAddressDR, $localAgentPathDR);
}

/**
* Function is for Updating Agent property file to install the DRM server in silent Mode at PR.
*@param :null
*@return : null
*@Author: Anantha Sakthi
*
*/
function Update_DB2PropertyFile_LocalAgent_PR() {
	Update_local_Agent_propertyFile($agentBuildPR, $compIPPR, $remoteUserNameValPR, $remotePwdValPR, $panacesAgentNodeAddressPR, $localAgentPathPR,$userPR,$db2ResultDirPR);
}

/**
* Function is for Updating Agent property file to install the DRM server in silent Mode at DR.
*@param :null
*@return : null
*@Author: Anantha Sakthi
*
*/
function Update_DB2PropertyFile_LocalAgent_DR() {
	Update_local_Agent_propertyFile($agentBuildDR, $compIPDR, $remoteUserNameValDR, $remotePwdValDR, $panacesAgentNodeAddressDR, $localAgentPathDR,$userDR,$db2ResultDirDR);
}


///////////////////////////////////
/**
* Function is for Updating Agent property file to install the DRM server in silent Mode at PR. ( Sybase Log PFR)
*@param :null
*@return : null
*@Author: Govinda Mengji
*
*/
function Update_SybasePropertyFile_LocalAgent_PR() {
	Update_local_Agent_propertyFile($agentBuildPR, $compIPPR, $remoteUserNameValPR, $remotePwdValPR, $panacesAgentNodeAddressPR, $localAgentPathPR,"","",$userinputresultjarsybasePR);
}

/**
* Function is for Updating Agent property file to install the DRM server in silent Mode at DR. ( Sybase Log PFR )
*@param :null
*@return : null
*@Author: Govinda Mengji
*
*/
function Update_SybasePropertyFile_LocalAgent_DR() {
	Update_local_Agent_propertyFile($agentBuildDR, $compIPDR, $remoteUserNameValDR, $remotePwdValDR, $panacesAgentNodeAddressDR, $localAgentPathDR,"","",$userinputresultjarsybaseDR);
}

////////////////////////////////////
/**
* Function is for Updating Agent property file to install the DRM server in silent Mode.
*@param :$agentBuild, $compIP, $remoteUserNameVal, $remotePwdVal, $panacesAgentNodeAddress, $localAgentPath
*@return : null
*@Author: Swati Choudhary
*
*/

function Update_local_Agent_propertyFile($agentBuild, $compIP, $remoteUserNameVal, $remotePwdVal, $panacesAgentNodeAddress, $localAgentPath,$instanceUser,$dbInputPath,$userinputresultjarsybase) {
	
	 $DRMbuildAgent = $DRMbuild + "DRM_Build/Agents/" ; 	
	 
	 _log($SAHI_HOME + "tools\\sed\\bin\\sed -i \"s/=1/=0/\" " + $SAHI_HOME + "utility\\Propertyfile\\PanacesAgentsInstaller.properties");
	 _execute($SAHI_HOME + "tools\\sed\\bin\\sed -i \"s/=1/=0/\" " + $SAHI_HOME + "utility\\Propertyfile\\PanacesAgentsInstaller.properties","true");
	 _log($datasetType);
	 if($datasetType == "DB2"){
		 
		 _log($datasetType);
		 _execute($SAHI_HOME + "tools\\sed\\bin\\sed -i \"s/DB2_AGENT_CHK=.*/DB2_AGENT_CHK=" + $db2AgentChk + "/\" " + $SAHI_HOME + "utility\\Propertyfile\\PanacesAgentsInstaller.properties","true");
		
		 _execute($SAHI_HOME + "tools\\sed\\bin\\sed -i \"s@USER_INPUT_RESULT_DB2_INSTANCEUSER=.*@USER_INPUT_RESULT_DB2_INSTANCEUSER=" + $instanceUser + "@\" " + $SAHI_HOME + "utility\\Propertyfile\\PanacesAgentsInstaller.properties","true");
		
		 _execute($SAHI_HOME + "tools\\sed\\bin\\sed -i \"s@USER_INPUT_RESULT_DB2DIR=.*@USER_INPUT_RESULT_DB2DIR=" + $dbInputPath +  "@\" " + $SAHI_HOME + "utility\\Propertyfile\\PanacesAgentsInstaller.properties","true");
					 
	 }
	 
	 
	 if($datasetType == "MySQL"){
		 
		_execute($SAHI_HOME + "tools\\sed\\bin\\sed -i \"s@MYSQL_AGENT_CHK=.*@MYSQL_AGENT_CHK=" + $mysqlAgentChk + "@\" " + $SAHI_HOME + "utility\\Propertyfile\\PanacesAgentsInstaller.properties","true");
			
	 }
	 if($datasetType == "PostgreSQL"){
	
		_execute($SAHI_HOME + "tools\\sed\\bin\\sed -i \"s@POSTGRES_AGENT_CHK=.*@POSTGRES_AGENT_CHK=" + $postgresAgentChk + "@\" " + $SAHI_HOME + "utility\\Propertyfile\\PanacesAgentsInstaller.properties","true");
		
		_execute($SAHI_HOME + "tools\\sed\\bin\\sed -i \"s/PFR_AGENT_CHK=.*/PFR_AGENT_CHK=" + $pfrAgentChk + "/\" " + $SAHI_HOME + "utility\\Propertyfile\\PanacesAgentsInstaller.properties","true");
	 }
	 if($datasetType == "SRS"){
	
		_execute($SAHI_HOME + "tools\\sed\\bin\\sed \"s@SRS_AGENT_CHK=.*@SRS_AGENT_CHK=" + $srsAgentChk + "@\" " + $SAHI_HOME + "utility\\Propertyfile\\PanacesAgentsInstaller.properties","true");
		
	 }
	 
	 if($systemTypeProtection == "Hitachi Replication "){
	 
		 _execute($SAHI_HOME + "tools\\sed\\bin\\sed \"s@TRUE_COPY_AGENT_CHK=.*@TRUE_COPY_AGENT_CHK=" + $truecopyAgentChk + "@\" " + $SAHI_HOME + "utility\\Propertyfile\\PanacesAgentsInstaller.properties","true");
		
		}
			
	 	if ($systemTypeProtection == "EMC SRDF Replication"){
	 _execute($SAHI_HOME + "tools\\sed\\bin\\sed \"s@SRDF_AGENT_CHK=.*@SRDF_AGENT_CHK=" + $srdfAgentChk + "@\" " + $SAHI_HOME + "utility\\Propertyfile\\PanacesAgentsInstaller.properties","true");
			
	 }
	 
	 if($systemTypeProtection == "HP XP Replication "){
		
		 _execute($SAHI_HOME + "tools\\sed\\bin\\sed \"s@HPXP_AGENT_CHK=.*@HPXP_AGENT_CHK=" + $hpxpAgentChk + "@\" " + $SAHI_HOME + "utility\\Propertyfile\\PanacesAgentsInstaller.properties","true");
	
	 }
	
	if ($datasetType=="Oracle"){
		 
		    _execute($SAHI_HOME + "tools\\sed\\bin\\sed -i \"s/ORACLE_AGENT_CHK=.*/ORACLE_AGENT_CHK=" + $oracleAgentChk + "/\" " + $SAHI_HOME + "utility\\Propertyfile\\PanacesAgentsInstaller.properties","true");
				 
			_execute($SAHI_HOME + "tools\\sed\\bin\\sed -i \"s@USER_INPUT_RESULT_JAR_ORA=.*@USER_INPUT_RESULT_JAR_ORA=" + $userinputresultjarora + "@\" " + $SAHI_HOME + "utility\\Propertyfile\\PanacesAgentsInstaller.properties","true");
			
			
			_execute($SAHI_HOME + "tools\\sed\\bin\\sed -i \"s@USER_INPUT_RESULT_JLIB_ORA=.*@USER_INPUT_RESULT_JLIB_ORA=" + $userinputresultjlibora + "@\" " + $SAHI_HOME + "utility\\Propertyfile\\PanacesAgentsInstaller.properties","true");
			
		
			_execute($SAHI_HOME + "tools\\sed\\bin\\sed -i \"s@USER_INPUT_ORACLE_HOME=.*@USER_INPUT_ORACLE_HOME=" + $userinputoraclehome + "@\" " + $SAHI_HOME + "utility\\Propertyfile\\PanacesAgentsInstaller.properties","true");
						
		
	}
	
	if($systemTypeProtection== "Oracle Data Guard"){
			_execute($SAHI_HOME + "tools\\sed\\bin\\sed -i \"s@ORACLE_DATA_GUARD_AGENT_CHK=.*@ORACLE_DATA_GUARD_AGENT_CHK=" + $oracleDGAgentChk + "@\" " + $SAHI_HOME + "utility\\Propertyfile\\PanacesAgentsInstaller.properties","true");	
	}
	
	
	 if($systemTypeProtection == "PFR"){
			
			_execute($SAHI_HOME + "tools\\sed\\bin\\sed -i \"s/PFR_AGENT_CHK=.*/PFR_AGENT_CHK=" + $pfrAgentChk + "/\" " + $SAHI_HOME + "utility\\Propertyfile\\PanacesAgentsInstaller.properties","true");
	}
	 
	 if($datasetType == "Sybase"){		 
		 	
			_execute($SAHI_HOME + "tools\\sed\\bin\\sed -i \"s/SYBASE_AGENT_SOL_CHK=.*/SYBASE_AGENT_SOL_CHK=" + $sybaseAgentChk + "/\" " + $SAHI_HOME + "utility\\Propertyfile\\PanacesAgentsInstaller.properties","true");

			_execute($SAHI_HOME + "tools\\sed\\bin\\sed -i \"s@USER_INPUT_RESULT_JAR_SYBASE=.*@USER_INPUT_RESULT_JAR_SYBASE=" + $userinputresultjarsybase + "@\" " + $SAHI_HOME + "utility\\Propertyfile\\PanacesAgentsInstaller.properties","true");
			
	 }	
	 	_execute($SAHI_HOME + "tools\\sed\\bin\\sed -i \"s/USER_INPUT_RESULT_PRIMARY_PANACES_SERVER_IP=.*/USER_INPUT_RESULT_PRIMARY_PANACES_SERVER_IP=" + $primaryPanacesServer + "/\" " + $SAHI_HOME + "utility\\Propertyfile\\PanacesAgentsInstaller.properties","true");

		_execute($SAHI_HOME + "tools\\sed\\bin\\sed -i \"s/USER_INPUT_RESULT_SECONDARY_PANACES_SERVER_IP=.*/USER_INPUT_RESULT_SECONDARY_PANACES_SERVER_IP=" + $SecondaryPanacesServer + "/\" " + $SAHI_HOME + "utility\\Propertyfile\\PanacesAgentsInstaller.properties","true");

		_execute($SAHI_HOME + "tools\\sed\\bin\\sed -i \"s/PANACES_AGENT_NODE_ADDRESS=.*/PANACES_AGENT_NODE_ADDRESS=" + $panacesAgentNodeAddress + "/\" " + $SAHI_HOME + "utility\\Propertyfile\\PanacesAgentsInstaller.properties","true");

		 if($datasetType == "MySQL"){
			 _execute($SAHI_HOME + "tools\\sed\\bin\\sed -i \"s/AGENTS_START_YES=.*/AGENTS_START_YES=0/\" " + $SAHI_HOME + "utility\\Propertyfile\\PanacesAgentsInstaller.properties","true");
		 } else {
			 _execute($SAHI_HOME + "tools\\sed\\bin\\sed -i \"s/AGENTS_START_YES=.*/AGENTS_START_YES=1/\" " + $SAHI_HOME + "utility\\Propertyfile\\PanacesAgentsInstaller.properties","true");
		 }
		

		var $propertiesString = _readFile($SAHI_HOME + "utility\\Propertyfile\\PanacesAgentsInstaller.properties");
		
		var $sshCommand = "echo \"" + $propertiesString +  "\" >" +$DRMbuildAgent + "PanacesAgentsInstaller.properties";

		$status = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
		
		var $sshCommand = "dos2unix "+ $DRMbuildAgent +"PanacesAgentsInstaller.properties "+ $DRMbuildAgent +"PanacesAgentsInstaller.properties";

		$status = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
		 

}


/**
* Function is for Installation of Local agent in silent Mode at PR.
*@param : null
*@return : null
*@Author: Swati Choudhary
*
*/

function Install_Local_Agent_SilentMode_PR() {
	
	Install_Local_Agent_SilentMode($agentBuildPR, $compIPPR, $remoteUserNameValPR, $remotePwdValPR, $localAgentPathPR);
	
}

/**
* Function is for Installation of Local agent in silent Mode at DR.
*@param :null
*@return : null
*@Author: Swati Choudhary
*
*/
function Install_Local_Agent_SilentMode_DR() {
	Install_Local_Agent_SilentMode($agentBuildDR, $compIPDR, $remoteUserNameValDR, $remotePwdValDR, $localAgentPathDR);


}

/**
* Function is for Installation of Local agent in silent Mode .
*@param :$agentBuild, $compIP, $remoteUserNameVal, $remotePwdVal, $localAgentPath
*@return : null
*@Author: Swati Choudhary
*
*/
function Install_Local_Agent_SilentMode($agentBuild, $compIP, $remoteUserNameVal, $remotePwdVal, $localAgentPath) {
	
	 $DRMbuildAgent = $DRMbuild + "DRM_Build/Agents/" ; 
	 
	var $agentLocation = $DRMbuildAgent;

	// calling precheck function before starting installation of drm server
	if($BrowserLang == "N"){
		Precheck_Befors_Local_Agent_Instalation("1", $agentBuild, $compIP, $remoteUserNameVal, $remotePwdVal, $localAgentPath);
	}
	else if($BrowserLang == "Y-JA"){
		_log("Precheck Skipped as Subsystem are japan OS");
		}

	else if($BrowserLang == "Y-EN"){
		Precheck_Befors_Local_Agent_Instalation("1", $agentBuild, $compIP, $remoteUserNameVal, $remotePwdVal, $localAgentPath);
		}
	
	
	// installation of Local Agent
	var $sshCommand = 'sh' + ' ' + $agentLocation + 'install.bin -f' + ' ' + $DRMbuildAgent + 'PanacesAgentsInstaller.properties';
	$status = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);

	var $splitString = $status.split(",");
	var $installationStatus = $splitString.pop().trim();
	
			if($installationStatus != "Installation Complete."){
				_log("Agent Not installed successfully");
				_fail("Agent Not installed successfully.So that stopping execution.Kindly look in to the logs.");
			}

	
	 /*if($datasetType == "MySQL"){
		 
			var $sshCommand = "rm -f " + $localAgentPath + "/DRMAgents/lib/mysql-connector-java-5.1.20-bin.jar;echo EXIT Code : $?";

			$status = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
		 
			var $sshCommand = "wget -r -nd -P " + $localAgentPath + "/DRMAgents/lib/" + " http://172.168.20.43/jenkins/job/DRM_Automation/ws/GPL/mysql-connector-java-5.1.20-bin.jar;echo EXIT Code : $?";

			$status = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
	   
		 var $sshCommand = 'sh ' + $localAgentPath + "/DRMAgents/" + $systemTypeDataset + 'Agent.sh start';
		$agentStatusString = Execute_Ssh_Command($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
		
		 var $sshCommand = 'sh ' + $localAgentPath + "/DRMAgents/" + $systemType + 'OSAgent.sh start';
		$agentStatusString = Execute_Ssh_Command($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);

	 }
	if($systemTypeDataset == "DB2"){
		var $sshCommand = 'sh ' + $localAgentPath + "/DRMAgents/" + $systemTypeDataset + 'Agent.sh start';
		$agentStatusString = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);

		var $agentStatusSplit = $agentStatusString.split(",");
		var $agentStatusSplit = $agentStatusSplit[0].split("DB2Agent ");
		var $agentStatus = $agentStatusSplit[1];
		_assertExists($agentStatusString);
		_assertEqual("already running.",$agentStatus );
	} 	
	else {
		// checking all agent status
		_wait(10000);
		var $sshCommand = 'sh ' + $localAgentPath + "/DRMAgents/" + $systemTypeDataset + 'Agent.sh status';
		$agentStatusString = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
		var $agentStatusSplit = $agentStatusString.split(",");
		var $agentStatus = $agentStatusSplit[0];
		_assertExists($systemTypeDataset, "agentStatus", $agentStatus);

		if ($agentStatus == $systemTypeDataset + 'Agent is running.') {
			var $localAgentStatus = "Local Agent is running.";
			_assertExists("Local Agent Status is: ", $localAgentStatus);
		} else if ($agentStatus == $systemTypeDataset + 'Agent is not running.') {
			var $localAgentStatus = "Local Agent is not running.";

			_assertExists("Local Agent Status is: ", $localAgentStatus);
			_assertFalse($systemTypeDataset + 'Agent not started autmatically after agent instalation,Now starting agent using sahi.');
			_wait(10000);
			var $sshCommand = 'sh ' + $localAgentPath + "/DRMAgents/" + $systemTypeDataset + 'Agent.sh start';
			$agentStartString = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
			_assertExists("agentStartString", $agentStartString);
			_wait(10000);
			// If not running Started though sahi
			var $sshCommand = 'sh ' + $localAgentPath + "/DRMAgents/" + $systemTypeDataset + 'Agent.sh status';
			$agentStatusString = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
			var $agentStatusSplit = $agentStatusString.split(",");
			var $agentStatus = $agentStatusSplit[0];
			_assertExists($systemTypeDataset, "agentStatus", $agentStatus);

			if ($agentStatus == $systemTypeDataset + 'Agent is running.') {
				var $localAgentStatus = "Local Agent is running.";
				_assertExists("Local Agent Status is: ", $localAgentStatus);
			} else {
				_log("Agent Not installed successfully");
				_fail("Agent Not installed successfully.So that stopping execution.Kindly look in to the logs.");
			}
		} else {
			var $localAgentStatus = "Agent Not installed successfully";
			_assertExists("Local Agent Status is: ", $localAgentStatus);
			_fail("Agent Not installed successfully.So that stopping execution.Kindly look in to the logs.");
		}
		_assertEqual("Local Agent is running.", $localAgentStatus, "Validating Local Agent is running or not from server");
		}*/
	}




/**
* Function is for Installation of Local agent in silent Mode at PR OS_Authentication.
*@param : null
*@return : null
*@Author: Aditi Jain
*
*/

function Install_Local_Agent_SilentMode_OS_Authentication_PR() {
		Install_Local_Agent_SilentMode_OS_Authentication($agentBuildPR, $compIPPR, $remoteUserNameValPR, $remotePwdValPR, $localAgentPathPR);
}

/**
* Function is for Installation of Local agent in silent Mode at DR OS_Authentication.
*@param :null
*@return : null
*@Author: Aditi Jain
*
*/
function Install_Local_Agent_SilentMode_OS_Authentication_DR() {
		Install_Local_Agent_SilentMode_OS_Authentication($agentBuildDR, $compIPDR, $remoteUserNameValDR, $remotePwdValDR, $localAgentPathDR);

}

/**
* Function is for Installation of Local agent in silent Mode for Oracle OSs authentication.
*@param :$agentBuild, $compIP, $remoteUserNameVal, $remotePwdVal, $localAgentPath
*@return : null
*@Author: Aditi Jain
*
*/


function Install_Local_Agent_SilentMode_OS_Authentication($agentBuild, $compIP, $remoteUserNameVal, $remotePwdVal, $localAgentPath) {
	
	 $DRMbuildAgent = $DRMbuild + "DRM_Build/Agents/" ; 
	
	var $agentLocation = $DRMbuildAgent;
	
	if($BrowserLang == "N"){
		Precheck_Befors_Local_Agent_Instalation("1", $agentBuild, $compIP, $remoteUserNameVal, $remotePwdVal, $localAgentPath);
	}
	else if($BrowserLang == "Y-JA"){
		_log("Precheck Skipped as Subsystem are japan OS");
		}

	else if($BrowserLang == "Y-EN"){
		Precheck_Befors_Local_Agent_Instalation("1", $agentBuild, $compIP, $remoteUserNameVal, $remotePwdVal, $localAgentPath);
		}
	
	// installation of Local Agent
	var $sshCommand = 'sh' + ' ' + $agentLocation + 'install.bin -f' + ' ' + $DRMbuildAgent + 'PanacesAgentsInstaller.properties';
	$statusString = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
	_assertExists("$statusString", $statusString);

	// checking all agent status
	_wait(10000);
	var $sshCommand = 'sh ' + $localAgentPath + $systemTypeDataset + 'Agent.sh status';
	$agentStatusString = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
	var $agentStatusSplit = $agentStatusString.split(",");
	var $agentStatus = $agentStatusSplit[0];
	_assertExists($systemTypeDataset, "agentStatus", $agentStatus);

	if ($agentStatus == $systemTypeDataset + 'Agent is running.') {
		var $localAgentStatus = "Local Agent is running.";
		_assertExists("Local Agent Status is: ", $localAgentStatus);
		_log("Stop the agent and start through OS authenticated user");
		var $sshCommand = 'sh ' + $localAgentPath + $systemTypeDataset + 'Agent.sh stop';
		$agentStartString = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);	
		_assertExists("agentStartString", $agentStartString);
		_log("starting Dataset agent using os authenticated user");
		var $sshCommand = "su -c \"" + $localAgentPathPR + $systemTypeDataset +"Agent.sh start\" - " + $osUserName;
		$status = Execute_Ssh_Command($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
		var $agentStartString = $status.get("output").toString();
		_assertExists("agentStartString", $agentStartString);
		
	}  else if ($agentStatus == $systemTypeDataset + 'Agent is not running.') {
		var $localAgentStatus = "Local Agent is not running.";
		_assertExists("Local Agent Status is: ", $localAgentStatus);
		_assertFalse($systemTypeDataset + 'Agent is stopped ,we can start agent from OS authenticated user using sahi.');
		_wait(10000);
		var $sshCommand = "su -c \"" + $localAgentPathPR + $systemTypeDataset +"Agent.sh start\" - " + $osUserName;
		$status = Execute_Ssh_Command($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
		var $agentStartString = $status.get("output").toString();
		_assertExists("agentStartString", $agentStartString);
		_wait(10000);
		// If not running Started though sahi
		var $sshCommand = 'sh ' + $localAgentPath + $systemTypeDataset +"Agent.sh status";
		$agentStatusString = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
	
		var $agentStatusSplit = $agentStatusString.split(",");
		var $agentStatus = $agentStatusSplit[0];
		_assertExists($systemTypeDataset, "agentStatus", $agentStatus);

		if ($agentStatus == $systemTypeDataset + 'Agent is running.') {
			var $localAgentStatus = "Local Agent is running.";
			_assertExists("Local Agent Status is: ", $localAgentStatus);
		} else {
			_log("Agent Not installed successfully");
			_fail("Agent Not installed successfully.So that stopping execution.Kindly look in to the logs.");
		}
	} else {
		var $localAgentStatus = "Agent Not installed successfully";
		_assertExists("Local Agent Status is: ", $localAgentStatus);
	}
	
	_wait(10000);
	var $sshCommand = "sh "+$localAgentPathPR+"DataGuardAgent.sh status";
	$agentStatusString = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
	var $agentStatusSplit = $agentStatusString.split(",");
	var $agentStatus = $agentStatusSplit[0];
	_assertExists("DataGuardAgentStatus", $agentStatus);

	if ($agentStatus ==  "DataGuardAgent is running.") {
		var $localAgentStatus = "Local Agent is running.";
		_assertExists("Local Agent Status is: ", $localAgentStatus);
		_log("Stop the agent and start through OS authenticated user");
		var $sshCommand = 'sh ' + $localAgentPathPR + "DataGuardAgent.sh stop" ;
		$agentStartString = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
	
		_assertExists("agentStartString", $agentStartString);
		_log("starting protection agent by os authentication user");
		var $sshCommand = "su -c \"" + $localAgentPathPR + "DataGuardAgent.sh start\" - " + $osUserName;
		$status = Execute_Ssh_Command($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
		var $agentStartString = $status.get("output").toString();
		_assertExists("DataGuard agentStartString", $agentStartString);
		_wait(10000);
		
		var $sshCommand = "sh "+$localAgentPathPR+"DataGuardAgent.sh status";
		$agentStatusString = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
		var $agentStatusSplit = $agentStatusString.split(",");
		var $agentStatus = $agentStatusSplit[0];
		_assertExists("DataGuardAgentStatus", $agentStatus);
		
	}  else if ($agentStatus == 'DataGuardAgent is not running.') {
		var $localAgentStatus = "Local Agent is not running.";
		_assertExists("Local Agent Status is: ", $localAgentStatus);
		_assertFalse( 'DataGuardAgent is stopped ,we can start agent from OS authenticated user using sahi.');
		_wait(10000);
		// If not running Started though sahi
		var $sshCommand = "su -c \"" + $localAgentPathPR + "DataGuardAgent.sh start\" - " + $osUserName;
		$status = Execute_Ssh_Command($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
		var $agentStartString = $status.get("output").toString();
		_assertExists("agentStartString", $agentStartString);
		_wait(10000);
	
		var $sshCommand = "sh "+$localAgentPathPR+"DataGuardAgent.sh status";
		$agentStatusString = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);

		var $agentStatusSplit = $agentStatusString.split(",");
		var $agentStatus = $agentStatusSplit[0];
		_assertExists("DataGuardAgentStatus", $agentStatus);

		if ($agentStatus == 'DataGuardAgent is running.') {
			var $localAgentStatus = "Local Agent is running.";
			_assertExists("Local Agent Status is: ", $localAgentStatus);
		} else {
			_log("Agent Not installed successfully");
			_fail("Agent Not installed successfully.So that stopping execution.Kindly look in to the logs.");
		}
	} else {
		var $localAgentStatus = "Agent Not installed successfully";
		_assertExists("Local Agent Status is: ", $localAgentStatus);
	}
	_assertEqual("Local Agent is running.", $localAgentStatus, "Validating Local Agent is running or not from server");

}


/**
* Function is for UnInstallation of Local agent in silent Mode at PR.
*@param :null
*@return : null
*@Author: Swati Choudhary
*
*/

function UnInstall_Local_Agent_SilentMode_PR() {
	UnInstall_Local_Agent_SilentMode("0", $agentBuildPR, $compIPPR, $remoteUserNameValPR, $remotePwdValPR, $localAgentPathPR);
}

/**
* Function is for UnInstallation of Local agent in silent Mode at DR.
*@param :null
*@return : null
*@Author: Swati Choudhary
*
*/
function UnInstall_Local_Agent_SilentMode_DR() {
	UnInstall_Local_Agent_SilentMode("0", $agentBuildDR, $compIPDR, $remoteUserNameValDR, $remotePwdValDR, $localAgentPathDR);
}

/**
* Function is for UnInstallation of Local agent in silent Mode.
*@param :$flag, $agentBuild, $compIP, $remoteUserNameVal, $remotePwdVal, $localAgentPath
*@return : null
*@Author: Swati Choudhary
*
*/
function UnInstall_Local_Agent_SilentMode($flag, $agentBuild, $compIP, $remoteUserNameVal, $remotePwdVal, $localAgentPath) {


	var $directoryCheck = DirectoryCheck($localAgentPath,$compIP, $remoteUserNameVal, $remotePwdVal);
	
	if ($directoryCheck == "Yes") {
		var $sshCommand = 'sh ' + $localAgentPath +  "DRMAgents/" + $systemTypeDataset + 'Agent.sh stop';
		$agentStartString = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
		_assertExists("agentStartString", $agentStartString);

		// checking Local agent status
		_wait(5000);
		var $sshCommand = 'sh ' + $localAgentPath +  "DRMAgents/" + $systemTypeDataset + 'Agent.sh status';
		$agentStatus = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);

		_assertExists($systemTypeDataset, "agentStatus", $agentStatus);

		if ($agentStatus == $systemTypeDataset + 'Agent is not running.') {
			var $localAgentStatus = "Local Agent is not running.";
			_assertExists("Local Agent Status is: ", $localAgentStatus);
		}
		_wait(5000);
		// Verify all other agent status is running or not
		var $sshCommand = "ps -ef|grep lax|grep -v grep|awk '{ print $2 }'";
		$runningAgents = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);

		var $sshCommand = "ps -ef|grep rsync|grep -v grep|awk '{ print $2 }'";
		$runningAgentsrsync = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
		_assertExists("RunningAgent", $runningAgentsrsync);
		
		var $sshCommand = "ps -ef|grep java|grep -v grep|awk '{ print $2 }'";
		$runningAgentsjava = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
		_assertExists("RunningAgent", $runningAgentsjava);

		// if Verify agent is running then killing running process

		if ( $runningAgents != "" ) {
			var $sshCommand = "kill $(ps -ef|grep lax|grep -v grep|awk '{ print $2 }')";
			$runningAgents = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
			_assertExists("RunningAgent", $runningAgents);
		}
			if ( $runningAgentsrsync !="") {	
			var $sshCommand = "kill $(ps -ef|grep rsync|grep -v grep|awk '{ print $2 }')";
			$runningAgentsrsync = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
			_assertExists("RunningAgent", $runningAgentsrsync);
			
			}
			
			if ( $runningAgentsjava !="") {	
				var $sshCommand = "kill $(ps -ef|grep java|grep -v grep|awk '{ print $2 }')";
				$runningAgentsjava = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
				_assertExists("RunningAgent", $runningAgentsjava);
				
				}
		// Verify agents
		if ( $runningAgents == "" && $runningAgentsrsync =="" && $runningAgentsjava =="") {
			_log("There is no Agent running");
		} else {
			_log("There is Agents are running and not killed properly");
			_fail("There is Agents are running and not killed properly.So that stopping execution.Kindly look in to the logs.");
		}

		// uninstallation of Local Agent
		var $sshCommand = 'sh' + ' ' + $localAgentPath +"DRMAgents/" + 'UninstallerData/Uninstall_IBM_Resiliency_Orchestration_Agents -i silent';
		$status = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);

		var $splitString = $status.split(",");
		var $installationStatus = $splitString.pop().trim();
		if($installationStatus != "Installation Complete."){
			_log("Agent Not Uninstallation successfully");
			_assertTrue(false);
		} else {
			_log("Uninstallation Done successfully");
		}

		_wait(5000);
		// Deleting $localAgentPath
		
		var $sshCommand = 'rm -rf ' + $localAgentPath;
		$status = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
		_assertExists("sshCommand", $sshCommand);


	} else {
		_log("there is no Agent Installed. ");
	}

	if ($flag == "0") {	
		var $directoryCheck = DirectoryCheck($localAgentPath,$compIP, $remoteUserNameVal, $remotePwdVal);
	
		if ($directoryCheck == "Yes") {
				_log("agentBuild Folder exsiting");
			// Deleting Agent Folder
			var $sshCommand = 'rm -rf ' + $localAgentPath;
			$status = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
			_log("Agent Build folder Deleted successfully");
		} else {
			_log("there is no Agent build Folder existing ");
		}
	}

}
/**
* Function is to Copy the Agent build to install the agent in silent Mode at PR.
*@param :null
*@return : null
*@Author: Swati Choudhary
*
*/

function AgentBuild_Copy_into_AgentHost_PR() {
	AgentBuild_Copy_into_AgentHost($agentBuildPR, $compIPPR, $remoteUserNameValPR, $remotePwdValPR,"PanacesAgentsInstaller.properties","DRMAgent");
}

/**
* Function is to Copy the Agent build to install the agent in silent Mode at DR.
*@param :null
*@return : null
*@Author: Swati Choudhary
*
*/
function AgentBuild_Copy_into_AgentHost_DR() {
	AgentBuild_Copy_into_AgentHost($agentBuildDR, $compIPDR, $remoteUserNameValDR, $remotePwdValDR,"PanacesAgentsInstaller.properties","DRMAgent");
}

/**
* Function is to Copy the Agent build to install the agent in silent Mode at PR.
*@param :null
*@return : null
*@Author: Swati Choudhary
*
*/

function AgentBuild_Copy_into_PFRFile_PR() {
	AgentBuild_Copy_into_AgentHost($agentBuildPR, $compIPPR, $remoteUserNameValPR, $remotePwdValPR,"PFRInstaller.properties","PFR");
}

/**
* Function is to Copy the Agent build to install the agent in silent Mode at DR.
*@param :null
*@return : null
*@Author: Swati Choudhary
*
*/
function AgentBuild_Copy_into_PFRFile_DR() {
	AgentBuild_Copy_into_AgentHost($agentBuildDR, $compIPDR, $remoteUserNameValDR, $remotePwdValDR,"PFRInstaller.properties","PFR");
}

/**
* Function is to check the directory is available or not.
*@param :$DRMbuildAgent,$compIP, $remoteUserNameVal, $remotePwdVal
*@return : Yes/No
*@Author: Anantha Sakthi 
*
*/

function DirectoryCheck($DRMbuildAgent,$compIP, $remoteUserNameVal, $remotePwdVal){
    var $sshCommand = 'ls ' + $DRMbuildAgent;
    $checkingAgent = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand,"Y");

    _assertExists("checkingAgent", $checkingAgent);
        
    var $checkingAgentLinux = "";
    var $checkingAgentSolaris = "";
    var $checkingAgentAIX = "";
    var $checkingAgentHPUX = "";
    
    if($systemType == "Linux" && $checkingAgent != null){        
        var $splitString = $checkingAgent.split(":");
        $checkingAgentLinux = $splitString.pop().trim();
        var $JpCheckAgent=$splitString[1];
        _log($JpCheckAgent+" This")
    }

    if($systemType == "Solaris" && $checkingAgent != null){        
        var $splitString = $checkingAgent.split(":");
        $checkingAgentSolaris = $splitString.pop().trim();
    }
    
    if($systemType == "AIX" && $checkingAgent != null){
        var $splitString = $checkingAgent.split(":");
        $checkingAgentAIX = $splitString[1];
        
    }
    
    if($systemType == "HPUX" && $checkingAgent != null){
        var $splitString = $checkingAgent.split($DRMbuildAgent);
        $checkingAgentHPUX = $splitString[1];
        
    }
    
    _log($checkingAgentLinux + " $checkingAgentLinux");
    if ($checkingAgentLinux == "No such file or directory" ||$JpCheckAgent == " cannot access"+" "+$localAgentPathPR ||$JpCheckAgent == " cannot access"+" "+$EAMSROOT|| $checkingAgentAIX == "No such file or directory" || $checkingAgentSolaris == "does not exist." || $checkingAgentHPUX == " not found") {
        _log("Directory not exists");
        return "No";

    } else {
        _log("Directory exists");
        return "Yes";
    }
    
}

/**
* Function is to Copy the Agent build to install the agent in silent Mode.
*@param : $agentBuild, $compIP, $remoteUserNameVal, $remotePwdVal
*@return : null
*@Author: Swati Choudhary
*
*/       
function AgentBuild_Copy_into_AgentHost($agentBuild, $compIP, $remoteUserNameVal, $remotePwdVal,$proertyFile,$binFile) {
	 

	var $directoryCheck = DirectoryCheck($DRMbuildAgent,$compIP, $remoteUserNameVal, $remotePwdVal);
	_log($directoryCheck + "$directoryCheck");
	if ($directoryCheck == "Yes") {
	_log("Old agentBuild existing");
	var $sshCommand = 'rm -rf ' + $DRMbuildAgent;
	$status = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
	} else {
	_log("agentBuild not existing");
	}

	var $sshCommand =   "mkdir -p " + $DRMbuildAgent;
	$status = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
	 

	if ($binFile == "DRMAgent"){
		var $sshCommand = "wget -r -nd -P " + $DRMbuildAgent + " " + $g_buildUrl + "/SanoviDRM/Agents/" + $proertyFile + ";echo EXIT Code : $?";
		$statusString = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
		var $patt1=new RegExp("EXIT Code : 0");
		 $outProperties = $patt1.test($statusString);
		var $sshCommand = "wget -r -nd -P " + $DRMbuildAgent + " " + $g_buildUrl + "/SanoviDRM/Agents/" + $osType + "_" + $binFile + "_7.2.zip;echo EXIT Code : $?";
		$status = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal,  $sshCommand);
	} else {
		var $sshCommand = "wget -r -nd -P " + $DRMbuildAgent + " " + $g_buildUrl + "/SanoviDRM/SFR/" + $proertyFile + ";echo EXIT Code : $?";
		$statusString = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
		var $patt1=new RegExp("EXIT Code : 0");
		 $outProperties = $patt1.test($statusString);
		var $sshCommand = "wget -r -nd -P " + $DRMbuildAgent + " " + $g_buildUrl + "/SanoviDRM/SFR/" + $osType + "_" + $binFile + "_7.2.zip;echo EXIT Code : $?";
		$status = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal,  $sshCommand);
	}

	var $patt1=new RegExp("EXIT Code : 0");
	var $outInstall = $patt1.test($status);
	
	if ($outProperties == true && $outInstall == true) {
	_log("agentBuild copied successfully");
	} else {
	_log("agentBuild not copied successfully");
	_fail("agentBuild not copied successfully,so that stopping execution");
	}
	var $sshCommand = "unzip "+ $DRMbuildAgent +$osType + "_" + $binFile + "_7.2.zip -d " +  $DRMbuildAgent;

	$status = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal,  $sshCommand);
	var $sshCommand = "cp "+ $DRMbuildAgent + $osType + "/* " +  $DRMbuildAgent;

	$status = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal,  $sshCommand);
	var $sshCommand = "chmod 777 "+ $DRMbuildAgent + "/*.*" ;

	$status = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal,  $sshCommand);
	}

/**
* Function is to Pre check before Installation of Local Agent in silent Mode.
*@param : $flag, $agentBuild, $compIP, $remoteUserNameVal, $remotePwdVal, $localAgentPath
*@return : null
*@Author: Swati Choudhary
*
*/

function Precheck_Befors_Local_Agent_Instalation($flag, $agentBuild, $compIP, $remoteUserNameVal, $remotePwdVal, $localAgentPath) {
	// Verify Eamsserver status is running or not
	var $sshCommand = "ps -ef|grep DRMAgents |grep -v grep|awk '{ print $2 }'";
	$runningAgents = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);

	_assertExists("RunningAgent", $runningAgents);

	// if Verify Eamsserver status is running then killing running process

	if ($runningAgents != "") {
		var $sshCommand = "kill $(ps -ef|grep DRMAgents |grep -v grep|awk '{ print $2 }')";
		$runningAgents = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);

		_assertExists("RunningAgent", $runningAgents);
	}
	// Verify Panaces Server ,Tomcat Server and Agent Node
	if ($runningAgents == "") {
		_log("There is no Agent running");
	} else {
		_log("There is Agents are running and not killed properly");
		_fail("There is Agents are running and not killed properly.So that stopping execution.Kindly look in to the logs.");
	}

	// Verify that LocalAgentPath or folder existing or not

	var $directoryCheck = DirectoryCheck($localAgentPath,$compIP, $remoteUserNameVal, $remotePwdVal);
	_log($directoryCheck + "$directoryCheck");
	if ($directoryCheck == "Yes") {
		_log("localAgentPath already exsiting");
		UnInstall_Local_Agent_SilentMode($flag, $agentBuild, $compIP, $remoteUserNameVal, $remotePwdVal, $localAgentPath); // If $EAMSROOT or folder existing then uninstalling or
		// deleting it.
	} else {
		_log("$EAMSROOT not exists,User can continue with Installation");
	}
}

/**
* Function is to get the latest build from Build Server
*@param : null
*@return : null
*@Author: Swati Choudhary
*
*/

function Get_latest_Build() {
	
	 $DRMbuildAgent = $DRMbuild + "/DRM_Build/Agents/";
	 $DRMbuildServer = $DRMbuild + "DRM_Build/Server/"; 

}


/**
* Function is to Copy workflow xml from DRM Server to SAHI machine
*@param : null
*@return : null
*@Author: Ananth
*
*/

function copy_Workflow_xml_from_DrmServer() {	

	var $l_workPath = $WFPath.replace(/\\/g,"/");

	var $l_workflowSource = $EAMSROOT + 'workflows/' + $l_workPath + "/";
	
	var $l_workflowDestination =  $SAHI_USERDATA + $WFPath + "/";		
	
	Create_Batch_File_For_Pscp($drmServer,$drmUserName,$drmPassword,$l_workflowSource,$l_workflowDestination);
	var $l_workFlowPath = $WFPath.replace(/\//g,"\\");

	_execute("cmd /c RMDIR /Q /S "+ $SAHI_USERDATA + "\\" + $l_workFlowPath ,"true");

	_execute($SAHI_HOME + "utility\\PscpCopy.bat","true");

	var $check = validatePscpCopy();
	
	if ($check == true) {
		_log("workflows are copied successfully");
	} else {
		_fail("workflows are not copied successfully,so that stopping execution");
	}

}

/**
* Function is to Copy workflow xml from DRM Server to SAHI machine
*@param : null
*@return : null
*@Author: Ananth
*
*/

function copy_WorkflowFile_xml_from_DrmServer() {	

	var $l_workflowSource = $EAMSROOT + 'workflows/' +  $WFPathForPFR + "/" + $filePFRral;
	
	var $l_workflowDestination =  $SAHI_USERDATA + $WFPath + "/" + $filePFRral;		
	
	Create_Batch_File_For_Pscp($drmServer,$drmUserName,$drmPassword,$l_workflowSource,$l_workflowDestination);
	var $l_workFlowPath = $WFPath.replace(/\//g,"\\");

	_execute("cmd /c del /Q /S "+ $SAHI_USERDATA + "\\" + $l_workFlowPath + $filePFRral,"true");

	_execute($SAHI_HOME + "utility\\PscpCopy.bat","true");

	var $check = validatePscpCopy();
	
	if ($check == true) {
		_log("workflows are copied successfully");
	} else {
		_fail("workflows are not copied successfully,so that stopping execution");
	}
}

/**
* Function is to Copy file from Server to SAHI machine
*@param : null
*@return : null
*@Author: Ananth
*
*/

function Copy_File_From_linux($a_TimestampSource,$a_TimestampDestination,$a_Server,$a_UserName,$a_Password){	
	
	Create_Batch_File_For_Pscp($a_Server,$a_UserName,$a_Password,$a_TimestampSource,$a_TimestampDestination);
	var $l_TimestampDestination = $a_TimestampDestination.replace(/\//g,"\\");

	_execute("cmd /c del /Q /S "+ $l_TimestampDestination,"true");

	_execute($SAHI_HOME + "utility\\PscpCopy.bat","true");

	var $check = validatePscpCopy();
	
	if ($check == true) {
		_log("File is copied successfully");
	} else {
		_fail("File is not copied successfully,so that stopping execution");
	}
	
}


/**
* Function is toGet oracle path and jar path.
*@param : $compIP, $userNameVal, $pwdVal, $sshCommand
*@return : null
*@Author: Swati Choudhary
*
*/

/*function Get_Oracle_JarPath($compIP, $userNameVal, $pwdVal){
	var $sshCommand = "echo $ORACLE_HOME";
	var $oracleHome = Execute_Ssh_Command($compIP, $userNameVal, $pwdVal, $sshCommand);

	_assertExists("Oracle Home Path",$oracleHome);
	
	var $sshCommand = "echo $ORACLE_HOME/jlib";
	var $oracleJlib = Execute_Ssh_Command($compIP, $userNameVal, $pwdVal, $sshCommand);
	
	var $sshCommand = "echo $ORACLE_HOME/jdbc/lib";
	var $oracleJdbc = Execute_Ssh_Command($compIP, $userNameVal, $pwdVal, $sshCommand);

	//_assertExists("Oracle Jar File Path",$oracleJar);
	_setGlobal("OracleJdbcFilePath", $oracleJdbc);
	_setGlobal("OracleJlibFilePath", $oracleJlib);
	_setGlobal("OracleHomePath", $oracleHome);	

}*/




/*
function Get_Oracle_JarPath($compIP, $userNameVal, $pwdVal){
	var $sshCommand = "echo $ORACLE_HOME";
	var $status = Execute_Ssh_Command($compIP, $userNameVal, $pwdVal, $sshCommand);
	var $action = $status.get("output");
	var $actionStatus1 = $action.toString();
	var $oracleHome1 = $actionStatus1.split(",");
	var $oracleHome=$oracleHome1[1];
	_assertExists("Oracle Home Path",$oracleHome);
	var $sshCommand = "echo $ORACLE_HOME/jlib";
	var $status = Execute_Ssh_Command($compIP, $userNameVal, $pwdVal, $sshCommand);
	var $action = $status.get("output");
	var $actionStatus1 = $action.toString();
	var $oracleJlib1 = $actionStatus1.split(",");	
	var $oracleJlib=$oracleJlib1[1];
	
	var $sshCommand = "echo $ORACLE_HOME/jdbc/lib";
	var $status = Execute_Ssh_Command($compIP, $userNameVal, $pwdVal, $sshCommand);
	var $action = $status.get("output");
	var $actionStatus1 = $action.toString();
	var $oracleJdbc1 = $actionStatus1.split(",");	
	var $oracleJdbc=$oracleJdbc1[1];
	//_assertExists("Oracle Jar File Path",$oracleJar);
	_setGlobal("OracleJdbcFilePath", "/software/oracle/app/product/11.2.0/dbhome_1/jdbc/lib");
	_setGlobal("OracleJlibFilePath", "/software/oracle/app/product/11.2.0/dbhome_1/jlib");
	_setGlobal("OracleHomePath", "/software/oracle/app/product/11.2.0/dbhome_1/");	

}
*/

/**
*********Installing PFR in Windows machine*********
*This function is used create the batch file to copy the sed folder to remote machine for file manipulation.
*@param :  $sourcePath - source path of the folder.
*			$machineIp - IP address of the remote machine.
*			$userName - username of the remote machine.
*			$Password - password of the remote machine.
*@returns : null
*@author : Ananth
*/

function Create_Batch_File_To_Copy_Sed($sourcePath,$machineIp,$userName,$Password){

	var $timeInterval = "\n\n";				//Time interval for command execution
	
	var $netConnection = "net use \"\\\\" +$machineIp+ "\\c$\" " + $Password + " /user:" + $userName + "\""+$timeInterval; //\connect to remote machine to do copy.
	
	var $remoteCopy = "xcopy " + $sourcePath + " \\\\" +$machineIp + "\\c$\\sed\\ /s /i /Y"+$timeInterval; //copy the folder to remote machine
	
	var $removeConnection = "net use \"\\\\" +$machineIp+ "\\c$\"  /delete" +$timeInterval;			//remove the connection with remote machine.
	
	var $removeConnectionIP = "net use \"\\\\" +$machineIp+ "\\IPc$\"  /delete" +$timeInterval;			//remove the connection with remote machine.
	
	$copySed = $netConnection + $remoteCopy + $removeConnection + $removeConnectionIP;
	
	writeToFile($copySed, $SAHI_HOME +"Utility\\SedCopy.bat");

}

/**
*This function is used create the batch file to execute batch file on remote machine for sed manipulation.
*@param :	$machineIp - IP address of the remote machine.
*			$userName - username of the remote machine.
*			$Password - password of the remote machine.
*@return : null
*@author : Ananth
*/

function Create_Batch_File_For_RemoteSed($machineIp,$userName,$Password){
	
	var $timeInterval = "\n\n";				//Time interval for command execution
	
	var $psPath = "path = %path%;"+ $SAHI_HOME +"tools\\PsExec"+$timeInterval;		//set the path for psExec tool.
	
	var $remoteExecution = "PsExec.exe \\\\" + $machineIp + " -u " + $userName + " -p " + $Password + " c:\\sed\\RemoteExecute.bat"+$timeInterval; //execute batch on remote machine.
	
	$remoteMessage = $psPath + $remoteExecution + "Exit";
	writeToFile($remoteMessage,$SAHI_HOME +"Utility\\Execute.bat");

}

/**
*This function is used create the batch file for sed manipulation.
*@param :  $MsSqlAgentWindowCheck,$PfrAgentCheck,$UserInstallDir,$UserInputResultJarMsSql,
*$UserInputResultPrimaryPanacesServerIP,$UserInputResultSecondaryPanacesServerIP,$PanacesAgentNodeAddress,$AgentStartYes$fileName
*@return : null
*@author : Ananth
*/

function CreateBatchFileToEditPropertyfileForLocalAgents($MsSqlAgentWindowCheck,$PfrAgentCheck,$UserInstallDir,$UserInputResultJarMsSql,$UserInputResultPrimaryPanacesServerIP,$UserInputResultSecondaryPanacesServerIP,$PanacesAgentNodeAddress,$AgentStartYes,$fileName){

	//var $timeInterval = "\n\n";				//Time interval for command executi

	var $sedPath = "cd c:\\sed\\bin\n";		//set the path for psExec tool.
	
	var $sedString0 = "sed -i \"s/=1/=0/g\"  \"" + $fileName + "\" \n";
	
	var $sedString = "sed -i \"s/MSSQL_AGENT_WINDOWS_CHK=.*/MSSQL_AGENT_WINDOWS_CHK=" +$MsSqlAgentWindowCheck + "/g\"  \"" + $fileName + "\" \n"; //sed manipulation.
	
	var $sedString1 = "sed -i \"s/PFR_AGENT_CHK=.*/PFR_AGENT_CHK=" +$PfrAgentCheck + "/g\" \"" + $fileName + "\" \n" ; //sed manipulation.
	
	var $sedString2 = "sed -i \"s/USER_INSTALL_DIR=.*/USER_INSTALL_DIR=" +$UserInstallDir + "/g\" \"" + $fileName + "\" \n" ; //sed manipulation.
	
	var $sedString3 = "sed -i \"s/USER_INPUT_RESULT_JAR_MSSQL=.*/USER_INPUT_RESULT_JAR_MSSQL=" + $UserInputResultJarMsSql + "/g\" \"" + $fileName + "\"\n"; //sed manipulation.
	
	var $sedString4 = "sed -i \"s/USER_INPUT_RESULT_PRIMARY_PANACES_SERVER_IP=.*/USER_INPUT_RESULT_PRIMARY_PANACES_SERVER_IP=" +$UserInputResultPrimaryPanacesServerIP + "/g\" \"" + $fileName + "\" \n"; //sed manipulation.
	
	var $sedString5 = "sed -i \"s/USER_INPUT_RESULT_SECONDARY_PANACES_SERVER_IP=.*/USER_INPUT_RESULT_SECONDARY_PANACES_SERVER_IP=" +$UserInputResultSecondaryPanacesServerIP + "/g\" \"" + $fileName + "\" \n"; //sed manipulation.
	
	var $sedString6 = "sed -i \"s/PANACES_AGENT_NODE_ADDRESS=.*/PANACES_AGENT_NODE_ADDRESS="+$PanacesAgentNodeAddress + "/g\" \"" + $fileName + "\" \n"; //sed manipulation.
	
	var $sedString7 = "sed -i \"s/AGENTS_START_YES=.*/AGENTS_START_YES=" +$AgentStartYes + "/g\" \"" + $fileName + "\" \n"; //sed manipulation.
	
	$sedMessage = $sedPath + $sedString0 + $sedString + $sedString1 +$sedString2 + $sedString3 + $sedString4 + $sedString5 + $sedString6 + $sedString7 ;
	writeToFile($sedMessage, $SAHI_HOME +"tools\\sed\\RemoteExecute.bat");

}

/**
*This function is used to call the batch file functions for editing file at PR for LOCAL agents.
*@param :  null
*@return : null
*@author : Aditi
*/

function EditPropertyFile_For_LocalAgentInstallation_WindowsMachine_PR(){
	CreateBatchFileToEditPropertyfileForLocalAgents($MsSqlAgentWindowCheck,$PfrAgentCheck,$UserInstallDirforLocal,$UserInputResultJarMsSql,$drmServer,$SecondaryPanacesServer,$compIPPR,$AgentStartYes,$fileName); 
	_wait(3000);
	Create_Batch_File_To_Copy_Sed($sourcePath,$compIPPR,$remoteUserNameValPR,$remotePwdValPR);
	_wait(3000);
	Create_Batch_File_For_RemoteSed($compIPPR,$remoteUserNameValPR,$remotePwdValPR);
	_wait(2000);
	_execute($SAHI_HOME +"Utility\\SedCopy.bat","true");   //execute batch file to copy required folder to remote machine for sed. 
	_wait(2000);
	_execute($SAHI_HOME +"Utility\\Execute.bat");  //execute the batch file on remote machine using PsExec.
	_wait(2000);
}

/**
*This function is used to call the batch file functions for editing file at DR for LOCAL agents.
**@param :  null
*@return : null
*@author : Aditi
*/

function EditPropertyFile_For_LocalAgentInstallation_WindowsMachine_DR(){
	CreateBatchFileToEditPropertyfileForLocalAgents($MsSqlAgentWindowCheck,$PfrAgentCheck,$UserInstallDirforLocal,$UserInputResultJarMsSql,$drmServer,$SecondaryPanacesServer,$compIPDR,$AgentStartYes,$fileName); 
	_wait(3000);
	Create_Batch_File_To_Copy_Sed($sourcePath,$compIPDR,$remoteUserNameValDR,$remotePwdValDR);
	_wait(3000);
	Create_Batch_File_For_RemoteSed($compIPDR,$remoteUserNameValDR,$remotePwdValDR);
	_wait(2000);
	_execute($SAHI_HOME +"Utility\\SedCopy.bat","true");   //execute batch file to copy required folder to remote machine for sed.
	_wait(2000);
	_execute($SAHI_HOME +"Utility\\Execute.bat");  //execute the batch file on remote machine using PsExec.
	_wait(2000);
}


/**
*This function is used to create the batch file for firing command at LOCAL agents.
*@param : $machineIp,$userName,$Password,$installbinpath
*@return : null
*@author : Aditi
*/

function Installing_Local_Agents($machineIp,$userName,$Password,$installbinpath){
	
    $sshCommand = "c:\\Sfr\\Windows64\\install.exe -f c:\\Sfr\\PanacesAgentsInstaller.properties" ;
	RemoteConnectionToWindows($machineIp, $userName, $Password, $sshCommand,"Y");
	
	
	$sshCommand = "xcopy /y c:\\Sfr\\*.dll " + $UserInstallDirforLocal +"\\DRMAgents\\bin\\*.dll" ;
	RemoteConnectionToWindows($machineIp, $userName, $Password, $sshCommand,"Y");
	
	var $startMSWindowsOS = "sc start WindowsOSAgent";
	RemoteConnectionToWindows($machineIp,$userName,$Password,$startMSWindowsOS);
    
    var $startMSSQLAgent = "sc start MSSQLAgent";
    RemoteConnectionToWindows($machineIp,$userName,$Password,$startMSSQLAgent);
    
    var $startPFRAgent = "sc start PFRAgent";
    RemoteConnectionToWindows($machineIp,$userName,$Password,$startPFRAgent);
	
	/*
		//var $timeInterval = "\n\n";				//Time interval for command executing
	var $command = "install.exe -f "+$installbinpath;
	var $sedPath = $installexepath;
	var $message = $sedPath + $command ;
	writeToFile($message,$SAHI_HOME +"tools\\sed\\RemoteExecute.bat");*/
}

/**
*This function is used to call the batch file functions for installing agents at PR for Local agents.
*@param :  null
*@return : null
*@author : Aditi
*/
function Installing_Local_Agents_PR(){
	
	
	Installing_Local_Agents($compIPPR,$remoteUserNameValPR,$remotePwdValPR,$installbinpath);
	Create_Batch_File_To_Copy_Sed($sourcePath,$compIPPR,$remoteUserNameValPR,$remotePwdValPR);
	_wait(3000);
	Create_Batch_File_For_RemoteSed($compIPPR,$remoteUserNameValPR,$remotePwdValPR);
	_wait(2000);
	_execute($SAHI_HOME +"Utility\\SedCopy.bat","true");   //execute batch file to copy required folder to remote machine for sed. 
	_wait(5000);
	_execute($SAHI_HOME +"Utility\\Execute.bat");  //execute the batch file on remote machine using PsExec.
	_wait(30000);
	
}

/**
*This function is used to call the batch file functions for installing agents at DR for Local agents.
*@param :  null
*@return : null
*@author : Aditi
*/
function Installing_Local_Agents_DR(){
	Installing_Local_Agents($compIPDR,$remoteUserNameValDR,$remotePwdValDR,$installbinpath);
	Create_Batch_File_To_Copy_Sed($sourcePath,$compIPDR,$remoteUserNameValDR,$remotePwdValDR);
	_wait(3000);
	Create_Batch_File_For_RemoteSed($compIPDR,$remoteUserNameValDR,$remotePwdValDR);
	_wait(2000);
	_execute($SAHI_HOME +"Utility\\SedCopy.bat","true");   //execute batch file to copy required folder to remote machine for sed. 
	_wait(5000);
	_execute($SAHI_HOME +"Utility\\Execute.bat");  //execute the batch file on remote machine using PsExec.
	_wait(30000);
}

/**
*This function is used create the batch file for sed manipulation for Remote agents.
**@param :  $MsSqlAgentWindowCheck,$PfrAgentCheck,$UserInstallDir,$UserInputResultJarMsSql,
*$UserInputResultPrimaryPanacesServerIP,$UserInputResultSecondaryPanacesServerIP,$PanacesAgentNodeAddress,$AgentStartYes$fileName
*@author : Aditi
*/
function EditPropertyfileForWindowsRemoteAgents($UserInstallDirforRemote,$AgentStartYes){
	
	_log($SAHI_HOME + "tools\\sed\\bin\\sed -i \"s@USER_INSTALL_DIR=.*@USER_INSTALL_DIR=" + $UserInstallDirforRemote + "@g\" \"" + $SAHI_HOME + "utility\\Sfr\\PFRInstaller.properties");
	_execute($SAHI_HOME + "tools\\sed\\bin\\sed -i \"s@USER_INSTALL_DIR=.*@USER_INSTALL_DIR=" + $UserInstallDirforRemote + "@g\" \"" + $SAHI_HOME + "utility\\Sfr\\PFRInstaller.properties","true");
	
	_log($SAHI_HOME + "tools\\sed\\bin\\sed -i \"s/PFR_START_YES=.*/PFR_START_YES=" +$AgentStartYes + "/g\" \"" + $SAHI_HOME + "utility\\Sfr\\PFRInstaller.properties");			
	_execute($SAHI_HOME + "tools\\sed\\bin\\sed -i \"s/PFR_START_YES=.*/PFR_START_YES=" +$AgentStartYes + "/g\" \"" + $SAHI_HOME + "utility\\Sfr\\PFRInstaller.properties","true");
	
}

/**
*This function is used to call the batch file functions for editing file at PR for REMOTE agents.
*@param :  null
*@return : null
*@author : Aditi
*/
function EditPropertyFile_For_RemoteAgentInstallation_WindowsMachine_PR(){	
	
	EditPropertyfileForWindowsRemoteAgents($UserInstallDirforRemote,$AgentStartYes);

}

/**
*This function is used to call the batch file functions for editing file at DR for REMOTE agents.
*@param :  null
*@return : null
*@author : Aditi
*/
function EditPropertyFile_For_RemoteAgentInstallation_WindowsMachine_DR(){
	EditPropertyfileForWindowsRemoteAgents($UserInstallDirforRemote,$AgentStartYes); 
}


/**
*This function is used to create the batch file for firing command at REMOTE agents.
*@param : $installbinpath
*@return : null
*@author : Aditi
*/

function Installing_Remote_Agents($machineIp,$userName,$Password, $installbinpath){
		
		var  $killRsync = "taskkill /f /IM rsync.exe";  

       RemoteConnectionToWindows($machineIp, $userName, $Password, $killRsync,"Y");
       _wait(3000);
       var $deleteWinEXESvc = "sc delete winexesvc";
       preCheckWindows_Machine($machineIp,$userName,$Password,$deleteWinEXESvc);

	
	$sshCommand = "c:\\Sfr\\Windows64\\sfr.exe -f c:\\Sfr\\PFRInstaller.properties" ;
	RemoteConnectionToWindows($machineIp, $userName, $Password, $sshCommand,"Y");
	
	_wait(60000);
	$sshCommand = "xcopy /y c:\\Sfr\\*.exe " + $UserInstallDirforRemote +"\\bin\\*.exe" ;
	RemoteConnectionToWindows($machineIp, $userName, $Password, $sshCommand,"Y");
	
	$sshCommand = "xcopy /y c:\\Sfr\\*.dll " + $UserInstallDirforRemote +"\\bin\\*.dll" ;
	RemoteConnectionToWindows($machineIp, $userName, $Password, $sshCommand,"Y");
	
    var $deleteWinEXESvc = "sc start SFR";
    preCheckWindows_Machine($machineIp,$userName,$Password,$deleteWinEXESvc);
	
	
	/*
	//var $timeInterval = "\n\n";				//Time interval for command executing
	var $killRsync = "taskkill /f /IM rsync.exe";
	var $command = "sfr.exe -f "+ "PFRInstaller.properties";
	var $sedPath = "c:\\Sfr\\";
	var $message = $sedPath + $killRsync + $command ;
	writeToFile($message,$SAHI_HOME +"tools\\sed\\RemoteExecute.bat");*/
}

/**
*This function is used to call the batch file functions for installing agents at PR for Remote agents.
*@param :  null
*@return : null
*@author : Aditi
*/
function Installing_Remote_Agents_PR(){
	Installing_Remote_Agents($compIPPR,$remoteUserNameValPR,$remotePwdValPR, $installbinpath);
	Create_Batch_File_To_Copy_Sed($sourcePath,$compIPPR,$remoteUserNameValPR,$remotePwdValPR);
	_wait(3000);
	Create_Batch_File_For_RemoteSed($compIPPR,$remoteUserNameValPR,$remotePwdValPR);
	_wait(2000);
	_execute($SAHI_HOME +"Utility\\SedCopy.bat","true");   //execute batch file to copy required folder to remote machine for sed. 
	_wait(5000);
	_execute($SAHI_HOME +"Utility\\Execute.bat");  //execute the batch file on remote machine using PsExec.
	_wait(10000);
}

/**
*This function is used to call the batch file functions for installing agents at DR for Remote agents.
*@param :  null
*@return : null
*@author : Aditi
*/
function Installing_Remote_Agents_DR(){
		Installing_Remote_Agents($compIPDR,$remoteUserNameValDR,$remotePwdValDR, $installbinpath);
		Create_Batch_File_To_Copy_Sed($sourcePath,$compIPDR,$remoteUserNameValDR,$remotePwdValDR);
		_wait(3000);
		Create_Batch_File_For_RemoteSed($compIPDR,$remoteUserNameValDR,$remotePwdValDR);
		_wait(2000);
		_execute($SAHI_HOME +"Utility\\SedCopy.bat","true");   //execute batch file to copy required folder to remote machine for sed. 
		_wait(5000);
		_execute($SAHI_HOME +"Utility\\Execute.bat");  //execute the batch file on remote machine using PsExec.
		_wait(10000);
}

/**
* Function is to write on batch file.
*@param :$message,$filepath
*@return : null
*@Author: Anantha Sakthi
*
*/

function writeToFile($message,$filepath){
	out = new java.io.FileWriter($filepath, false);   
	out.write($message);
	out.close();
}

/**
* Function is to write on batch file.
*@param :$message,$filepath
*@return : null
*@Author: Anantha Sakthi
*
*/

function writeToFileAppend($message,$filepath){
	out = new java.io.FileWriter($filepath, true);   
	out.write($message);
	out.close();
}

/**
*This function is used create the batch file to copy the file from Drmserver using Pscp.
*@param :	$a_machineIp - IP address of the remote machine.
*			$a_userName - username of the remote machine.
*			$a_Password - password of the remote machine.
*			$a_sourcePath - source path of the file with filename.
*			$a_destination - destination of the file with filename.
*           $localCheck - this is to check remote to local or local to remote.
*@return : null
*@author : Ananth
*/

function Create_Batch_File_For_Pscp($a_machineIp,$a_userName,$a_password,$a_sourcePath,$a_destination,$localCheck){
	
	var $cdToPath = "cd " + $SAHI_HOME + "tools\\Pscp" + "\n";
	
	if($localCheck == "Y"){
		var $pscpExecute = "pscp.exe  -scp -pw " + $a_password + " -r "+ $a_sourcePath +" " + $a_userName + "@" + $a_machineIp + ":" + $a_destination + " \n";
	} else {
		var $pscpExecute = "pscp.exe  -scp -pw " + $a_password + " -r " + $a_userName + "@" + $a_machineIp + ":" + $a_sourcePath + " " + $a_destination +"\n";
	}	
	var $exitCode = "echo EXIT CODE : %errorlevel% > PscpCopyExitCode.txt" + "\n";
		
	var $pscpCommand = $cdToPath+ $pscpExecute + $exitCode;
	writeToFile($pscpCommand,$SAHI_HOME + "utility\\PscpCopy.bat");

}


/**
*This function is used create the batch file to copy the file locally.
*@param :	$a_destination - destination of the file with filename.
*			$a_sourcePath - source path of the file with filename.		
*@return : null
*@author : Ananth
*/

function Create_Batch_File_ToCopyLocal($a_sourcePath,$a_destination){
	
	var $cpExecute = "xcopy "+$a_sourcePath + " " + $a_destination +" /Y \n";

	var $exitCode = "echo EXIT CODE : %errorlevel% > " + $SAHI_HOME + "utility\\localCopyExitCode.txt" + "\n";
	
	var $pscpCommand = $cpExecute + $exitCode;
	
	writeToFile($pscpCommand,$SAHI_HOME + "utility\\localCopy.bat");

}

/**
*This function is used to validate the pscp copy status.
*@param  : null
*
*@return : null
*@author : Ananth
*/

function validatePscpCopy(){

	var $fileContent = _readFile($SAHI_HOME + "tools\\Pscp\\PscpCopyExitCode.txt");

	var $str = $fileContent.replace(/\r\n/g,"").trim();

	if($str.trim() == "EXIT CODE : 0"){
	return true;
	} else {
	return false;
	}

}

/**
*This function is used to validate the pscp copy status.
*@param  : null
*
*@return : null
*@author : Ananth
*/

function validateLocalCopy(){

	var $fileContent = _readFile($SAHI_HOME +"utility\\localCopyExitCode.txt");

	var $str = $fileContent.replace(/\r\n/g,"").trim();

	if($str == "EXIT CODE : 0"){
	return true;
	} else {
	return false;
	}

}

/**
*This function is used to return the Current Year.
*@param  : null
*
*@return : $l_year
*@author : Ananth
*/

function currentYear(){
    var $l_currentTime = new Date();      //Global method for fetching current system date
    var $l_year = $l_currentTime.getFullYear();    
	return $l_year;
}

/**
*This function is used to return the Current time.
*@param  : null
*
*@return : null
*@author : Ananth
*/

function currentTime() {
    var $l_currentTime = new Date();      //Global method for fetching current system date
    var $l_year = $l_currentTime.getYear();
    var $l_month = $l_currentTime.getMonth() + 1;
    var $l_date = $l_currentTime.getDate();
    var $l_hours = $l_currentTime.getHours();
    var $l_minutes = $l_currentTime.getMinutes();
    var $l_seconds = $l_currentTime.getSeconds();

    if ($l_hours < 10) {
                var $l_hours = "0" + $l_hours;
    }
    
    if ($l_minutes < 10) {
                var $l_minutes = "0" + $l_minutes;
    }

    if ($l_seconds < 10) {
                var $l_seconds = "0" + $l_seconds;
    }

    if ($l_month < 10) {
                var $l_month = "0" + $l_month;
    }

    if ($l_date < 10) {
                var $l_date = "0" + $l_date;
    }
    
    return $l_date + "" + $l_month + "" + $l_hours + "" + $l_minutes + "" + $l_seconds;
    
}


/////////////////////////////////////////////////////////////////////////////////////////

///For PFR Service installation



/**
* Function is for Installation of Remote agent in silent Mode at PR.
*@param : null
*@return : null
*@Author: Aditi Jain
**/

function Install_Remote_Agent_SilentMode_PR() {
	
	Install_Remote_Agent_SilentMode($agentBuildPR, $compIPPR, $remoteUserNameValPR, $remotePwdValPR, $RemoteAgentPathPR);
	
}

/**
* Function is for Installation of Remote agent in silent Mode at DR.
*@param :null
*@return : null
*@Author: Aditi Jain
*
**/

function Install_Remote_Agent_SilentMode_DR() {
	Install_Remote_Agent_SilentMode($agentBuildDR, $compIPDR, $remoteUserNameValDR, $remotePwdValDR, $RemoteAgentPathDR);


}

/**
* Function is for Installation of Remote agent in silent Mode .
*@param :$agentBuild, $compIP, $remoteUserNameVal, $remotePwdVal, $localAgentPath
*@return : null
*@Author: Aditi Jain
*
**/
function Install_Remote_Agent_SilentMode($agentBuild, $compIP, $remoteUserNameVal, $remotePwdVal, $RemoteAgentPath) {
	
	 $DRMbuildAgent = $DRMbuild + "DRM_Build/Agents/" ; 
	 
	var $agentLocation = $DRMbuildAgent;

	// calling precheck function before starting installation of drm server
	if($BrowserLang == "N"){
		Precheck_Befors_Local_Agent_Instalation("1", $agentBuild, $compIP, $remoteUserNameVal, $remotePwdVal, $RemoteAgentPath);
	}
	else if($BrowserLang == "Y-JA"){
		_log("Precheck Skipped as Subsystem are japan OS");
		}

	else if($BrowserLang == "Y-EN"){
		Precheck_Befors_Local_Agent_Instalation("1", $agentBuild, $compIP, $remoteUserNameVal, $remotePwdVal, $RemoteAgentPath);
		}
		
	
	
	// installation of Local Agent
	var $sshCommand = 'sh' + ' ' + $agentLocation + 'sfr.bin -f' + ' ' + $DRMbuildAgent + 'PFRInstaller.properties';
	$statusString = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
	
	var $splitString = $statusString.split(",");
	var $installationStatus = $splitString.pop().trim();

	if($installationStatus != "Installation Complete."){
		_log("Agent Not installed successfully");
		_fail("Agent Not installed successfully.So that stopping execution.Kindly look in to the logs.");
	}

	var $sshCommand = "cat /etc/redhat-release";
	$osVersion = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
	
	var $osVersion = $osVersion.split("release");
	var $osVersion = $osVersion[1].split("(");
	var $osVersion = $osVersion[0].trim();
	_log("Os version === "+$osVersion);
	if($osVersion=="5.5"){		
    
		var $sshCommand = "wget -r -nd -P " + $RemoteAgentPath + " http://172.168.20.43/jenkins/job/DRM_Automation/ws/GPL/rsync3.0.9-RHEL5.5-64bit.tar.gz;echo EXIT Code : $?";

		$status = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
		
	} if($osVersion=="5.6 Beta"){		
	    
		var $sshCommand = "wget -r -nd -P " + $RemoteAgentPath + " http://172.168.20.43/jenkins/job/DRM_Automation/ws/GPL/rsync3.0.5-RHEL5.6-32bit.tar.gz;echo EXIT Code : $?";

		$status = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
		
		var $sshCommand = "wget -r -nd -P " + $RemoteAgentPath + " http://172.168.20.43/jenkins/job/DRM_Automation/ws/GPL/tar1.19-RHEL5.6-32bit.tar.gz;echo EXIT Code : $?";

	    $status = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
   
	} if($osVersion=="6.3" || $osVersion=="6.4" || $osVersion =="6.5" || $osVersion =="6.6" ) {
	    var $sshCommand = "wget -r -nd -P " + $RemoteAgentPath + " http://172.168.20.43/jenkins/job/DRM_Automation/ws/GPL/rsync3.0.9-RHEL6-64bit.tar.gz;echo EXIT Code : $?";

	    $status = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
	    
	    var $sshCommand = "wget -r -nd -P " + $RemoteAgentPath + " http://172.168.20.43/jenkins/job/DRM_Automation/ws/GPL/tar1.23-RHEL6-64bit.tar.gz;echo EXIT Code : $?";

	    $status = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
	}
    var $patt1=new RegExp("EXIT Code : 0");
    var $out = $patt1.test($status);
   
    
    if ($out == true) {
        _log("binaries file copied successfully");
 } else {
        _log("binaries file not copied successfully");
        _fail("binaries file not copied successfully,so that stopping execution");
 }
	      
    if($osVersion=="5.5"){
    	var $sshCommand = "cd "+$RemoteAgentPath +";tar -xvzf rsync3.0.9-RHEL5.5-64bit.tar.gz";
    	$agentStartString = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
    	
    	var $sshCommand = "rm -rf "+$RemoteAgentPath+"/bin/tar";
    	$agentStartString = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
    	
        
    	var $sshCommand = "cd "+$RemoteAgentPath+"bin/;ln -s /bin/tar "+$RemoteAgentPath+"/bin/tar";
    	$agentStartString = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
    	
    }   
    if($osVersion=="5.6 Beta"){
    	
    	var $sshCommand = "cd "+$RemoteAgentPath +";tar -xvzf rsync3.0.5-RHEL5.6-32bit.tar.gz";
    	$agentStartString = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
    	
    	var $sshCommand = "cd "+$RemoteAgentPath +";tar -xvzf tar1.19-RHEL5.6-32bit.tar.gz";
    	$agentStartString = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
    }
    if($osVersion=="6.3" || $osVersion=="6.4" || $osVersion =="6.5" || $osVersion =="6.6" ){
    	
    	var $sshCommand = "cd "+$RemoteAgentPath +";tar -xvzf rsync3.0.9-RHEL6-64bit.tar.gz";
    	$agentStartString = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
    	
    	var $sshCommand = "cd "+$RemoteAgentPath +";tar -xvzf tar1.23-RHEL6-64bit.tar.gz";
    	$agentStartString = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
    }

	
	// checking all agent status

	var $sshCommand = 'sh ' + $RemoteAgentPath + 'bin/PFR.sh start';
	$agentStartString = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);

	_wait(30000);
	
	var $sshCommand = 'sh ' + $RemoteAgentPath + 'bin/PFR.sh status';
	$agentStatusString = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
	
	_assertExists( "PFR agent Status", $agentStatusString);

		if ($agentStatusString == 'PFRService is running.') {
			var $remoteAgentStatus = "PFRService is running.";
			_assertExists(" Status is: ",$remoteAgentStatus);
		} else  {
				_log("Service Not installed successfully");
				_fail("Service Not installed successfully.So that stopping execution.Kindly look in to the logs.");
		}
	
}




/**
* Function is for Updating Agent property file to install the DRM server in silent Mode at PR.
*@param :null
*@return : null
*@Author: Aditi Jain
**/

function Update_PropertyFile_RemoteAgent_PR() {
	Update_Remote_Agent_propertyFile($agentBuildPR, $compIPPR, $remoteUserNameValPR, $remotePwdValPR);
}

/**
* Function is for Updating Agent property file to install the DRM server in silent Mode at DR.
*@param :null
*@return : null
*@Author: Aditi Jain
**/

function Update_PropertyFile_RemoteAgent_DR() {
	Update_Remote_Agent_propertyFile($agentBuildDR, $compIPDR, $remoteUserNameValDR, $remotePwdValDR);
}

/**
* Function is for Updating Agent property file to install the DRM server in silent Mode.
*@param :$agentBuild, $compIP, $remoteUserNameVal, $remotePwdVal
*@return : null
*@Author: Aditi Jain
**/

function Update_Remote_Agent_propertyFile($agentBuild, $compIP, $remoteUserNameVal, $remotePwdVal) {
	
	 	$DRMbuildAgent = $DRMbuild + "DRM_Build/Agents/" ; 	
		
		_execute($SAHI_HOME + "tools\\sed\\bin\\sed -i \"s/=1/=0/\" " + $SAHI_HOME + "utility\\Propertyfile\\PFRInstaller.properties","true");
			 
	    _execute($SAHI_HOME + "tools\\sed\\bin\\sed -i \"s@USER_INSTALL_DIR=.*@USER_INSTALL_DIR=" + $PfrServicePath + "@\" " + $SAHI_HOME + "utility\\Propertyfile\\PFRInstaller.properties","true");
			 
	    _execute($SAHI_HOME + "tools\\sed\\bin\\sed -i \"s@PFR_START_YES=.*@PFR_START_YES=" + $PfrStart + "@\" " + $SAHI_HOME + "utility\\Propertyfile\\PFRInstaller.properties","true");

		var $propertiesString = _readFile($SAHI_HOME + "utility\\Propertyfile\\PFRInstaller.properties");
		
		var $sshCommand = "echo \"" + $propertiesString +  "\" >" +$DRMbuildAgent + "PFRInstaller.properties";

		$status = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
		
		var $sshCommand = "dos2unix "+ $DRMbuildAgent +"PFRInstaller.properties "+ $DRMbuildAgent +"PFRInstaller.properties";

		$status = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
					
	
}


/**
* Function is for UnInstallation of Remote agent in silent Mode at PR.
*@param :null
*@return : null
*@Author: Aditi jain
*
*/

function UnInstall_Remote_Agent_SilentMode_PR() {
	UnInstall_Remote_Agent_SilentMode("0", $agentBuildPR, $compIPPR, $remoteUserNameValPR, $remotePwdValPR, $RemoteAgentPathPR);
}

/**
* Function is for UnInstallation of Remote agent in silent Mode at DR.
*@param :null
*@return : null
*@Author: Aditi jain
*
*/
function UnInstall_Remote_Agent_SilentMode_DR() {
	UnInstall_Remote_Agent_SilentMode("0", $agentBuildDR, $compIPDR, $remoteUserNameValDR, $remotePwdValDR, $RemoteAgentPathDR);
}





function Create_Files_Folder(){
	
	if($BrowserLang == "Y-JA"){
	var $sshCommandPR = "rm -rf /opt/フォル/" ; 
	SecuredShellConnection($compIPPR, $remoteUserNameValPR, $remotePwdValPR, $sshCommandPR);
	
	var $sshCommandPR = "mkdir /opt/フォル/" ; 
	SecuredShellConnection($compIPPR, $remoteUserNameValPR, $remotePwdValPR, $sshCommandPR);
	
	var $sshCommandDR = "rm -rf /opt/フォル/" ; 
	SecuredShellConnection($compIPDR, $remoteUserNameValDR, $remotePwdValDR, $sshCommandDR);
	
	var $sshCommandDR = "mkdir /opt/フォル/" ; 
	SecuredShellConnection($compIPDR, $remoteUserNameValDR, $remotePwdValDR, $sshCommandDR);
	
	var $sshCommandPR = "cd"+" "+$cmdScriptPathPR+ "&& touch Lop.xml Loo.xml lol.xml lolbf.xml lsdsol.xml Adf.xml ABC.xml abchdjf.xml abcs.xml BAT.xml Ball.xml bad.xml bb.xml adfd.txt avd.txt bdjgb.txt Adfd.txt Ashg.txt bhjdhv.txt bbfbf.txt BBB.txt BAT.txt test3.sh yuy.sh oiuio.sh pppp.sh" ; 
	$statusPR = SecuredShellConnection($compIPPR, $remoteUserNameValPR, $remotePwdValPR, $sshCommandPR);
	_log($statusPR);
	
		
	var $sshCommandPR = "cd"+" "+$cmdScriptPathPR+ "&& mkdir ABC ABgrg ABtrtr abc abbb aaaa Sanovi sanovi123 folder folder1 folder FIle GGG gov ttt Too Bat Bol bfgf bdfgfb";
	$statusPR = SecuredShellConnection($compIPPR, $remoteUserNameValPR, $remotePwdValPR, $sshCommandPR);
	_log($statusPR);
	
	var $sshCommandPR = "cd"+" "+$RecursivePath+ "&& touch Lop.xml Loo.xml lol.xml lolbf.xml lsdsol.xml Adf.xml ABC.xml abchdjf.xml abcs.xml BAT.xml Ball.xml bad.xml bb.xml adfd.txt avd.txt bdjgb.txt Adfd.txt Ashg.txt bhjdhv.txt bbfbf.txt BBB.txt BAT.txt test3.sh yuy.sh oiuio.sh pppp.sh" ; 
	$statusPR = SecuredShellConnection($compIPPR, $remoteUserNameValPR, $remotePwdValPR, $sshCommandPR);
	_log($statusPR);
	
		
	var $sshCommandPR = "cd"+" "+$RecursivePath+ "&& mkdir ABC ABgrg ABtrtr abc abbb aaaa Sanovi sanovi123 folder folder1 folder FIle GGG gov ttt Too Bat Bol bfgf bdfgfb";
	$statusPR = SecuredShellConnection($compIPPR, $remoteUserNameValPR, $remotePwdValPR, $sshCommandPR);
	_log($statusPR);
	}
	else {
		//var $sshCommandPR = "rm -rf /opt/pfrlogs/" ; 
		var $sshCommandPR = "rm -rf "+$cmdScriptPathPR; 
		SecuredShellConnection($compIPPR, $remoteUserNameValPR, $remotePwdValPR, $sshCommandPR);
		
		//var $sshCommandPR = "mkdir /opt/pfrlogs" ; 
		var $sshCommandPR = "mkdir "+$cmdScriptPathPR; 
		SecuredShellConnection($compIPPR, $remoteUserNameValPR, $remotePwdValPR, $sshCommandPR);
		
		//var $sshCommandDR = "rm -rf /opt/pfrlogs/" ; 
		var $sshCommandDR = "rm -rf "+$RecursivePath;
		SecuredShellConnection($compIPDR, $remoteUserNameValDR, $remotePwdValDR, $sshCommandDR);
		
		//var $sshCommandDR = "mkdir /opt/pfrlogs" ;
		var $sshCommandDR = "mkdir "+$RecursivePath; 
		SecuredShellConnection($compIPDR, $remoteUserNameValDR, $remotePwdValDR, $sshCommandDR);
		
		var $sshCommandPR = "cd"+" "+$cmdScriptPathPR+ "&& touch Lop.xml Loo.xml lol.xml lolbf.xml lsdsol.xml Adf.xml ABC.xml abchdjf.xml abcs.xml BAT.xml Ball.xml bad.xml bb.xml adfd.txt avd.txt bdjgb.txt Adfd.txt Ashg.txt bhjdhv.txt bbfbf.txt BBB.txt BAT.txt test3.sh yuy.sh oiuio.sh pppp.sh" ; 
		$statusPR = SecuredShellConnection($compIPPR, $remoteUserNameValPR, $remotePwdValPR, $sshCommandPR);
		_log($statusPR);
		
			
		var $sshCommandPR = "cd"+" "+$cmdScriptPathPR+ "&& mkdir ABC ABgrg ABtrtr abc abbb aaaa Sanovi sanovi123 folder folder1 folder FIle GGG gov ttt Too Bat Bol bfgf bdfgfb";
		$statusPR = SecuredShellConnection($compIPPR, $remoteUserNameValPR, $remotePwdValPR, $sshCommandPR);
		_log($statusPR);
		
		var $sshCommandPR = "cd"+" "+$RecursivePath+ "&& touch Lop.xml Loo.xml lol.xml lolbf.xml lsdsol.xml Adf.xml ABC.xml abchdjf.xml abcs.xml BAT.xml Ball.xml bad.xml bb.xml adfd.txt avd.txt bdjgb.txt Adfd.txt Ashg.txt bhjdhv.txt bbfbf.txt BBB.txt BAT.txt test3.sh yuy.sh oiuio.sh pppp.sh" ; 
		$statusPR = SecuredShellConnection($compIPPR, $remoteUserNameValPR, $remotePwdValPR, $sshCommandPR);
		_log($statusPR);
		
			
		var $sshCommandPR = "cd"+" "+$RecursivePath+ "&& mkdir ABC ABgrg ABtrtr abc abbb aaaa Sanovi sanovi123 folder folder1 folder FIle GGG gov ttt Too Bat Bol bfgf bdfgfb";
		$statusPR = SecuredShellConnection($compIPPR, $remoteUserNameValPR, $remotePwdValPR, $sshCommandPR);
		_log($statusPR);
	}
	
	
}


/**
* Function is for UnInstallation of Remote agent in silent Mode.
*@param :$flag, $agentBuild, $compIP, $remoteUserNameVal, $remotePwdVal, $localAgentPath
*@return : null
*@Author: Aditi jain
*
*/
function UnInstall_Remote_Agent_SilentMode($flag, $agentBuild, $compIP, $remoteUserNameVal, $remotePwdVal, $RemoteAgentPath) {

	var $directoryCheck = DirectoryCheck($RemoteAgentPath,$compIP, $remoteUserNameVal, $remotePwdVal);
	
	if ($directoryCheck == "Yes") {
		var $sshCommand = 'sh ' + $RemoteAgentPath + 'PFR.sh stop';
		$agentStartString = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);

		_assertExists("agentStartString", $agentStartString);

		// checking Remote agent status
		_wait(5000);
		var $sshCommand = 'sh ' + $RemoteAgentPath + 'PFR.sh status';
		$agentStatus = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);

		_assertExists($systemTypeDataset, "agentStatus", $agentStatus);

		if ($agentStatus == 'PFRService is not running.') {
			var $RemoteAgentPath = "Remote Agent is not running.";
			_assertExists("Remote Agent Status is: ", $RemoteAgentPath);
		}
		_wait(5000);
		// Verify all other agent status is running or not
		var $sshCommand = "ps -ef|grep lax|grep -v grep|awk '{ print $2 }'";
		$runningAgents = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);

		_assertExists("RunningAgent", $runningAgents);

		var $sshCommand = "ps -ef|grep rsync|grep -v grep|awk '{ print $2 }'";
		$runningAgentsrsync = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
		_assertExists("RunningAgent", $runningAgentsrsync);
		// if Verify agent is running then killing running process

		if ( $runningAgents != "") {
			var $sshCommand = "kill $(ps -ef|grep lax|grep -v grep|awk '{ print $2 }')";
			$runningAgents = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
			_assertExists("RunningAgent", $runningAgents);
		}
		if ( $runningAgentsrsync !="") {	
			var $sshCommand = "kill $(ps -ef|grep rsync|grep -v grep|awk '{ print $2 }')";
			$runningAgentsrsync = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
			_assertExists("RunningAgent", $runningAgentsrsync);
			
		}
		
		// Verify agents
		if ( $runningAgents == "" && $runningAgentsrsync == "") {
			_log("There is no Agent running");
		} else {
			_log("There is Agents are running and not killed properly");
			_fail("There is Agents are running and not killed properly.So that stopping execution.Kindly look in to the logs.");
		}

		// uninstallation of Local Agent
		var $sshCommand = 'sh' + ' ' + $RemoteAgentPath + 'Uninstall/Uninstall_Sanovi_File_Replicator -i silent';
		$statusString = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
	
		
		var $splitString = $statusString.split(",");
		var $installationStatus = $splitString.pop().trim();
		if($installationStatus != "Installation Complete."){
			_log("Agent Not Uninstallation successfully");
			_assertTrue(false);
		} else {
			_log("Uninstallation Done successfully");
		}
		

		_wait(5000);
		// Deleting $localAgentPath

			var $sshCommand = 'rm -rf ' + $RemoteAgentPath;
			_assertExists("sshCommand", $sshCommand);
			$status = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);

	} else {
		_log("there is no Agent Installed. ");
	}

	if ($flag == "0") {
		var $directoryCheck = DirectoryCheck($RemoteAgentPath,$compIP, $remoteUserNameVal, $remotePwdVal);
		
		if ($directoryCheck == "Yes") {
			_log("agentBuild Folder exsiting");
			// Deleting Agent Folder
			var $sshCommand = 'rm -rf ' + $RemoteAgentPath;
			$status = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
			_log("Agent Build folder Deleted successfully");
		} else {
			_log("there is no Agent build Folder existing ");
		}
	}
}



function Copy_Property_file(){
	_execute("cmd /c RMDIR /Q /S "+ $SAHI_HOME + "utility\\Propertyfile\\" ,"true");

	_execute("cmd /c mkdir "+ $SAHI_HOME + "utility\\Propertyfile\\" ,"true");
		
	_log($SAHI_HOME + "tools\\Wget\\wget -r -nd -P " + $SAHI_HOME + "utility\\Propertyfile " + $g_buildUrl + $PFRfilePath);
	_execute($SAHI_HOME + "tools\\Wget\\wget -r -nd -P " + $SAHI_HOME + "utility\\Propertyfile " + $g_buildUrl + $PFRfilePath ,true);
	
	_log($SAHI_HOME + "tools\\Wget\\wget -r -nd -P " + $SAHI_HOME + "utility\\Propertyfile " + $g_buildUrl + $agentfilePath);
	_execute($SAHI_HOME + "tools\\Wget\\wget -r -nd -P " + $SAHI_HOME + "utility\\Propertyfile " + $g_buildUrl + $agentfilePath ,true)
			
}


/**
* Function is to Copy the sfr.bin from jenkins to local machine.
*@param :null
*@return : null
*@Author: Anantha Sakthi
*
*/

function WindowsBinaries_Copy_into_Local() {	
	
	if($agentType == "Remote"){
		_execute("cmd /c RMDIR /Q /S "+ $SAHI_HOME + "utility\\Sfr" ,"true");

		Create_Batch_File_For_WgetLocal("/SanoviDRM/SFR/Windows64_PFR_7.2.zip"); 
		
		Create_Batch_File_For_WgetLocal_SFRGPL();
		
		_execute($SAHI_HOME + "utility\\WgetCopy.bat","true");
		
		_execute($SAHI_HOME + "utility\\WgetCopyGPL.bat","true");
		

		var $fileContent = _readFile($SAHI_HOME + "tools\\Wget\\WgetCopyExitCode.txt");

		var $str = $fileContent.replace(/\r\n/g,"").trim();

		if($str == "EXIT CODE : 0"){
			_log("sfr Wget successfully");
		} else {
			_log("sfr not Wget successfully");
			_fail("sfr not Wget successfully,so that stopping execution");
		}	
		
		Create_Batch_File_For_WgetLocal("/SanoviDRM/SFR/Windows64_PFR_7.2.zip");
		
		_log("cmd /c cd "+ $SAHI_HOME + "utility\\Sfr\\&&jar xvf "+ $SAHI_HOME + "utility\\Sfr\\Windows64_PFR_7.2.zip");
		_execute("cmd /c cd "+ $SAHI_HOME + "utility\\Sfr\\&&jar xvf "+ $SAHI_HOME + "utility\\Sfr\\Windows64_PFR_7.2.zip" ,"true");
		
		
		_log("cmd /c cd "+ $SAHI_HOME + "utility\\Sfr\\&&jar xvf "+ $SAHI_HOME + "utility\\Sfr\\tar1.16-Windows-32bit.zip");
		_execute("cmd /c cd "+ $SAHI_HOME + "utility\\Sfr\\&&jar xvf "+ $SAHI_HOME + "utility\\Sfr\\tar1.16-Windows-32bit.zip" ,"true");
		
		_log("cmd /c cd "+ $SAHI_HOME + "utility\\Sfr\\&&jar xvf "+ $SAHI_HOME + "utility\\Sfr\\rsync3.0.7-Windows-32bit.zip");
		_execute("cmd /c cd "+ $SAHI_HOME + "utility\\Sfr\\&&jar xvf "+ $SAHI_HOME + "utility\\Sfr\\rsync3.0.7-Windows-32bit.zip" ,"true");
		
		Create_Batch_File_For_WgetLocal("/SanoviDRM/SFR/PFRInstaller.properties"); 
		
		_execute("cmd /c del "+ $SAHI_HOME + "tools\\Wget\\WgetCopyExitCode.txt" ,"true");

		_execute($SAHI_HOME + "utility\\WgetCopy.bat","true");

		var $fileContent = _readFile($SAHI_HOME + "tools\\Wget\\WgetCopyExitCode.txt");

		var $str = $fileContent.replace(/\r\n/g,"").trim();

		if($str == "EXIT CODE : 0"){
			_log("PFRInstaller Properties file Wget successfully");
		} else {
			_log("PFRInstaller Properties file not Wget successfully");
			_fail("PFRInstaller Properties file not Wget successfully,so that stopping execution");
		}
		
	}
	

	if($agentType == "Local"){
		
		
		Create_Batch_File_For_WgetLocal("/SanoviDRM/Agents/Windows64_DRMAgent_7.2.zip"); 
		
		Create_Batch_File_For_WgetLocal_GPLDll();
		
		_execute("cmd /c RMDIR /Q /S "+ $SAHI_HOME + "utility\\Sfr" ,"true");
	
		_execute($SAHI_HOME + "utility\\WgetCopy.bat","true");
		
		_execute($SAHI_HOME + "utility\\WgetCopyGPL.bat","true");
	
		var $fileContent = _readFile($SAHI_HOME + "tools\\Wget\\WgetCopyExitCode.txt");
	
		var $str = $fileContent.replace(/\r\n/g,"").trim();
	
		if($str == "EXIT CODE : 0"){
			_log("install.exe Wget successfully");
		} else {
			_log("install.exe not Wget successfully");
			_fail("install.exe not Wget successfully,so that stopping execution");
		}
		
		_log("cmd /c cd "+ $SAHI_HOME + "utility\\Sfr\\&&jar xvf "+ $SAHI_HOME + "utility\\Sfr\\Windows64_DRMAgent_7.2.zip");
		_execute("cmd /c cd "+ $SAHI_HOME + "utility\\Sfr\\&&jar xvf "+ $SAHI_HOME + "utility\\Sfr\\Windows64_DRMAgent_7.2.zip" ,"true");
		
		_log("cmd /c cd "+ $SAHI_HOME + "utility\\Sfr\\&&jar xvf "+ $SAHI_HOME + "utility\\Sfr\\gpldll.rar");
		_execute("cmd /c cd "+ $SAHI_HOME + "utility\\Sfr\\&&jar xvf "+ $SAHI_HOME + "utility\\Sfr\\gpldll.rar" ,"true");
				
		Create_Batch_File_For_WgetLocal("/SanoviDRM/Agents/PanacesAgentsInstaller.properties	"); 
		
		_execute("cmd /c del "+ $SAHI_HOME + "tools\\Wget\\WgetCopyExitCode.txt" ,"true");
	
		_execute($SAHI_HOME + "utility\\WgetCopy.bat","true");
	
		var $fileContent = _readFile($SAHI_HOME + "tools\\Wget\\WgetCopyExitCode.txt");
	
		var $str = $fileContent.replace(/\r\n/g,"").trim();
	
		if($str == "EXIT CODE : 0"){
			_log("PanacesAgentsInstaller Properties file Wget successfully");
		} else {
			_log("PanacesAgentsInstaller Properties file not Wget successfully");
			_fail("PanacesAgentsInstaller Properties file not Wget successfully,so that stopping execution");
		}
	}	
}


function Copy_WindowsBinaries_To_RemoteMachine_PR(){	
	
	Copy_WindowsBinaries_To_RemoteMachine($compIPPR,$remoteUserNameValPR,$remotePwdValPR);
}


function UninstallationForWindowsAgent(){
	StopServices($compIPPR, $remoteUserNameValPR, $remotePwdValPR);
	StopServices($compIPDR, $remoteUserNameValDR, $remotePwdValDR);	
}

function StopServices($compIP, $remoteUserNameVal, $remotePwdVal){
	
	if($agentType == "Remote"){
		$Command = "SC stop SFR";
		RemoteConnectionToWindows($compIP, $remoteUserNameVal, $remotePwdVal, $Command,"Y");
		$Command = "SC delete SFR";
		RemoteConnectionToWindows($compIP, $remoteUserNameVal, $remotePwdVal, $Command,"Y");
		
		var $Command = "RMDIR /Q /S \"" + $UserInstallDirforRemote + "\"";
		RemoteConnectionToWindows($compIP, $remoteUserNameVal, $remotePwdVal, $Command,"Y");
	} else {	
		
		
		
		$Command = "SC stop WindowsOSAgent";
		RemoteConnectionToWindows($compIP, $remoteUserNameVal, $remotePwdVal, $Command,"Y");
		
		$Command = "SC stop SanoviUpgradeKit";
		RemoteConnectionToWindows($compIP, $remoteUserNameVal, $remotePwdVal, $Command,"Y");
		
		$Command = "SC stop PFRAgent";
		RemoteConnectionToWindows($compIP, $remoteUserNameVal, $remotePwdVal, $Command,"Y");
		
		$Command = "SC stop MSSQLAgent";
		RemoteConnectionToWindows($compIP, $remoteUserNameVal, $remotePwdVal, $Command,"Y");
		
		$Command = "SC delete WindowsOSAgent";
		RemoteConnectionToWindows($compIP, $remoteUserNameVal, $remotePwdVal, $Command,"Y");
		
		$Command = "SC delete SanoviUpgradeKit";
		RemoteConnectionToWindows($compIP, $remoteUserNameVal, $remotePwdVal, $Command,"Y");
		
		$Command = "SC delete PFRAgent";
		RemoteConnectionToWindows($compIP, $remoteUserNameVal, $remotePwdVal, $Command,"Y");
		
		$Command = "SC delete MSSQLAgent";
		RemoteConnectionToWindows($compIP, $remoteUserNameVal, $remotePwdVal, $Command,"Y");
		
		var $Command = "RMDIR /Q /S \"" + $UserInstallDirforLocal + "\"";
		RemoteConnectionToWindows($compIP, $remoteUserNameVal, $remotePwdVal, $Command,"Y");
	}	
	
	var $Command = "RMDIR /Q /S \"c:\\Sfr\"";
	RemoteConnectionToWindows($compIP, $remoteUserNameVal, $remotePwdVal, $Command,"Y");
}

function Copy_WindowsBinaries_To_RemoteMachine_DR(){
	
	Copy_WindowsBinaries_To_RemoteMachine($compIPDR,$remoteUserNameValDR,$remotePwdValDR);
}

/**
*This function is used to the copy the sfr files to remote machine.
*@param :	$machineIp - Machine ip.
*			$userName.
*			$Password.
*@return : null
*@author : Ananth
*/

function Copy_WindowsBinaries_To_RemoteMachine($machineIp,$userName,$Password){
	
	Create_Batch_File_To_Copy_WindowsBinaries($machineIp,$userName,$Password);

	_execute($SAHI_HOME + "utility\\SfrCopy.bat","true");

	var $fileContent = _readFile(_userDataDir() + "\\bin\\SfrCopyExitCode.txt");

	var $str = $fileContent.replace(/\r\n/g,"").trim();

	if($str == "EXIT CODE : 0"){
		_log("sfr copied successfully");
	} else {
		_log("sfr not copied successfully");
		_fail("sfr not copied successfully,so that stopping execution");
	}
	
}


/**
*This function is used create the batch file to copy the file from Drmserver using Pscp.
*@param :	$$filePath - path of the file.
*@return : null
*@author : Ananth
*/

function Create_Batch_File_For_WgetLocal($filePath){
	
	var $cdToPath = "cd " + $SAHI_HOME + "tools\\Wget" + "\n";
	
	var $WgetExecuteForGPL = "wget -r -nd -P " + $SAHI_HOME + "utility\\Sfr " + $g_buildUrl + $filePath +"\n";
	
	var $WgetExecute = "wget -r -nd -P " + $SAHI_HOME + "utility\\Sfr " + $g_buildUrl + $filePath +"\n";
	
	var $exitCode = "echo EXIT CODE : %errorlevel% > WgetCopyExitCode.txt" + "\n";
	
	var $pscpCommand = $cdToPath+ $WgetExecuteForGPL +$WgetExecute + $exitCode;
	
	writeToFile($pscpCommand,$SAHI_HOME + "utility\\WgetCopy.bat");

}



function Create_Batch_File_For_WgetLocal_SFRGPL(){
	
	var $cdToPath = "cd " + $SAHI_HOME + "tools\\Wget" + "\n";
	
	var $WgetExecuteForGPLRsync = "wget -r -nd -P " + $SAHI_HOME + "utility\\Sfr http://172.168.20.43/jenkins/job/DRM_Automation/ws/GPL/rsync3.0.7-Windows-32bit.zip\n";	
	
	var $WgetExecuteForGPLtar = "wget -r -nd -P " + $SAHI_HOME + "utility\\Sfr http://172.168.20.43/jenkins/job/DRM_Automation/ws/GPL/tar1.16-Windows-32bit.zip\n";

	var $pscpCommand = $cdToPath+ $WgetExecuteForGPLRsync + $WgetExecuteForGPLtar ;
	
	writeToFile($pscpCommand,$SAHI_HOME + "utility\\WgetCopyGPL.bat");

}

function Create_Batch_File_For_WgetLocal_GPLDll(){
	
	var $cdToPath = "cd " + $SAHI_HOME + "tools\\Wget" + "\n";
	

	var $WgetExecuteForGPLdll = "wget -r -nd -P " + $SAHI_HOME + "utility\\Sfr http://172.168.20.43/jenkins/job/DRM_Automation/ws/GPL/gpldll.rar\n";

	var $pscpCommand = $cdToPath+ $WgetExecuteForGPLdll ;
	
	writeToFile($pscpCommand,$SAHI_HOME + "utility\\WgetCopyGPL.bat");

}

/**
*This function is used create the batch file to copy the sfr files from local to remote.
*@param :	$machineIp - path of the file.
*      		$userName
*      		$Password
*@return : null
*@author : Ananth
*/

function Create_Batch_File_To_Copy_WindowsBinaries($machineIp,$userName,$Password){

	var $timeInterval = "\n\n";				//Time interval for command execution
	
	var $netConnection = "net use \"\\\\" +$machineIp+ "\\c$\" " + $Password + " /user:" + $userName + "\""+$timeInterval; //\connect to remote machine to do copy.
	
	var $remoteCopy = "xcopy " +  $SAHI_HOME + "utility\\Sfr" + " \\\\" +$machineIp + "\\c$\\Sfr /s /i /Y"+$timeInterval; //copy the folder to remote machine
	
	var $removeConnection = "net use \"\\\\" +$machineIp+ "\\c$\"  /delete" +$timeInterval + "\n";			//remove the connection with remote machine.
	
	var $removeConnectionIP = "net use \"\\\\" +$machineIp+ "\\IPc$\"  /delete" +$timeInterval;			//remove the connection with remote machine.
		
	var $exitCode = "echo EXIT CODE : %errorlevel% > SfrCopyExitCode.txt" + "\n";
	
	$copySed = $netConnection + $remoteCopy + $exitCode + $removeConnection + $removeConnectionIP ;
		
	writeToFile($copySed, $SAHI_HOME +"utility\\SfrCopy.bat");

}

/**
*This function is used create the Drm User to access Gui.
*@param :	$$a_user - userId.

*@return : null
*@author : Ananth
*/

function CreateUser($a_user){
	
	_click(_link($obj_admin));
	_click(_link($obj_GoToUser));
	if (_exists(_link($a_user))) {
		_log("User "+$a_user+" Already exists")
	}
	else {
	_click(_link($obj_CreateNewUser));
	_setValue(_textbox("loginId"), $a_user);
	_setValue(_password("newPassword"), "Sanovi123456789$");
	_setValue(_password("confPassword"), "Sanovi123456789$");
	_click(_radio("ucat"));
	_setValue(_textbox("userFullName"), $a_user);
	_setSelected(_select("homePage"), $obj_EventsListView);
	_setValue(_textbox("email"), "auto@sanovi.com");
	_click(_submit($obj_save));
	}
}

/**
*This function is used publish workflow.
*@param :	$$a_user - userId.

*@return : null
*@author : Ananth
*//*

function publish($groupName,$workflowType){
	_click(_link("Test"));
	_click(_link("Test List View"));
	_click(_link($groupName));
	_click(_link($workflowType));
	_click(_link("Edit Workflow"));
	_wait(10000);
	//_click(_span("glyphicon glyphicon-play"));
	_click(_link("Publish"));
	_wait(1000);
	_click(_div("Publish Workflow"));
	_click(_link("Go back"));
}*/

/**
* Function is for Deploy Panaces server in silent Mode
*@param : null
*@return : null
*@Author: Anantha Sakthi
*
*/

function Deploy_Panaces_Server() {
	

	var $sshCommand = "/usr/bin/ovftool --acceptAllEulas --skipManifestCheck --powerOn -ds="+$datastoreIP+" --diskMode=thin -n="+$deployVMName+" --prop:vami.DNS.Sanovi_Cloud_Continuity="+$DNSIP+" --prop:vami.gateway.Sanovi_Cloud_Continuity="+$gatewayIP+" --prop:vami.ip0.Sanovi_Cloud_Continuity=" + $drmServer + " --prop:vami.netmask0.Sanovi_Cloud_Continuity="+$NetworkMask+" " + $deploybuildServer + "SanoviCloudContinuity.ova \\ vi://"+$vcenterPath;
	//var $sshCommand = "/usr/bin/ovftool --acceptAllEulas --skipManifestCheck --powerOn -ds=datastore210pr --diskMode=thin -n=Auto_SanoviCMM_2_249 --prop:vami.DNS.Sanovi_Cloud_Migration_Manager=192.168.1.110 --prop:vami.gateway.Sanovi_Cloud_Migration_Manager=192.168.2.254 --prop:vami.ip0.Sanovi_Cloud_Migration_Manager=" + $drmServer + " --prop:vami.netmask0.Sanovi_Cloud_Migration_Manager=255.255.255.0 " + $deploybuildServer + "SanoviCMM.ova \\ vi://"+$vcenterPath  

	$statusString = SecuredShellConnection($deployServer, $deployUserName, $deployPassword, $sshCommand,"Y");

	$validationString	= $statusString.split(",").pop();
	_log("$validationString--> "+$validationString);
	if($validationString == "Completed successfully"){
		
		"Completed successfully"
		_log("Panaces Deployment successfully");
	} else {
		_log("Panaces not Deployment successfully");
		//_fail("panaces server Deploymentsuccessfully.So that stopping execution.Kindly look in to the logs.");			
	}

	$i = 0;
	while(true){
	try {
		var $sshCommand = "file /opt/panaces/var/log/console.log";
		$panacesStatusString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		_log($panacesStatusString);
		if($panacesStatusString == "/opt/panaces/var/log/console.log: ASCII English text"){
			_log("Panaces Logger Started, so start verifying the panaces status");
			break;
		}
		if($i == 20){
			_log("Failed Panaces Logger Started, so start verifying the panaces status");
			break;
		}
				
	 }catch(e){
	 	 _log("Retry to reach the Server for 20 minutes");
	 }	 
	 _wait(60000);
	 $i++;
	}
	
	$i = 0;
	while(true){
		var $sshCommand = "tail -1 /opt/panaces/var/log/console.log";
		$panacesStatusString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		
		$panacesStatusString = $panacesStatusString.split("2016Started");
		_log($panacesStatusString[1]);
		
		if($panacesStatusString[1] != undefined || $panacesStatusString[1] != null){
			$panacesStatusString = $panacesStatusString[1].trim();
		} 
		
		if($panacesStatusString == "Panaces Services successfully"){
									  
			_log("Panaces services Started Successfully, so start verifying the other services");
			break;
		}
		if($i == 10){
			_log("Failed Panaces services Started Successfully, so start verifying the other services");
			break;
		}
		_wait(60000);
		$i++;
	}

	_wait(10000);
	_wait(10000);
	
	var $sshCommand = 'sh' + ' ' + $EAMSROOT + 'bin/' + 'panaces start';
	$panacesStatusString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	
	var $sshCommand = 'sh' + ' ' + $EAMSROOT + 'bin/' + 'panaces status';
	$panacesStatusString = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);

	var $panacesStatusString = $panacesStatusString.split(",");
	var $panacesServerStatus = $panacesStatusString[0];
	_assertExists("panacesServerStatus", $panacesServerStatus);
	var $tomcatServerStatus = $panacesStatusString[1];
	_assertExists("TomcatServerStatus", $tomcatServerStatus);
	var $agentNodeStatus = $panacesStatusString[3];
	_assertExists("AgentNodeStatus", $agentNodeStatus);

	if ($panacesServerStatus == "Panaces server is running") {
		var $panacesStatus = "Panaces Server is Running";
		_assertExists("Panaces Server Status is: ", $panacesStatus);
	} else if ($panacesServerStatus == "Panaces server is  not running") {
		var $panacesStatus = "Panaces Server Not Running";
		_assertExists("Panaces Server Status is: ", $panacesStatus);
	} else {
		var $panacesStatus = "Build Not Deployment successfully";
		_assertExists("Panaces Server Status is: ", $panacesStatus);
	}
	_assertEqual("Panaces server is running", $panacesServerStatus, "Validating Panaces server is running or not from server");

	if ($tomcatServerStatus == "Tomcat server is running") {
		var $tomcatStatus = "Tomcat server is running";
		_assertExists("Tomcat Server Status is: ", $tomcatStatus);
	} else if ($tomcatServerStatus == "Tomcat server is not running") {
		var $tomcatStatus = "Tomcat Server Not Running";
		_assertExists("Tomcat Server Status is: ", $tomcatStatus);
	} else {
		var $tomcatStatus = "Build Not installed successfully";
		_assertExists("Tomcat Server Status is: ", $tomcatStatus);
	}
	_assertEqual("Tomcat server is running", $tomcatServerStatus, "Validating Tomcat server is running or not from server");

	if ($agentNodeStatus == "Agent Node is running") {
		var $agentStatus = "Agent Node is running";
		_assertExists("Agent Node Status is: ", $agentStatus);
	} else if ($agentNodeStatus == "Agent Node is not running") {
		var $agentStatus = "Agent Node is not running";
		_assertExists("Agent Node Status is: ", $agentStatus);
	} else {
		var $agentStatus = "Build Not installed successfully";
		_assertExists("Agent Node Status is: ", $agentStatus);
	}
	_assertEqual("Agent Node is running", $agentNodeStatus, "Validating Agent Node is running or not from server");

	// Checking overall status of panaces installation
	if (($panacesStatus == "Panaces Server is Running") && ($tomcatStatus == "Tomcat server is running") && ($agentStatus == "Agent Node is running")) {
		var $panacesinstallationStatus = "Panaces installed successfully";
		_log("Panaces Deployment and started successfully");
	} else {
		_log("Panaces not Deployment or not started successfully");
		_fail("panaces server not Deployment successfully.So that stopping execution.Kindly look in to the logs.");
	}
}

/**
* Function is to Copy the OVA Build from jenkins to deploy the DRM server in silent Mode
*@param :null
*@return : null
*@Author: Anantha Sakthi
*
*/

function OVA_Build_Copy_into_DeploymentServer() {	

	 
	var $sshCommand = 'sh ' + $deploybuildServer;
	$chekingdeployBuild = SecuredShellConnection($deployServer, $deployUserName, $deployPassword, $sshCommand,"Y");

	_assertExists("Verif build folder", $chekingdeployBuild);

	// Deleting $deploybuild server Folder

		if ($chekingdeployBuild == $deploybuildServer + ": " + $deploybuildServer + ": " + "is a directory") {
			_log("$chekingdeployBuild exsiting");
			var $sshCommand = 'rm -rf ' + $deploybuildServer;
			_assertExists("sshCommand", $sshCommand);
			$status = SecuredShellConnection($deployServer, $deployUserName, $deployPassword, $sshCommand);
			_log("Deploy folder Deleted successfully");
		} else {
			_log("There is no  Deploy Folder existing ");
		}

	var $sshCommand =   "mkdir " + $deploybuild + "/DRM_Build;mkdir " + $deploybuildServer;
	SecuredShellConnection($deployServer, $deployUserName, $deployPassword, $sshCommand);
	
	
	var $sshCommand = "wget -r -nd -P " + $deploybuildServer + " " + $g_buildUrl + "/SanoviCloudContinuity.ova;echo EXIT Code : $?";

	$status = SecuredShellConnection($deployServer, $deployUserName, $deployPassword, $sshCommand);
	
	var $patt1=new RegExp("EXIT Code : 0");
	var $outInstallOVA = $patt1.test($status);
	
	var $sshCommand = "chmod 777 "+ $deploybuildServer + "*.*" ;

	$status = SecuredShellConnection($deployServer, $deployUserName, $deployPassword, $sshCommand);

	if ($outInstallOVA == true) {
		_log("OVAbuild copied successfully");
	} else {
		_log("OVAbuild not copied successfully");
		_fail("OVAbuild not copied successfully,so that stopping execution");
	}
}

/**
*This function is used create the Drm User to access Gui.
*@param :	$$a_user - userId.

*@return : null
*@author : Ananth
*/

function CreateUserForMigration($a_user){
	
	_click(_link("Admin"));
	_click(_link("Go to Users"));
	_click(_link("Create New User"));
	_setValue(_textbox("loginId"), $a_user);
	if($g_isGDPRCompliancepswd =="yes" || $g_isGDPRCompliancepswd =="Yes" || $g_isGDPRCompliancepswd =="YES"){
		_setValue(_password("newPassword"), "Sanovi123456789$");
		_setValue(_password("confPassword"), "Sanovi123456789$");
	}
	else{
		_setValue(_password("newPassword"), "Sanovi123$");
		_setValue(_password("confPassword"), "Sanovi123$");
	}	
	_setValue(_textbox("userFullName"), $a_user);
	_setValue(_textbox("email"), "auto@sanovi.com");
	_click(_submit("Save"));
}

/**
*This function is used create/drop mysql Database
*@param :	$$a_user - userId.

*@return : null
*@author : Ananth
*/

function CreateDrop_MysqlDatabase($hostUserName, $hostPassword, $hostIP, $dbName,$dbcommand){	
	
	var $databaseConnection = "jdbc:mysql://"+ $hostIP;
	
	var $props = new java.util.Properties();
	$props.put("user", $hostUserName);
	$props.put("password",$hostPassword );
	
	var $db = _getDB("com.mysql.jdbc.Driver", $databaseConnection, $props);
	// executing query on PR
	var $masterStatus = $db.update($dbcommand+" database "+$dbName+";");
	_log("Database created successfully");
}

function Create_MysqlDatabase($hostUserName, $hostPassword, $hostIP, $dbName){
	CreateDrop_MysqlDatabase($hostUserName, $hostPassword, $hostIP, $dbName,"create");
}

function Drop_MysqlDatabase($hostUserName, $hostPassword, $hostIP, $dbName){
	CreateDrop_MysqlDatabase($hostUserName, $hostPassword, $hostIP, $dbName,"drop");
}

/**
*This function is used create/drop Db2 Database
*@param :	$$a_user - userId.

*@return : null
*@author : Ananth
*/

function CreateDrop_Db2Database($hostUserName, $hostPassword, $hostIP, $dbName,$dbcommand){	
	
	var $sshCommand = "db2 "+$dbcommand+" DATABASE "+ $dbName;

	$status = SecuredShellConnection($hostIP, $hostUserName, $hostPassword, $sshCommand,"Y");
	
	if($status == "DB20000I The "+$dbcommand+" DATABASE command completed successfully."){
		_log("Database created successfully");
	} else {
		_log("Database created failed");
	}
	
}

function Create_Db2Database($hostUserName, $hostPassword, $hostIP, $dbName){
	CreateDrop_Db2Database($hostUserName, $hostPassword, $hostIP, $dbName,"CREATE");
}

function Drop_Db2Database($hostUserName, $hostPassword, $hostIP, $dbName){
	CreateDrop_Db2Database($hostUserName, $hostPassword, $hostIP, $dbName,"DROP");
}


/**
* Function is to connect Sybase Database
*@param : $ip,$database,$user, $pwd
*@return : $db
*@Author: Anantha Sakthi
*
*/

function Create_SybaseDatabase($ip,$database,$user, $pwd){
	var $Url="jdbc:sybase:Tds:" + $ip + ":5000/";
	var $db = _getDB("com.sybase.jdbc2.jdbc.SybDriver",$Url,$user, $pwd);
	$db.update("create database auto1;");
	_log("Sybase Database Connection Established");
	return $db;
}

/**
* Pre check before installing the PFR services in PR/DR windows machines
*@param : ($machineIp,$userName,$Password,$windowsCMD
*@return :null
*@Author: Anita
*
*/

function preCheckWindows_Machine($machineIp,$userName,$Password,$windowsCMD){
_writeFile($SAHI_HOME+'tools\\PsExec\\PsExec.exe \\\\' +$machineIp +' -u '+$userName+' -p '+$Password+' -s -d cmd.exe /c '+ $windowsCMD, $SAHI_HOME+"Utility\\preCheckWindows.bat", true); // over writes content in file       
       _wait(3000);  
       var $statustlog = _execute($SAHI_HOME+"Utility\\preCheckWindows.bat",true);
       _log($statustlog);
       _wait(5000);  
}


/**
*This function is used Create MSSQL Database
*@param :     $$a_user - userId.
*@return : null
*@author : Anita
*/

function Create_MSSQLDatabase($compIP,$user, $pwd,$dbName){
       var $dbConn="jdbc:sqlserver://"+ $compIP+":1433";
       var $db = _getDB("com.microsoft.sqlserver.jdbc.SQLServerDriver",$dbConn,$user, $pwd);
       $db.update("create database "+$dbName+";");
       _wait(5000);
       _log("MSSQL Database Connection Established");
       _log("MSSQL Database Created successfully");
}

/**
*This function is used Drop/delete MSSQL Database
*@param :     $$a_user - userId.
*@return : null
*@author : Anita
*/

function Drop_MSSQLDatabase($compIP,$user, $pwd,$dbName){
       var $dbConn="jdbc:sqlserver://"+ $compIP+":1433";
       var $db = _getDB("com.microsoft.sqlserver.jdbc.SQLServerDriver",$dbConn,$user, $pwd);
       $db.update("drop database "+$dbName+";");
       _wait(5000);
       _log("MSSQL Database Connection Established");
       _log("MSSQL Database Dropped successfully");
}

//VM protection sanity  PostInstallation
function PreConditionCheck_Permission(){
	if($osHardening=="yes" || $osHardening=="YES" || $osHardening=="Yes"){
		
		var $sshCommand = 'sudo chmod 777 ' + $EAMSROOT + '/remote';
		SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		
		var $sshCommand = 'sudo chmod 777 ' + $EAMSROOT + '/installconfig';
		SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		
		var $sshCommand = 'sudo chmod 777 ' + $EAMSROOT + '/agents';
		SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	}
}

//VM protection sanity SecurityInjection_PostInstallation 
function SecurityInjection_PostInstallation(){
	
	if($osHardening=="yes" || $osHardening=="YES" || $osHardening=="Yes"){
		
		var $sshCommand = "sudo sed -i 's@createComponentDuringMachineDiscovery=.*@createComponentDuringMachineDiscovery=0@' " + $EAMSROOT + "/webapps/rest/WEB-INF/vmprotection_solution.properties";
		SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		
		var $sshCommand = 'sudo sh ' + $EAMSROOT + '/bin/SecurityUserInjection.sh';
		SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	}
}

//*********************************************************

//Newly added code during Localization merge

function updateServerXMLFile(){
	var $sshCommand = "sudo chmod 777 " + $tomcatHome+"/conf";
    var $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
    _log($status);
	
	var $sshCommand = "sudo rm -rf " + $tomcatHome+"/conf/server_bkup.xml";
    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	
	var $sshCommand = "sudo mv " + $tomcatHome+"/conf/server.xml " + $tomcatHome+"/conf/server_bkup.xml";
    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	
	var $sshCommand = "wget -r -nd -P " + $tomcatHome+"/conf/ " + " http://172.168.20.43/jenkins/job/DRM_Automation/ws/OSHard/server.xml";
    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
       
    var $sshCommand = "sudo chmod 777 " + $tomcatHome+"/conf/server.xml";
    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
    
    var $sshCommand = "sed -i " + "'s/\r$//'" + " " + $tomcatHome+"/conf/server.xml";
    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
    
    var $sshCommand = "sed -i 's@keystoreFile=.*@keystoreFile="+"'"+$EAMSROOT +"/installconfig/keystore/sanovi.keystore'"+"'@'" + " " + $tomcatHome+"/conf/server.xml";
    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	
    var $sshCommand = "sudo chmod 500 " + $tomcatHome+"/conf/server.xml";
    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
    
    var $sshCommand = "sudo chown tomcatuser:tomcatusergroup " + $tomcatHome+"/conf/server.xml";
    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
    
    var $sshCommand = "sudo chmod 500 " + $tomcatHome+"/conf";
    var $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
    
    var $sshCommand = "sudo ls -ltr " + $tomcatHome+"/conf";
    var $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
    _log($status);
    
}// end of func

function updateWebXMLFile(){
	
	var $sshCommand = "sudo rm -rf " + $tomcatHome+"/webapps/PanacesGUI/WEB-INF/web_bk.xml";
    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
    
	var $sshCommand = "mv " + $tomcatHome+"/webapps/PanacesGUI/WEB-INF/web.xml " + $tomcatHome+"/webapps/PanacesGUI/WEB-INF/web_bk.xml";
    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	
	var $sshCommand = "wget -r -nd -P " + $tomcatHome+"/webapps/PanacesGUI/WEB-INF/ " + " http://172.168.20.43/jenkins/job/DRM_Automation/ws/OSHard/web.xml";
    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
    
    var $sshCommand = "chmod 755 " + $tomcatHome+"/webapps/PanacesGUI/WEB-INF/web.xml";
    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
    
    var $sshCommand = "sed -i " + "'s/\r$//'" + " " + $tomcatHome+"/webapps/PanacesGUI/WEB-INF/web.xml";
    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
    
    var $sshCommand = "chmod 757 " + $tomcatHome+"/webapps/PanacesGUI/WEB-INF/web.xml";
    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
    
    var $sshCommand = "sudo chown tomcatuser:tomcatusergroup " + $tomcatHome+"/webapps/PanacesGUI/WEB-INF/web.xml";
    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
}// end of func
//For VM protection to support vcentre6.5 ver
function Vcentre_Support_Jars(){
	_log("copy vcentre wsdl jars from third party for VM to AWS solution support");
    var $sshCommand = "sudo wget -r -nd -P " + $EAMSROOT + " http://192.168.1.201:8080/jenkins/job/Thirdparty_Without_GPL_TR/ws/thirdparty/jars/vmware6.5/vim.wsdl";
    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
    var $sshCommand = "sudo wget -r -nd -P " + $EAMSROOT + " http://192.168.1.201:8080/jenkins/job/Thirdparty_Without_GPL_TR/ws/thirdparty/jars/vmware6.5/vimService.wsdl";
    $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
    
    var $sshCommand = 'sudo chown panacesuser:panacesusergroup ' + $EAMSROOT + '/*.wsdl';
	SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	
	var $sshCommand = 'sudo chmod 777 ' + $EAMSROOT + '/*.wsdl';
	SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
}


/////////****************

function Create_Batch_File_To_Copy_WindowsInstallers($machineIp,$userName,$Password){

	var $timeInterval = "\n\n";				//Time interval for command execution
	
	var $netConnection = "net use \"\\\\" +$machineIp+ "\\c$\" " + $Password + " /user:" + $userName + "\""+$timeInterval; //\connect to remote machine to do copy.
	
	var $remoteCopy = "xcopy " +  $SAHI_HOME + "utility\\WinInstaller" + " \\\\" +$machineIp + "\\c$\\Sfr /s /i /Y"+$timeInterval; //copy the folder to remote machine
	
	var $removeConnection = "net use \"\\\\" +$machineIp+ "\\c$\"  /delete" +$timeInterval + "\n";			//remove the connection with remote machine.
	
	var $removeConnectionIP = "net use \"\\\\" +$machineIp+ "\\IPc$\"  /delete" +$timeInterval;			//remove the connection with remote machine.
		
	var $exitCode = "echo EXIT CODE : %errorlevel% > WinInstallerCopyExitCode.txt" + "\n";
	
	$copySed = $netConnection + $remoteCopy + $exitCode + $removeConnection + $removeConnectionIP ;
		
	writeToFile($copySed, $SAHI_HOME +"utility\\WinInstallerCopy.bat");

}

function Copy_WindowsInstallers_To_RemoteMachine($machineIp,$userName,$Password){
	
	Create_Batch_File_To_Copy_WindowsInstallers($machineIp,$userName,$Password);

	_execute($SAHI_HOME + "utility\\WinInstallerCopy.bat","true");

	var $fileContent = _readFile(_userDataDir() + "\\bin\\WinInstallerCopyExitCode.txt");

	var $str = $fileContent.replace(/\r\n/g,"").trim();

	if($str == "EXIT CODE : 0"){
		_log("WinInstaller copied successfully");
	} else {
		_log("WinInstaller not copied successfully");
		_fail("WinInstaller not copied successfully,so that stopping execution");
	}
	
}

function Copy_WindowsInstallers_To_RemoteMachine_DR(){
	
	Copy_WindowsInstallers_To_RemoteMachine($compIPDR,$remoteUserNameValDR,$remotePwdValDR);
}

function Copy_WindowsInstallers_To_RemoteMachine_PR(){	
	
	Copy_WindowsInstallers_To_RemoteMachine($compIPPR,$remoteUserNameValPR,$remotePwdValPR);
}

function create_batFile_For_SFRInstallation($argIP,$argUserName,$argPassword){
	
	var $psPath = $SAHI_HOME +"tools\\PsExec\\";
	var $cmd_Stop_SFR = $psPath+"psexec \\\\" + $argIP + " -u " + $argUserName + " -p " + $argPassword + " -i 2 cmd /c net stop SFR";
	var $cmd_Stop_rsync = $psPath+"psexec \\\\" + $argIP + " -u " + $argUserName + " -p " + $argPassword + " -i 2 C:\\Sfr\\stoprsync.bat";
	var $cmd_Zip_Extraction = $psPath+"psexec \\\\" + $argIP + " -u " + $argUserName + " -p " + $argPassword + " -i 2 C:\\Sfr\\Zip_Extraction.exe";
	var $cmd_SFR_Uninstall = $psPath+"psexec \\\\" + $argIP + " -u " + $argUserName + " -p " + $argPassword + " -i 2 C:\\Sfr\\SFR_Uninstallation.exe";
	var $cmdDeleteFolder = $psPath+"psexec \\\\" + $argIP + " -u " + $argUserName + " -p " + $argPassword + " -i 2 cmd /c rmdir \"C:\\Program Files\\SFR\" /s /q";
	var $cmd_SFR_Installation = $psPath+"psexec \\\\" + $argIP + " -u " + $argUserName + " -p " + $argPassword + " -i 2 C:\\Sfr\\SFR_Installation.exe";
	var $cmd_Replace_tar_rsync = $psPath+"psexec \\\\" + $argIP + " -u " + $argUserName + " -p " + $argPassword + " -i 2 C:\\Sfr\\Replace_tar_rsync.bat";
	var $cmd_Start_SFR = $psPath+"psexec \\\\" + $argIP + " -u " + $argUserName + " -p " + $argPassword + " -i 2 cmd /c net start SFR";

	_writeFile($cmd_Stop_SFR, $SAHI_HOME +"Utility\\Install_SFR.bat", true);
	_writeFile("\r\n"+$cmd_Stop_rsync, $SAHI_HOME +"Utility\\Install_SFR.bat");
	_writeFile("\r\n"+$cmd_Zip_Extraction, $SAHI_HOME +"Utility\\Install_SFR.bat");
	_writeFile("\r\n"+$cmd_SFR_Uninstall, $SAHI_HOME +"Utility\\Install_SFR.bat");
	_writeFile("\r\n"+$cmdDeleteFolder, $SAHI_HOME +"Utility\\Install_SFR.bat");
	_writeFile("\r\n"+$cmd_SFR_Installation, $SAHI_HOME +"Utility\\Install_SFR.bat");
	_writeFile("\r\n"+$cmd_Replace_tar_rsync, $SAHI_HOME +"Utility\\Install_SFR.bat");
	_writeFile("\r\n"+$cmd_Start_SFR, $SAHI_HOME +"Utility\\Install_SFR.bat");	
}

function create_batFile_For_SFRInstallation_PR(){
	create_batFile_For_SFRInstallation($compIPPR,$remoteUserNameValPR,$remotePwdValPR);
}

function create_batFile_For_SFRInstallation_DR(){
	create_batFile_For_SFRInstallation($compIPDR,$remoteUserNameValDR,$remotePwdValDR);
}

function create_batFile_For_AgentInstallation_DR(){
	create_batFile_For_AgentInstallationOnWindows($compIPDR,$remoteUserNameValDR,$remotePwdValDR,$agentBuildDR,"DR");
}

function create_batFile_For_AgentUnInstallation_DR(){
	create_batFile_For_AgentUnInstallationOnWindows($compIPDR,$remoteUserNameValDR,$remotePwdValDR,$RemoteAgentPathDR);
}

function create_batFile_For_AgentUnInstallationOnWindows($argIP,$argUserName,$argPassword,$argInstalledAgentPath,$argPropertiesFilePath,$argAgentBinariesPath){
	
	var $psPath = $SAHI_HOME +"tools\\PsExec\\";
	var $cmd_Stop_WindowsOSAgent = $psPath+"psexec \\\\" + $argIP + " -u " + $argUserName + " -p " + $argPassword + " -i 2 cmd /c net stop WindowsOSAgent";
	var $cmd_Stop_PFRAgent = $psPath+"psexec \\\\" + $argIP + " -u " + $argUserName + " -p " + $argPassword + " -i 2 cmd /c net stop PFRAgent";
	var $cmd_Agent_Uninstall = $psPath+"psexec \\\\" + $argIP + " -u " + $argUserName + " -p " + $argPassword + " -i 2 \""+$argInstalledAgentPath+"\\DRMAgents\\UninstallerData\\Uninstall IBM Resiliency Orchestration Agents.exe\" -i silent";
	//var $cmd_Agent_Install = $psPath+"psexec \\\\" + $argIP + " -u " + $argUserName + " -p " + $argPassword + " -i 2 "+$argAgentBinariesPath+"\\Windows64_DRMAgent_7.2\\Windows64\\install.exe -f \""+$argAgentBinariesPath+"\PanacesAgentInstaller.properties"+"\" -i silent";
	_writeFile($cmd_Stop_WindowsOSAgent, $SAHI_HOME +"Utility\\Sfr\\UnInstall_Agent.bat", true);
	_writeFile("\r\n"+$cmd_Stop_PFRAgent, $SAHI_HOME +"Utility\\Sfr\\UnInstall_Agent.bat");
	_writeFile("\r\n"+$cmd_Agent_Uninstall, $SAHI_HOME +"Utility\\Sfr\\UnInstall_Agent.bat");
	//_writeFile("\r\n"+$cmd_Agent_Install, $SAHI_HOME +"Utility\\UnInstall_Agent.bat");

}

function create_batFile_For_AgentInstallationOnWindows($argIP,$argUserName,$argPassword,$argAgentBuilsPath,$siteType){
	var $cmd_Agent_Install = "";
	var $psPath = $SAHI_HOME +"tools\\PsExec\\";
	//var $cmd_ExtractAgent = $psPath+"psexec \\\\" + $argIP + " -u " + $argUserName + " -p " + $argPassword + " -i 2 cmd /c C:\\Sfr\\ExtractAgent.vbs";
	if($siteType=="PR"){
	$cmd_Agent_Install = $psPath+"psexec \\\\" + $argIP + " -u " + $argUserName + " -p " + $argPassword + " -i 2 "+$argAgentBuilsPath+"\\Agent\\Windows64\\install.exe -f \""+$argAgentBuilsPath+"\\PanacesAgentInstaller_PR.properties\""+" -i silent";
	}
	if($siteType=="DR"){
	$cmd_Agent_Install = $psPath+"psexec \\\\" + $argIP + " -u " + $argUserName + " -p " + $argPassword + " -i 2 "+$argAgentBuilsPath+"\\Agent\\Windows64\\install.exe -f \""+$argAgentBuilsPath+"\\PanacesAgentInstaller_DR.properties\""+" -i silent";
	}
	var $cmd_Replace_tar_rsync = $psPath+"psexec \\\\" + $argIP + " -u " + $argUserName + " -p " + $argPassword + " -i 2 C:\\Sfr\\Replace_tar_rsync.bat";
	//_writeFile("\r\n"+$cmd_ExtractAgent, $SAHI_HOME +"Utility\\Sfr\\Install_Agent.bat",true);
	_writeFile("\r\n"+$cmd_Agent_Install, $SAHI_HOME +"Utility\\Sfr\\Install_Agent.bat",true);
	_writeFile("\r\n"+$cmd_Replace_tar_rsync, $SAHI_HOME +"Utility\\Sfr\\Install_Agent.bat");
}

function create_VBSFileForBinariesExtract($argAgentZippedInstallerLocation,argExtractLocation,argNameVBSFile){
	
	var $cmd = "cmd /c copy \""+$SAHI_HOME + "utility\\WinInstaller\\Extract.vbs\" \""+$SAHI_HOME + "utility\\Sfr\\"+argNameVBSFile+"\"";
	_execute($cmd,true);
	var $valReplace = "ZippedPath#"+$argAgentZippedInstallerLocation+","+"ExtractPath#"+argExtractLocation;	
	editFile($SAHI_HOME +"Utility\\Sfr\\"+argNameVBSFile,$valReplace);
}

function editPropertiesFileForAppPFRWindowsAgent(){
	
	var $valReplace = "pathWhereAgentInstall#"+$RemoteAgentPathPR+","+"panacesServerPrimary#"+$drmServer+","+"panacesServerSecondary#"+$drmServer+","+"panacesAgentNodeAdd#"+$compIPPR;
	editFile($SAHI_HOME +"Utility\\WinInstaller\\PanacesAgentInstaller.properties",$valReplace);
}

/*
 * Function used for editing files like property files etc.
 * $argFilePath : pass the path like:- $SAHI_HOME +"Utility\\WinInstaller\\Extract.vbs"
 * $argKeyValPairsToReplace : pass the key value seperated by # and key value pairs seperated by # like Path1#C:\\Program Files\\panaces,ExtractPath1#C:\\Progra
 */
function editFile($argFilePath,$argKeyValPairsToReplace){
	var $modified = null;
	var $fileContents = null
	var $arrTmp = $argKeyValPairsToReplace.split(",");	
	for(var $i=0;$i<$arrTmp.length;$i++){
		$fileContents = _readFile($argFilePath);
		$modified = $fileContents.replace($arrTmp[$i].split("#")[0],$arrTmp[$i].split("#")[1]);
		_writeFile($modified,$argFilePath,true);
	}
}

function create_batFile_For_SFRInstallationOnWindows($argIP,$argUserName,$argPassword,$argAgentBuilsPath){
	
	var $psPath = $SAHI_HOME +"tools\\PsExec\\";
	//var $cmd_Stop_WindowsOSAgent = $psPath+"psexec \\\\" + $argIP + " -u " + $argUserName + " -p " + $argPassword + " -i 2 cmd /c net stop WindowsOSAgent";
	//var $cmd_Stop_PFRAgent = $psPath+"psexec \\\\" + $argIP + " -u " + $argUserName + " -p " + $argPassword + " -i 2 cmd /c net stop PFRAgent";
	var $cmd_Agent_Install = $psPath+"psexec \\\\" + $argIP + " -u " + $argUserName + " -p " + $argPassword + " -i 2 "+$argAgentBuilsPath+"\\Windows64_DRMAgent_7.2\\Windows64\\install.exe -f \""+$argAgentBuilsPath+"\\PanacesAgentInstaller.properties\""+" -i silent";

	//_writeFile($cmd_Stop_WindowsOSAgent, $SAHI_HOME +"Utility\\UnInstall_Agent.bat", true);
	//_writeFile("\r\n"+$cmd_Stop_PFRAgent, $SAHI_HOME +"Utility\\UnInstall_SFR.bat");
	_writeFile("\r\n"+$cmd_Agent_Install, $SAHI_HOME +"Utility\\Install_Agent.bat",true);

}

 

function create_batFile_For_SFR_UnInstallation($argIP,$argUserName,$argPassword,argPFRInstalledPath){
	
	var $psPath = $SAHI_HOME +"tools\\PsExec\\";
	var $cmd_Stop_SFR = $psPath+"psexec \\\\" + $argIP + " -u " + $argUserName + " -p " + $argPassword + " -i 2 cmd /c net stop SFR";
	var $cmd_Stop_rsync = $psPath+"psexec \\\\" + $argIP + " -u " + $argUserName + " -p " + $argPassword + " -i 2 C:\\Sfr\\stoprsync.bat";
	var $cmd_SFR_Uninstall = $psPath+"psexec \\\\" + $argIP + " -u " + $argUserName + " -p " + $argPassword + " -i 2 \""+argPFRInstalledPath+"\\Uninstall\\Uninstall IBM Resiliency File Replicator.exe\" -i silent";
	_writeFile($cmd_Stop_SFR, $SAHI_HOME +"Utility\\Sfr\\UnInstall_SFR.bat", true);
	_writeFile("\r\n"+$cmd_Stop_rsync, $SAHI_HOME +"Utility\\Sfr\\UnInstall_SFR.bat");
	_writeFile("\r\n"+$cmd_SFR_Uninstall, $SAHI_HOME +"Utility\\Sfr\\UnInstall_SFR.bat");
}

function create_batFile_For_SFR_UnInstallation_DR(){
	create_batFile_For_SFR_UnInstallation($compIPDR,$remoteUserNameValDR,$remotePwdValDR,$PfrServicePath);
}

function editPropertiesFileForSFR(){
	
	var $cmd = "cmd /c copy \""+$SAHI_HOME + "utility\\WinInstaller\\SFRInstallation.properties\" \""+$SAHI_HOME + "utility\\Sfr\\SFRInstallation.properties\"";
	_execute($cmd,true);
	var $valReplace = "SFR_INSTALLATION_PATH#"+$PfrServicePath;	
	editFile($SAHI_HOME +"Utility\\Sfr\\SFRInstallation.properties",$valReplace);
}


/*  ------------------------------------------------------------------------------------------------------------------------
 *     To check -i value which is session id fire below command
 *     C:\tools\PsExec>psexec \\172.168.20.63 -u Administrator -p Sanovi123 query session
       PsExec v1.98 - Execute processes remotely
		 SESSIONNAME       USERNAME                 ID  STATE   TYPE        DEVICE
		>services                                    0  Disc
		 console                                     1  Conn
		 rdp-tcp#0         Administrator             2  Active
		 rdp-tcp                                 65536  Listen
 * ------------------------------------------------------------------------------------------------------------------------
 */
function create_batFile_For_SFR_Installation($argIP,$argUserName,$argPassword,$argBuildPath){
	var $psPath = $SAHI_HOME +"tools\\PsExec\\";
	
	//var $cmd_ExtractPFR = $psPath+"psexec \\\\" + $argIP + " -u " + $argUserName + " -p " + $argPassword + " -i 2 cmd /c C:\\Sfr\\ExtractPFR.vbs";
	var $cmd_Extracttar = $psPath+"psexec \\\\" + $argIP + " -u " + $argUserName + " -p " + $argPassword + " -i 2 cmd /c C:\\Sfr\\Extract_tar.vbs";
	var $cmd_Extractrsync = $psPath+"psexec \\\\" + $argIP + " -u " + $argUserName + " -p " + $argPassword + " -i 2 cmd /c C:\\Sfr\\Extract_rsync.vbs";
	var $cmd_SFR_Install = $psPath+"psexec \\\\" + $argIP + " -u " + $argUserName + " -p " + $argPassword + " -i 2 "+$argBuildPath+"\\Windows64\\sfr.exe -f \""+$argBuildPath+"\\SFRInstallation.properties\""+" -i silent";	
	var $cmd_Replace_tar_rsync = $psPath+"psexec \\\\" + $argIP + " -u " + $argUserName + " -p " + $argPassword + " -i 2 C:\\Sfr\\Replace_tar_rsync.bat";
	var $cmd_Start_SFR = $psPath+"psexec \\\\" + $argIP + " -u " + $argUserName + " -p " + $argPassword + " -i 2 cmd /c net start SFR";

	//_writeFile("\r\n"+$cmd_ExtractPFR, $SAHI_HOME +"Utility\\Sfr\\Install_Sfr.bat",true);
	_writeFile("\r\n"+$cmd_Extracttar, $SAHI_HOME +"Utility\\Sfr\\Install_Sfr.bat",true);
	_writeFile("\r\n"+$cmd_Extractrsync, $SAHI_HOME +"Utility\\Sfr\\Install_Sfr.bat");
	_writeFile("\r\n"+$cmd_SFR_Install, $SAHI_HOME +"Utility\\Sfr\\Install_Sfr.bat");	
	_writeFile("\r\n"+$cmd_Replace_tar_rsync, $SAHI_HOME +"Utility\\Sfr\\Install_SFR.bat");
	_writeFile("\r\n"+$cmd_Start_SFR, $SAHI_HOME +"Utility\\Sfr\\Install_SFR.bat");	
	
}

function batFileSFRInstallation_DR(){
	create_batFile_For_SFR_Installation($compIPDR,$remoteUserNameValDR,$remotePwdValDR,$agentBuildDR);
}

function batFileSFRInstallation_PR(){
	create_batFile_For_SFR_Installation($compIPPR,$remoteUserNameValPR,$remotePwdValPR,$agentBuildPR);
}


function copySFRInstallationHelperFiles(){
	
//	var $cmd = "cmd /c copy \""+$SAHI_HOME + "utility\\WinInstaller\\Extract_rsync.vbs\" \""+$SAHI_HOME + "utility\\Sfr\"";
//	_execute($cmd,true);
//	$cmd = "cmd /c copy \""+$SAHI_HOME + "utility\\WinInstaller\\Extract_tar.vbs\" \""+$SAHI_HOME + "utility\\Sfr\"";
//	_execute($cmd,true);
	$cmd = "cmd /c copy \""+$SAHI_HOME + "utility\\WinInstaller\\stoprsync.bat\" \""+$SAHI_HOME + "utility\\Sfr\"";
	_execute($cmd,true);
	$cmd = "cmd /c copy \""+$SAHI_HOME + "utility\\WinInstaller\\Replace_tar_rsync.bat\" \""+$SAHI_HOME + "utility\\Sfr\"";
	_execute($cmd,true);
}

function editPropertiesFileForAgent(){
	
	var $cmd = "cmd /c copy \""+$SAHI_HOME + "utility\\WinInstaller\\PanacesAgentInstaller.properties\" \""+$SAHI_HOME + "utility\\Sfr\\PanacesAgentInstaller_PR.properties";
	_execute($cmd,true);
	//var $valReplace = "SFR_INSTALLATION_PATH#"+$PfrServicePath;	
	//editFile($SAHI_HOME +"Utility\\Sfr\\SFRInstallation.properties",$valReplace);
	$cmd = "cmd /c copy \""+$SAHI_HOME + "utility\\WinInstaller\\PanacesAgentInstaller.properties\" \""+$SAHI_HOME + "utility\\Sfr\\PanacesAgentInstaller_DR.properties";
	_execute($cmd,true);
	//$valReplace = "SFR_INSTALLATION_PATH#"+$PfrServicePath;	
}



function downloadWindowsBinariesIntoLocal() {	
	
	_execute("cmd /c RMDIR /Q /S "+ $SAHI_HOME + "utility\\Sfr" ,"true");

	Create_Batch_File_For_WgetLocal("/SanoviDRM/SFR/Windows64_PFR_7.2.zip"); 
	
	_execute($SAHI_HOME + "utility\\WgetCopy.bat","true");
	
	var $fileContent = _readFile($SAHI_HOME + "tools\\Wget\\WgetCopyExitCode.txt");

	var $str = $fileContent.replace(/\r\n/g,"").trim();

	if($str == "EXIT CODE : 0"){
		_log("sfr Wget successfully");
	} else {
		_log("sfr not Wget successfully");
		_fail("sfr not Wget successfully,so that stopping execution");
	}	
	
	if($agentType == "Local"){
		
		Create_Batch_File_For_WgetLocal("/SanoviDRM/Agents/Windows64_DRMAgent_7.2.zip"); 
		
		_execute("cmd /c RMDIR /Q /S "+ $SAHI_HOME + "utility\\Sfr" ,"true");
	
		_execute($SAHI_HOME + "utility\\WgetCopy.bat","true");
	
		var $fileContent = _readFile($SAHI_HOME + "tools\\Wget\\WgetCopyExitCode.txt");
	
		var $str = $fileContent.replace(/\r\n/g,"").trim();
	
		if($str == "EXIT CODE : 0"){
			_log("install.exe Wget successfully");
		} else {
			_log("install.exe not Wget successfully");
			_fail("install.exe not Wget successfully,so that stopping execution");
		}
		
	}
	_log("cmd /c cd "+ $SAHI_HOME + "utility\\Sfr\\&&jar xvf "+ $SAHI_HOME + "utility\\Sfr\\tar1.16-Windows-32bit.zip");
	_execute("cmd /c cd "+ $SAHI_HOME + "utility\\Sfr\\&&jar xvf "+ $SAHI_HOME + "utility\\Sfr\\tar1.16-Windows-32bit.zip" ,"true");
	
	_log("cmd /c cd "+ $SAHI_HOME + "utility\\Sfr\\&&jar xvf "+ $SAHI_HOME + "utility\\Sfr\\rsync3.0.7-Windows-32bit.zip");
	_execute("cmd /c cd "+ $SAHI_HOME + "utility\\Sfr\\&&jar xvf "+ $SAHI_HOME + "utility\\Sfr\\rsync3.0.7-Windows-32bit.zip" ,"true");
}


function create_batFile_For_AgentInstallation_PR(){
	create_batFile_For_AgentInstallationOnWindows($compIPPR,$remoteUserNameValPR,$remotePwdValPR,$agentBuildPR,"PR");
}

function create_batFile_For_AgentUnInstallation_PR(){
	create_batFile_For_AgentUnInstallationOnWindows($compIPPR,$remoteUserNameValPR,$remotePwdValPR,$RemoteAgentPathPR);
}
function create_batFile_For_SFR_UnInstallation_PR(){
	create_batFile_For_SFR_UnInstallation($compIPPR,$remoteUserNameValPR,$remotePwdValPR,$PfrServicePath);
}

function copySFRInstallationHelperFiles(){
	
//	var $cmd = "cmd /c copy \""+$SAHI_HOME + "utility\\WinInstaller\\Extract_rsync.vbs\" \""+$SAHI_HOME + "utility\\Sfr\"";
//	_execute($cmd,true);
//	$cmd = "cmd /c copy \""+$SAHI_HOME + "utility\\WinInstaller\\Extract_tar.vbs\" \""+$SAHI_HOME + "utility\\Sfr\"";
//	_execute($cmd,true);
	$cmd = "cmd /c copy \""+$SAHI_HOME + "utility\\WinInstaller\\stoprsync.bat\" \""+$SAHI_HOME + "utility\\Sfr\"";
	_execute($cmd,true);
	$cmd = "cmd /c copy \""+$SAHI_HOME + "utility\\WinInstaller\\Replace_tar_rsync.bat\" \""+$SAHI_HOME + "utility\\Sfr\"";
	_execute($cmd,true);
}

function editPropertiesFileForAgent_PR(){
	
	editFile($SAHI_HOME + "utility\\Sfr\\PanacesAgentInstaller_PR.properties", "AgentInstallationPath#"+$RemoteAgentPathPR+",ROIP#"+$primaryPanacesServer+",ROIP#"+$primaryPanacesServer+",NODEIP#"+$compIPPR);
}
function editPropertiesFileForAgent_DR(){
	
	editFile($SAHI_HOME + "utility\\Sfr\\PanacesAgentInstaller_DR.properties", "AgentInstallationPath#"+$RemoteAgentPathDR+",ROIP#"+$primaryPanacesServer+",ROIP#"+$primaryPanacesServer+",NODEIP#"+$compIPDR);
}
function fireWindowsCommandAndReadResponse($argWindowsCommand){
	$builder = new java.lang.ProcessBuilder("cmd.exe", "/c",$argWindowsCommand);
    $builder.redirectErrorStream(true);
    $p = $builder.start();
    $r = new java.io.BufferedReader(new java.io.InputStreamReader($p.getInputStream()));
    var $responce = "";
    while (true) {
        $line = $r.readLine();
        if ($line == null) { break; }
        $responce += $line;
    }
    return $responce;
}

function downloadWindowsBinaries() {	
	
	_execute("cmd /c RMDIR /Q /S "+ $SAHI_HOME + "utility\\Sfr" ,"true");
	
	Create_Batch_File_For_WgetLocal("/SanoviDRM/SFR/Windows64_PFR_7.2.zip"); 
	
	_execute($SAHI_HOME + "utility\\WgetCopy.bat","true");
	
	Create_Batch_File_For_WgetLocal_SFRGPL();
	
	_execute($SAHI_HOME + "utility\\WgetCopyGPL.bat","true");
	
	Create_Batch_File_For_WgetLocal("/SanoviDRM/Agents/Windows64_DRMAgent_7.2.zip"); 

	_execute($SAHI_HOME + "utility\\WgetCopy.bat","true");
}

function extractZipFile($argZippedFilePath,$argExtractFolderPath){

	var $outPut = "";
	var $7zipPath = $SAHI_HOME + "tools\\7Zip\\7za.exe";
	$outPut = fireWindowsCommandAndReadResponse($7zipPath+" x "+"\""+$argZippedFilePath+"\""+" -o"+"\""+$argExtractFolderPath+"\"");
	_log($outPut);
	$outPut = fireWindowsCommandAndReadResponse("taskkill /f /im 7za.exe /t");
	_log($outPut);
}


function createFoldersOnPRDR(){
	
	var $output = "";
	var $psPath = $SAHI_HOME +"tools\\PsExec\\";
	
	var $createFolderPR = $psPath+"psexec \\\\" + $compIPPR + " -u " + $remoteUserNameValPR + " -p " + $remotePwdValPR + " -i 2 cmd /c mkdir "+$fileNameTextPathPR+" && copy null > "+$fileNameTextPathPR+"temp.txt";
	var $createFolderDR = $psPath+"psexec \\\\" + $compIPDR + " -u " + $remoteUserNameValDR + " -p " + $remotePwdValDR + " -i 2 cmd /c mkdir "+$fileNameTextPathDR;

	$output = fireWindowsCommandAndReadResponse($createFolderPR);
	_log($output);
	$output = fireWindowsCommandAndReadResponse($createFolderDR);
	_log($output);
//	_writeFile($createFolderPR, $SAHI_HOME +"Utility\\WinInstaller\\createFolderPRDR.bat", true);
//	_writeFile("\r\n"+$createFolderDR, $SAHI_HOME +"Utility\\WinInstaller\\createFolderPRDR.bat");
	
}

function editCFGFileForSiteController_PR(){
	
	var $cmd = "cmd /c copy \""+$SAHI_HOME + "utility\\WinInstaller\\EditSiteControllerCfg.vbs\" \""+$SAHI_HOME + "utility\\Sfr\\EditSiteControllerCfg_PR.vbs";
	_execute($cmd,true);
	var $valReplace = "SITE_CONTROLLER_CFG_PATH#"+$agentInstallationPathPR+"installconfig\\SiteController.cfg,"+"SITE_CONTROLLER_CFG_PATH#"+$agentInstallationPathPR+"installconfig\\SiteController.cfg";
	editFile($SAHI_HOME +"Utility\\Sfr\\EditSiteControllerCfg_PR.vbs",$valReplace);
}


function editCFGFileForSiteController_DR(){
	
	var $cmd = "cmd /c copy \""+$SAHI_HOME + "utility\\WinInstaller\\EditSiteControllerCfg.vbs\" \""+$SAHI_HOME + "utility\\Sfr\\EditSiteControllerCfg_DR.vbs";
	_execute($cmd,true);
	var $valReplace = "SITE_CONTROLLER_CFG_PATH#"+$agentInstallationPathDR+"installconfig\\SiteController.cfg,"+"SITE_CONTROLLER_CFG_PATH#"+$agentInstallationPathDR+"installconfig\\SiteController.cfg";
	editFile($SAHI_HOME +"Utility\\Sfr\\EditSiteControllerCfg_DR.vbs",$valReplace);
}


function uninstallSiteController_PR(){
	
	var $cmd = "";
	var $output = "";
	var $psPath = $SAHI_HOME +"tools\\PsExec\\";
	
	// ***********************************************  STOPPING SERVICES BEGIN
	_log("Stopping Service IBMROWindowsOSAgent on :-"+$compIPPR,"Custom4");
	
	$cmd = $psPath+"psexec \\\\" + $compIPPR + " -u " + $remoteUserNameValPR + " -p " + $remotePwdValPR + " -i 2 cmd /c net stop IBMROWindowsOSAgent";
	
	$output = fireWindowsCommandAndReadResponse($cmd);
	
	_log("output after firing command:-"+$cmd+" ,is--"+$output,"Custom4");
	//
	_log("Stopping Service IBMROSiteController on :-"+$compIPPR,"Custom4");
	
	$cmd = $psPath+"psexec \\\\" + $compIPPR + " -u " + $remoteUserNameValPR + " -p " + $remotePwdValPR + " -i 2 cmd /c net stop IBMROSiteController";
	
	$output = fireWindowsCommandAndReadResponse($cmd);
	
	_log("output after firing command:-"+$cmd+" ,is--"+$output,"Custom4");
	//                  
	_log("Stopping Service IBMROActiveMQ on :-"+$compIPPR,"Custom4");
	
	$cmd = $psPath+"psexec \\\\" + $compIPPR + " -u " + $remoteUserNameValPR + " -p " + $remotePwdValPR + " -i 2 cmd /c net stop IBMROActiveMQ";
	
	$output = fireWindowsCommandAndReadResponse($cmd);
	
	_log("output after firing command:-"+$cmd+" ,is--"+$output,"Custom4");            
	// ***********************************************  STOPPING SERVICES END
	
	// ***********************************************  Uninstall Begin
	_log("Uninstalling SiteController on:-"+$compIPPR,"Custom4");
	
	$cmd = $psPath+"psexec \\\\" + $compIPPR + " -u " + $remoteUserNameValPR + " -p " + $remotePwdValPR + " -i 2 \""+$agentInstallationPathPR+"UninstallerData\\Uninstall IBM Resiliency Orchestration SiteController.exe\" -i silent";
	
	$output = fireWindowsCommandAndReadResponse($cmd);
	
	_log("output after firing command:-"+$cmd+" ,is--"+$output,"Custom4");
	// ***********************************************  Uninstall End    
	
	// ***********************************************  Restarting VM
/*	restartVM($compIPPR,$remoteUserNameValPR,$remotePwdValPR,$agentInstallationPathPR);   */
	
}
function checkServicesStatus($argServiceName){
	var $cmd = "";
	var $output = "";
	var $psPath = $SAHI_HOME +"tools\\PsExec\\";
	$cmd = $psPath+"psexec \\\\" + $compIPDR + " -u " + $remoteUserNameValDR + " -p " + $remotePwdValDR + " cmd /c sc query "+	$argServiceName;
	$output = fireWindowsCommandAndReadResponse($cmd);
	_log($output);
	if($output.indexOf("RUNNING") >= 0){
		return true;
	}
	else{
		return false;
	}
}

function uninstallSiteController_DR(){
	
	var $cmd = "";
	var $output = "";
	var $psPath = $SAHI_HOME +"tools\\PsExec\\";
	
	// ***********************************************  STOPPING SERVICES BEGIN
	
	if(checkServicesStatus("IBMROWindowsOSAgent") == true){
			
		_log("Stopping Service IBMROWindowsOSAgent on :-"+$compIPDR,"Custom4");
		
		$cmd = $psPath+"psexec \\\\" + $compIPDR + " -u " + $remoteUserNameValDR + " -p " + $remotePwdValDR + " -i 2 cmd /c net stop IBMROWindowsOSAgent";
		
		$output = fireWindowsCommandAndReadResponse($cmd);
		
		_log("output after firing command:-"+$cmd+" ,is--"+$output,"Custom4");
	}
	//
	if(checkServicesStatus("IBMROSiteController") == true){
		
		_log("Stopping Service IBMROSiteController on :-"+$compIPDR,"Custom4");
		
		$cmd = $psPath+"psexec \\\\" + $compIPDR + " -u " + $remoteUserNameValDR + " -p " + $remotePwdValDR + " -i 2 cmd /c net stop IBMROSiteController";
		
		$output = fireWindowsCommandAndReadResponse($cmd);
		
		_log("output after firing command:-"+$cmd+" ,is--"+$output,"Custom4");
	}
	// 
	if(checkServicesStatus("IBMROActiveMQ") == true){
		
		_log("Stopping Service IBMROActiveMQ on :-"+$compIPDR,"Custom4");
		
		$cmd = $psPath+"psexec \\\\" + $compIPDR + " -u " + $remoteUserNameValDR + " -p " + $remotePwdValDR + " -i 2 cmd /c net stop IBMROActiveMQ";
		
		$output = fireWindowsCommandAndReadResponse($cmd);
		
		_log("output after firing command:-"+$cmd+" ,is--"+$output,"Custom4"); 
	
	}
	// ***********************************************  STOPPING SERVICES END
	
	// ***********************************************  Uninstall Begin
	_log("Uninstalling SiteController on:-"+$compIPDR,"Custom4");
	
	$cmd = $psPath+"psexec \\\\" + $compIPDR + " -u " + $remoteUserNameValDR + " -p " + $remotePwdValDR + " -i 2 \""+$agentInstallationPathDR+"UninstallerData\\Uninstall IBM Resiliency Orchestration SiteController.exe\" -i silent";
	
	$output = fireWindowsCommandAndReadResponse($cmd);
	
	_log("output after firing command:-"+$cmd+" ,is--"+$output,"Custom4");
	// ***********************************************  Uninstall End    
	
	// ***********************************************  Restarting VM
/*	restartVM($compIPDR,$remoteUserNameValDR,$remotePwdValDR,$agentInstallationPathDR);               */
	
}

function editPropFileForSiteController_PR(){
	
	var $cmd = "cmd /c copy \""+$SAHI_HOME + "utility\\WinInstaller\\SiteControllerInstPropFile.properties\" \""+$SAHI_HOME + "utility\\Sfr\\SiteControllerInstPropFile_PR.properties";
	_execute($cmd,true);
	var $valReplace = "SITE_CONTROLLER_INSTALL_PATH#"+$agentInstallationPathPR+",PRIMARY_RO_SERVER_IP#"+$drmServer+",SECONDARY_RO_SERVER_IP#"+$drmServer+",VM_IP#"+$compIPPR;
	editFile($SAHI_HOME +"Utility\\Sfr\\SiteControllerInstPropFile_PR.properties",$valReplace);
}


function editPropFileForSiteController_DR(){
	
	var $cmd = "cmd /c copy \""+$SAHI_HOME + "utility\\WinInstaller\\SiteControllerInstPropFile.properties\" \""+$SAHI_HOME + "utility\\Sfr\\SiteControllerInstPropFile_DR.properties";
	_execute($cmd,true);
	var $valReplace = "SITE_CONTROLLER_INSTALL_PATH#"+$agentInstallationPathDR+",PRIMARY_RO_SERVER_IP#"+$drmServer+",SECONDARY_RO_SERVER_IP#"+$drmServer+",VM_IP#"+$compIPDR;
	editFile($SAHI_HOME +"Utility\\Sfr\\SiteControllerInstPropFile_DR.properties",$valReplace);
}
//
        
function installSiteController($argRemoteIP,$argRemoteUsername,$argRemotePassword,$argInstallerPath,$argNodeType){
	
	
	var $cmd = "";
	var $output = "";
	var $psPath = $SAHI_HOME +"tools\\PsExec\\";
	
	// ***********************************************  Install Begin
	_log("Installing SiteController on:-"+$compIPPR,"Custom4");
	
	if($argNodeType == "PR"){
		$cmd = $psPath+"psexec \\\\" + $argRemoteIP+ " -u " + $argRemoteUsername + " -p " + $argRemotePassword + " -i 2 "+$argInstallerPath+"SiteController.exe -f "+$argInstallerPath+"SiteControllerInstPropFile_PR.properties -i silent";
	}
	if($argNodeType == "DR"){
		$cmd = $psPath+"psexec \\\\" + $argRemoteIP+ " -u " + $argRemoteUsername + " -p " + $argRemotePassword + " -i 2 "+$argInstallerPath+"SiteController.exe -f "+$argInstallerPath+"SiteControllerInstPropFile_DR.properties -i silent";
	}
	                                                                                                                                                                                
	$output = fireWindowsCommandAndReadResponse($cmd);
	
	_log("output after firing command:-"+$cmd+" ,is--"+$output,"Custom4");
	// ***********************************************  Install End    
	
	// ***********************************************  Restarting VM
	//restartVM($compIPPR,$argRemoteUsername,$argRemotePassword,"");
	
	// updating Sitecontrollercfg file
	if($argNodeType == "PR"){
		var $cmdupdateCFG = $psPath+"psexec \\\\" + $argRemoteIP + " -u " + $argRemoteUsername + " -p " + $argRemotePassword + " -i 2 cmd /c "+$argInstallerPath+"EditSiteControllerCfg_PR.vbs";
		$output = fireWindowsCommandAndReadResponse($cmdupdateCFG);
		_log("output after firing command:-"+$cmdupdateCFG+" ,is--"+$output,"Custom4");
	}
	if($argNodeType == "DR"){
		var $cmdupdateCFG = $psPath+"psexec \\\\" + $argRemoteIP + " -u " + $argRemoteUsername + " -p " + $argRemotePassword + " -i 2 cmd /c "+$argInstallerPath+"EditSiteControllerCfg_DR.vbs";
		$output = fireWindowsCommandAndReadResponse($cmdupdateCFG);
		_log("output after firing command:-"+$cmdupdateCFG+" ,is--"+$output,"Custom4");
	}
	
	// ***********************************************  STARTING SERVICES BEGIN
	_log("Starting Service IBMROActiveMQ on :-"+$argRemoteIP,"Custom4");
	
	$cmd = $psPath+"psexec \\\\" + $argRemoteIP+ " -u " + $argRemoteUsername + " -p " + $argRemotePassword + " -i 2 cmd /c net start IBMROActiveMQ";
	
	$output = fireWindowsCommandAndReadResponse($cmd);
	
	_log("output after firing command:-"+$cmd+" ,is--"+$output,"Custom4");  
	//
	_log("Starting Service IBMROSiteController on :-"+$argRemoteIP,"Custom4");
	
	$cmd = $psPath+"psexec \\\\" + $argRemoteIP+ " -u " + $argRemoteUsername + " -p " + $argRemotePassword + " -i 2 cmd /c net start IBMROSiteController";
	
	$output = fireWindowsCommandAndReadResponse($cmd);
	
	_log("output after firing command:-"+$cmd+" ,is--"+$output,"Custom4");
	//    
	_log("Starting Service IBMROWindowsOSAgent on :-"+$argRemoteIP,"Custom4");
	
	$cmd = $psPath+"psexec \\\\" + $argRemoteIP+ " -u " + $argRemoteUsername + " -p " + $argRemotePassword + " -i 2 cmd /c net start IBMROWindowsOSAgent";
	
	$output = fireWindowsCommandAndReadResponse($cmd);
	
	_log("output after firing command:-"+$cmd+" ,is--"+$output,"Custom4");	          
	// ***********************************************  STARTING SERVICES END	
}


function installSiteController_PR(){
	installSiteController($compIPPR,$remoteUserNameValPR,$remotePwdValPR,$agentBuildPathPR,"PR");
}

function installSiteController_DR(){
	installSiteController($compIPDR,$remoteUserNameValDR,$remotePwdValDR,$agentBuildPathDR,"DR");
}

function startAppOnVM($argPathOfExe){
	var $cmd = "";
	var $output = "";
	var $psPath = $SAHI_HOME +"tools\\PsExec\\";
	$cmd = $psPath+"psexec \\\\" + $compIPDR + " -u " + $remoteUserNameValDR + " -p " + $remotePwdValDR + " -d cmd /c "+$argPathOfExe;
	$output = fireWindowsCommandAndReadResponse($cmd);
	_log($output);
}
/*
 * 
 *   fix below method 
 *   
function restartVM($argVMIP,$argVMUserName,$argVMPassword,$argFolderPathToDelete){
	
	var $output = "";
	var $psPath = $SAHI_HOME +"tools\\PsExec\\";
	
	$cmdRestart = $psPath+"psexec \\\\" + $argVMIP + " -u " + $argVMUserName + " -p " + $argVMPassword + " -i 2 cmd /c shutdown /r";
	
	_log("Firing command:-"+$cmdRestart+" ,to restart VM:-"+$argVMIP,"Custom4");
	
	$output = fireWindowsCommandAndReadResponse($cmdRestart);
	
	$count = 0;
	while($count<50){
		$output = fireWindowsCommandAndReadResponse("ping "+$argVMIP);
		_log("Ping"+$output);
		if($output.split("Lost = ")[1].split(" (")[0] > 0){
			_log("System Down","Custom4");
			break;
		}
		$count++;
	}
	$count = 0;
	while($count<50){
		$output = fireWindowsCommandAndReadResponse("ping "+$argVMIP);
		_log("Ping"+$output);
		if($output.split("Lost = ")[1].split(" (")[0] == 0){
			_wait(60000);
			_log("System Up","Custom4");
			if($argFolderPathToDelete != ""){
				_log("Deleting folder at path:-"+$argFolderPathToDelete,"Custom4");
				$cmdDelFolder = $psPath+"psexec \\\\" + $argVMIP + " -u " + $argVMUserName + " -p " + $argVMPassword + " cmd /c RD /S /Q \""+$argFolderPathToDelete+"\"";
				$output = fireWindowsCommandAndReadResponse($cmdDelFolder);
				_log("Output after firing delete command:- RD /S /Q "+$argFolderPathToDelete+" ,is :-"+$output);
			}
			break;
		}
		$count++;
	}
}
*
*
*/