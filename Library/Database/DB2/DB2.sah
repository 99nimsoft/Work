/*************************************************************************
 ** CompanyName : Sanovi Technologies Ltd.
 ** Application Name : DRM 
 ** Objective : This script contains Creation of Dataset for DB2 database. 
 ** AuthorName : Anantha Sakthi 
 ** Created Date : October 2013
 ************************************************************************/

/**
* Function is for Creating of  Dataset for PR  in Oracle.
*@param :  null
*@return : null
* Author: Aditi Jain
*
*/

function Create_DB2_HADR_Dataset_PR() {
	Create_DB2_HADR_Dataset($systemTypeDataset, $compNamePR, $datasetType, $datasetNamePR,$userPR, $pwdPR,$dataBaseName);
}

/**
* Function is for Creating of  Dataset for DR  in Oracle.
*@param :  null
*@return : null
* Author: Aditi Jain
*
*/
function Create_DB2_HADR_Dataset_DR() {
	Create_DB2_HADR_Dataset($systemTypeDataset, $compNameDR, $datasetType, $datasetNameDR, $userDR, $pwdDR,$dataBaseName);
}


/**
* Function is for Creating of  Dataset for DR  in Oracle.
*@param : $systemTypedataset, $compName, $datasetType, $datasetName, $userNameVal, $pwdVal, $compIP, $userNameVal, $pwdVal, $dbSidSelect, $user, $pwd
*@return : null
* Author: Aditi Jain
*
*/
function Create_DB2_HADR_Dataset($systemTypeDataset, $compName, $datasetType, $datasetName,$user, $pwd,$dataBaseName) {
	navigateToDiscovery();
	_click(_link($Subsystems));
	_click(_link($Datasets));
	if (_exists(_link($datasetName))) {
		_assertExists("Dataset already Exists");
	} else {
		_setSelected(_select("systemType"), $systemTypeDataset);
		_click(_button($Go));
		_wait(3000);
		_setSelected(_select("dependentComponentName"), $compName);
		_wait(2000);
		_setSelected(_select("datasetType"), $datasetType);
		_setValue(_textbox("datasetName"), $datasetName);
		var $i=0;
		while ($i<10) {
			if (_exists(_link($RegisterAgent))) {
				_click(_link($RegisterAgent));
				_wait(30000);
			}
			else if ((!_exists(_link($RegisterAgents))) && (!_exists(_link($CONNECTED)))) {
				_wait(15000);
				navigateToDiscovery();
				_click(_link($Subsystems));
				_click(_link($Datasets));
				_setSelected(_select("systemType"), $systemTypeDataset);
				_click(_button($Go));
				_setSelected(_select("dependentComponentName"), $compName);
				_setSelected(_select("datasetType"), $datasetType);
				_setValue(_textbox("datasetName"), $datasetName);
			}
		
			 else {
					_log("go ahead");
					break;
				}
			$i++;
		}
				
		if (_exists(_link($CONNECTED))) {
	
			if(_containsText(_select("db2Instance"),$user)){
				_setSelected(_select("db2Instance"), $user);
			} else {
				_setSelected(_select("db2Instance"), "Add new");
				_setValue(_textbox("addNewInst"), $user);
				_setValue(_textbox("username"), $user);			
				_setValue(_password("password"), $pwd);
			}
				_setValue(_textbox("dbName"), $dataBaseName);
				_click(_button($TestCredentials));	
				
				
		}
		
		_wait(5000, _span($Success));
		_click(_button($Discover));
		_wait(5000, _cell("DB2COMM"));
		if(_exists(_cell("DB2COMM"))){
			_click(_button($Save));
		} else {
			_fail("Dataset Not Created successfully");
			
		}

	}
}
	

/**
* Function is to Verify Dataset details from GUI and DB from PR.
*@param : null
*@return : null
* Author: Aditi Jain
*
*/
function Verify_DB2_HADR_Dataset_Details_PR() {
	Verify_Dataset_Details($datasetNamePR, $userPR, $pwdPR, $oracleListenerIPPR);
}

/**
* Function is to Verify Dataset details from GUI and DB from DR.
*@param : null
*@return : null
* Author: Aditi Jain
*
*/
function Verify_DB2_HADR_Dataset_Details_DR() {
	Verify_Dataset_Details($datasetNameDR, $userDR, $pwdDR, $oracleListenerIPDR);
}

/**
* Function is to Verify Dataset details from GUI and DB .
*@param : $datasetName, $user, $pwd, $oracleListenerIP
*@return : null
* Author: Aditi Jain
*
*/
function Verify_Dataset_Details($datasetName, $user, $pwd, $oracleListenerIP) {
	navigateToDiscovery();
	_click(_link($Subsystems));
	_click(_link($Datasets));
	_click(_link($datasetName));

	// CONNECTION
	var $props = Get_User_Properties_for_OracleDb_Connection($user, $pwd, $internalLogon);
	var $conn = Get_Oracle_Db_Connection_URL($oracleListenerIP, $dbSidSelect);
	var $db = _getDB("oracle.jdbc.driver.OracleDriver", $conn, $props);

	// Data Files
	var $datafilesGui1 = _getCellText(_cell(1, _near(_cell($Datafiles))));
	var $datafilesGui = $datafilesGui1.replace(/ /g, ",");
	_assertExists("Data files GUI", $datafilesGui);

	var $datafilesDB1 = $db.select("Select name from v$datafile");
	var $datafilesDB = $datafilesDB1.toString();
	_assertExists("Data files DB", $datafilesDB);

	_assertEqual($datafilesDB, $datafilesGui, "Comparing Datafile  path from DB and GUI");

	// Redo Log Files
	var $redofilesGui1 = _getCellText(_cell(1, _near(_cell($Redologs))));
	var $redofilesGui = $redofilesGui1.replace(/ /g, ",");
	_assertExists("Redo files GUI", $redofilesGui);

	var $redofilesDB1 = $db.select("select MEMBER from v$logfile ORDER BY MEMBER ASC");
	var $redofilesDB = $redofilesDB1.toString();
	_assertExists("Redo files DB", $redofilesDB);

	_assertEqual($redofilesDB, $redofilesGui, "Comparing Redo Log Files path from DB and GUI");

	// Control Files
	var $controlFileGui1 = _getCellText(_cell(1, _near(_cell($Controlfiles))));
	var $controlFileGui = $controlFileGui1.replace(/ /g, ",");
	_assertExists("Control files GUI", $controlFileGui);

	var $controlFileDB1 = $db.select("select name from v$controlfile");
	var $controlFileDB = $controlFileDB1.toString();
	_assertExists("Control files DB", $controlFileDB);
	_assertEqual($controlFileDB, $controlFileGui, "Comparing Datafile path from DB and GUI");

	// Archive log file
	var $archiveLocationGui = _getCellText(_cell(1, _near(_cell($ArchiveLogsLocation))));
	_assertExists("archive location in GUI:", $archiveLocationGui);

}


/**
* Function is to get Dataset status from GUI and DB from PR.
*@param : null
*@return : null
* Author: Aditi Jain
*
*/
function Get_Dataset_Status_PR() {
	Get_Dataset_Status($oracleListenerIPPR, $dbSidSelect, $drmServer, $drmUserName, $drmPassword, $compIPPR, $remoteUserNameValPR, $remotePwdValPR, $datasetNamePR);
}

/**
* Function is to get Dataset status from GUI and DB from DR.
*@param : null
*@return : null
* Author: Aditi Jain
*
*/
function Get_Dataset_Status_DR() {
	Get_Dataset_Status($oracleListenerIPDR, $dbSidSelect, $drmServer, $drmUserName, $drmPassword, $compIPDR, $remoteUserNameValDR, $remotePwdValDR, $datasetNameDR);
}

/**
* Function is to get Dataset status from GUI and DB.
*@param : $user, $pwd, $internalLogon, $oracleListenerIP, $dbSidSelect, $drmServer, $drmUserName, $drmPassword, $compIP, $remoteUserNameVal, $remotePwdVal, $datasetName
*@return : $datasetStatusDb
* Author: Aditi Jain
*
*/
function Get_Dataset_Status($oracleListenerIP, $dbSidSelect, $drmServer, $drmUserName, $drmPassword, $compIP, $remoteUserNameVal, $remotePwdVal, $datasetName) {
	navigateToDiscovery();
	_click(_link($Subsystems));
	_click(_link($Datasets));

	if ($agentType == "Remote") {
		var $sshCommand = '../.' + $EAMSROOT + 'bin/' + "OracleAgent.sh status" + " " + $compIP + ' LINUXSERVER';
		var $status = Execute_Ssh_Command($drmServer, $drmUserName, $drmPassword, $sshCommand);
		var $action = $status.get("output");
		var $actionStatus = $action.toString();
		var $actionTime = $actionStatus.split("[");
		var $year = currentYear();
		var $actionStatus1 = $actionTime[0].split($year);
		var $actionStatus = $actionStatus1.pop();
		_assertExists("actionStatus", $actionStatus);
		if (_exists($DatabaseConnectionEstablished)) {
			if ($actionStatus == " OracleAgent running") {
				var $datasetStatus = "ACTIVE";
			} else if ($actionStatus == " There is no OracleAgent running") {
				var $datasetStatus = "UNKNOWN";
			}
		} else {
			var $datasetStatus = "INACTIVE";
		}
	} else if ($agentType == "Local") {
		var $sshCommand = '../.' + $localAgentPath + "OracleAgent.sh status";
		var $status = Execute_Ssh_Command($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
		var $action = $status.get("output");
		var $actionStatus1 = $action.toString();
		var $actionStatus = $actionStatus1.split(",");
		_assertExists("actionStatus is:", $actionStatus[1]);
		if (_exists($DatabaseConnectionEstablished)) {
			if ($actionStatus[1] == " OracleAgent running") {
				var $datasetStatus = "ACTIVE";
			} else if ($actionStatus == " There is no OracleAgent running") {
				var $datasetStatus = "UNKNOWN";
			}
		} else {
			var $datasetStatus = "INACTIVE";
		}
	}
	_assertExists($DatasetStatusDB, $datasetStatus);

	return $datasetStatus;
}

/**
* Function is to verify Dataset status from GUI and DB from PR.
*@param : null
*@return : null
* Author: Aditi Jain
*
*/
function Verify_Dataset_Status_PR() {
	Verify_Dataset_Status($userPR, $pwdPR, $internalLogon, $oracleListenerIPPR, $dbSidSelect, $drmServer, $drmUserName, $drmPassword, $compIPPR, $remoteUserNameValPR, $remotePwdValPR, $datasetNamePR);
}

/**
* Function is to verify Dataset status from GUI and DB from DR.
*@param : null
*@return : null
* Author: Aditi Jain
*
*/
function Verify_Dataset_Status_DR() {
	Verify_Dataset_Status($userDR, $pwdDR, $internalLogon, $oracleListenerIPDR, $dbSidSelect, $drmServer, $drmUserName, $drmPassword, $compIPDR, $remoteUserNameValDR, $remotePwdValDR, $datasetNameDR);
}

/**
* Function is to get Dataset status from GUI and DB.
*@param : $user, $pwd, $internalLogon, $oracleListenerIP, $dbSidSelect, $drmServer, $drmUserName, $drmPassword, $compIP, $remoteUserNameVal, $remotePwdVal, $datasetName
*@return : null
* Author: Aditi Jain
*
*/
function Verify_Dataset_Status($user, $pwd, $internalLogon, $oracleListenerIP, $dbSidSelect, $drmServer, $drmUserName, $drmPassword, $compIP, $remoteUserNameVal, $remotePwdVal, $datasetName) {

	var $datasetStatusDb = Get_Dataset_Status($user, $pwd, $internalLogon, $oracleListenerIP, $dbSidSelect, $drmServer, $drmUserName, $drmPassword, $compIP, $remoteUserNameVal, $remotePwdVal, $datasetName);

	var $datasetStatusGui = Get_Dataset_Status_Gui($datasetName);
	_assertEqual($datasetStatusDb.get($DatasetStatusDB), $datasetStatusGui.get("status"), "Verifying Dataset Status is Equal in Db and GUI");
}
