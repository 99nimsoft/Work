/*************************************************************************
 ** CompanyName : Sanovi Technologies Ltd.
 ** Application Name : DRM 
 ** Objective : This script contains Creation of Dataset for both remote and local agents. 
 ** AuthorName : Aditi Jain
 ** Created Date : April 2013
 ** $systemTypeDataset, $compNamePR, $datasetType, $datasetNamePR, $userNameVal, $pwdVal, $compIPPR, $userNameVal, $pwdVal, $dbSidSelect, $userPR, $pwdPR
 ** Oracle,Linux_192.168.20.4, Oracle,oradg_PR_Local_agent,sys,Sanovi123,192.168.20.4, $dbSidSelect -acctdb,sys, Sanovi123
 ************************************************************************/




function Create_Dataset_Oracle($systemTypeDataset, $compName, $datasetType, $datasetName, $userNameVal, $pwdVal, $compIP, $userNameVal, $pwdVal, $dbSidSelect, $user, $pwd,$portdataset){
	_log("Port No= "+$portdataset);
	navigateToDiscovery();
	_click(_link($Subsystems));
	_click(_link($Datasets));
		_setSelected(_select($objSystemType), $systemTypeDataset);
		_click(_button($Go));
		_setSelected(_select($dependentComponentName), $compName);
		//_setSelected(_select($datasetType1), $datasetType);
		_setValue(_textbox($datasetName_locator), $datasetName);
		var $i=0;
		while ($i<10) {
			if (_exists(_link($RegisterAgent))) {
				_click(_link($RegisterAgent));
				_wait(30000);
			}
			else if ((!_exists(_link($RegisterAgents))) && (!_exists(_link($CONNECTED)))) {
				_wait(15000);
				navigateToDiscovery();
				_click(_link($Subsystems));
				_click(_link($Datasets));
				_setSelected(_select($systemType), $systemTypeDataset);
				_click(_button($Go));
				_setSelected(_select($dependentComponentName), $compName);
				_setSelected(_select($datasetType), $datasetType);
				_setValue(_textbox($datasetName_locator), $datasetName);
			}
		
			 else {
					_log("go ahead");
					break;
				}
			$i++;
		}
				
		if (_exists(_link($CONNECTED))) {
			if ($agentType == "Remote") {
				_setSelected(_select($credList), $Addnewcredential);
				_setValue(_textbox($usernameval), $userNameVal);
				_setValue(_password($pwdval), $pwdVal);
				_click(_button($TestCredentials));
				_click(_radio($existingSID));
				_click(_button($GetSIDS));
				_wait(2000);
				_setValue(_textbox($dbPort), $portdataset);
			} else if ($agentType == "Local"){
				_log("LOCAL Agent");
				_click(_radio($existingSID));
				_click(_button($GetSIDS));
				_wait(2000);
				_setValue(_textbox($dbPort), $portdataset);
			}
		}
		
		// SID from GUI
		var $sidGui1 = _getCellText(_select($dbSidSelect_locator));
		var $sidGui2 = $sidGui1.toString();
		var $sidGui = $sidGui2 + ",";
		_assertExists("SID GUI", $sidGui);

		// SID from DB
	/*	var $sshCommand = "lsnrctl status | grep Instance |awk ' { print $2 }' | uniq";
		var $status = Execute_Ssh_Command($compIP, $userNameVal, $pwdVal, $sshCommand);
		var $action = $status.get($output);
		var $sidDB1 = $action.toString();
		var $siddb = $sidDB1.replace(/,,/g, ",");
		var $sidDb = $siddb.replace(/\"/g, "");
		var $sidDB = $sidDb.split($uniq);
_assertExists("SID DB",$sidDB);*/
	//	_assertEqual($sidDB[1], $sidGui, "Displaying all the sids equal in DB and GUI");

		_setSelected(_select($dbSidSelect_locator), $dbSidSelect);
		if ($agentType == "Local"){
			_log("local Agent");
			if($OS_Authentication == "Y"){
				_click(_radio($osAuthenticate));
			} else {
				_click(_radio($dbAuthenticate));
			}
		} else {
			_log("Remote Agent");
		}
		_setValue(_textbox($dbUserName), $user);
		_setValue(_password($dbPassword), $pwd);
		_click(_button($TestCredentials1));
		_wait(5000, _span($Success));
		_click(_button($Discover));
		_wait(10000);

}




/**
* Function is for Creating of  Dataset for PR  in Oracle.
*@param :  null 
*@return : null
* Author: Aditi Jain
* $systemTypeDataset, $compNamePR, $datasetType, $datasetNamePR, $userNameVal, $pwdVal, $compIPPR, $userNameVal, $pwdVal, $dbSidSelect, $userPR, $pwdPR
* Oracle,Linux_192.168.20.4, Oracle,oradg_PR_Local_agent,sys,Sanovi123,192.168.20.4, $dbSidSelect -acctdb,sys, Sanovi123
*/

function Create_OracleDG_Dataset_PR() {
	Create_OracleDG_Dataset($systemTypeDataset, $compNamePR, $datasetType, $datasetNamePR, $userNameVal, $pwdVal, $compIPPR, $userNameVal, $pwdVal, $dbSidSelect, $userPR, $pwdPR,$portdataset);
}


/**
* Function is for Creating of  Dataset for DR  in Oracle.
*@param :  null
*@return : null
* Author: Aditi Jain
*
*/
function Create_OracleDG_Dataset_DR() {
	Create_OracleDG_Dataset($systemTypeDataset, $compNameDR, $datasetType, $datasetNameDR, $userNameVal, $pwdVal, $compIPDR, $userNameVal, $pwdVal, $dbSidSelect, $userDR, $pwdDR,$portdataset);
}


function Create_OracleDG_DatasetSRDF_DR(){
	Create_OracleFull_DB_DatasetSRDF_DR($systemTypeDataset, $compNamePR, $datasetType, $datasetNameDR, $userNameVal, $pwdVal, $compIPPR, $userNameVal, $pwdVal, $dbSidSelect, $userPR, $pwdPR,"Y");
}

function Create_OracleFull_DB_DatasetSRDF_DR($systemTypeDataset, $compName, $datasetType, $datasetName, $userNameVal, $pwdVal, $compIP, $userNameVal, $pwdVal, $dbSidSelect, $user, $pwd,$srdfCheck) {
	navigateToDiscovery();
	_click(_link($Subsystems));
	_click(_link($Datasets));
	if (_exists(_link($datasetName))) {
		_assertExists($DatasetalreadyExists);
	} else {	
		Create_Dataset_Oracle($systemTypeDataset, $compName, $datasetType, $datasetName, $userNameVal, $pwdVal, $compIP, $userNameVal, $pwdVal, $dbSidSelect, $user, $pwd,$srdfCheck,$portdataset);
		if($srdfCheck == "Y"){
		_setSelected(_select($dependentComponentName), $compNameDR);
		var $i=0;
		while ($i<10) {
			if (_exists(_link($RegisterAgent))) {
				_click(_link($RegisterAgent));
				_wait(30000);
			}
			else if ((!_exists(_link($RegisterAgents))) && (!_exists(_link($CONNECTED)))) {
				_wait(15000);
				navigateToDiscovery();
				_click(_link($Subsystems));
				_click(_link($Datasets));
				_setSelected(_select($systemType), $systemTypeDataset);
				_click(_button($Go));
				_setSelected(_select($dependentComponentName), $compName);
				_setSelected(_select($datasetType), $datasetType);
				_setValue(_textbox($datasetName_locator), $datasetName);
			} else {
					_log("go ahead");
					break;
				}
			$i++;
		}
		_setSelected(_select($credList), "Add new credential");
		_setValue(_textbox($usernameval), $userNameVal);
		_setValue(_password($pwdval), $pwdVal);
		_click(_button($TestCredentials));
		_click(_radio($existingSID));
		_click(_button($GetSIDS));
		var $sidGui1 = _getCellText(_select($dbSidSelect_locator));
		_setSelected(_select($dbSidSelect_locator), $dbSidSelect);
		var $a = _getText(_textbox($oracleHome));
		_log($a);
		if ($a != "") {
			_clearLastAlert();
			_click(_button($Save));
		} else {
		    
			_assertExists($NOTDISCOVERED);
			_fail($NOTDISCOVERED);
		}
		
	}
		navigateToDiscovery();
		_click(_link($Subsystems));
		_click(_link($Datasets));
		if (_exists(_link($datasetName))) {
			_assertExists($DatasetCreated);
		} else {
			_assertEqual("dataset created succesfully",_lastAlert()); 	
			_fail("Dataset not created");
		}
	  
	}
}




/**
* Function is for Creating of  Dataset for DR  in Oracle.
*@param : $systemTypedataset, $compName, $datasetType, $datasetName, $userNameVal, $pwdVal, $compIP, $userNameVal, $pwdVal, $dbSidSelect, $user, $pwd
*@return : null
* Author: Aditi Jain
*
*/
function Create_OracleDG_Dataset($systemTypeDataset, $compName, $datasetType, $datasetName, $userNameVal, $pwdVal, $compIP, $userNameVal, $pwdVal, $dbSidSelect, $user, $pwd,$portdataset) {
	navigateToDiscovery();
	_click(_link($Subsystems));
	_click(_link($Datasets));
	if (_exists(_link($datasetName))) {
		_assertExists($DatasetalreadyExists);
	} else {
		Create_Dataset_Oracle($systemTypeDataset, $compName, $datasetType, $datasetName, $userNameVal, $pwdVal, $compIP, $userNameVal, $pwdVal, $dbSidSelect, $user, $pwd,$portdataset);
	
		var $a = _getText(_textbox($oracleHome));
		_log($a);
		if ($a != "") {
			_clearLastAlert();
			_click(_button($Save));
		} else {
			_assertExists("NOT DISCOVERED");
			
		}
	}
		navigateToDiscovery();
		_click(_link($Subsystems));
		_click(_link($Datasets));
		if (_exists(_link($datasetName))) {
			_assertExists($DatasetCreated);
		} else {
			_assertEqual("dataset created succesfully",_lastAlert()); 	
			_fail("Dataset not created");
		}
	
	
}
/**
* Function is to Verify Dataset details from GUI and DB from PR.
*@param : null
*@return : null
* Author: Aditi Jain
*$dgDiscoveryHostIPPR is $compIPPR
*/
function Verify_Dataset_Details_PR() {
	Verify_Dataset_Details($datasetNamePR, $userPR, $pwdPR, $oracleListenerIPPR);
}

/**
* Function is to Verify Dataset details from GUI and DB from DR.
*@param : null
*@return : null
* Author: Aditi Jain
*
*/
function Verify_Dataset_Details_DR() {
	Verify_Dataset_Details($datasetNameDR, $userDR, $pwdDR, $oracleListenerIPDR);
}

/**
* Function is to Verify Dataset details from GUI and DB .
*@param : $datasetName, $user, $pwd, $oracleListenerIP
*@return : null
* Author: Aditi Jain
*
*/
function Verify_Dataset_Details($datasetName, $user, $pwd, $oracleListenerIP) {
	navigateToDiscovery();
	_click(_link($Subsystems));
	_click(_link($Datasets));
	_click(_link($datasetName));

	// CONNECTION
	var $props = Get_User_Properties_for_OracleDb_Connection($user, $pwd, $internalLogon);
	var $conn = Get_Oracle_Db_Connection_URL($oracleListenerIP, $dbSidSelect);
	var $db = _getDB("oracle.jdbc.driver.OracleDriver", $conn, $props);

	// Data Files
	var $datafilesGui1 = _getCellText(_cell(1, _near(_cell($Datafiles))));
	var $datafilesGui = $datafilesGui1.replace(/ /g, ",");
	_assertExists("Data files GUI", $datafilesGui);

	var $datafilesDB1 = $db.select($Selectnamefromvdatafile);
	var $datafilesDB = $datafilesDB1.toString();
	_assertExists("Data files DB", $datafilesDB);

	_assertEqual($datafilesDB, $datafilesGui, "Comparing Datafile  path from DB and GUI");

	// Redo Log Files
	var $redofilesGui1 = _getCellText(_cell(1, _near(_cell($Redologs))));
	var $redofilesGui = $redofilesGui1.replace(/ /g, ",");
	_assertExists("Redo files GUI", $redofilesGui);

	var $redofilesDB1 = $db.select($selectMEMBERfromvlogfileORDERBYMEMBERASC);
	var $redofilesDB = $redofilesDB1.toString();
	_assertExists("Redo files DB", $redofilesDB);

	_assertEqual($redofilesDB, $redofilesGui, "Comparing Redo Log Files path from DB and GUI");

	// Control Files
	var $controlFileGui1 = _getCellText(_cell(1, _near(_cell($Controlfiles))));
	var $controlFileGui = $controlFileGui1.replace(/ /g, ",");
	_assertExists("Control files GUI", $controlFileGui);

	var $controlFileDB1 = $db.select($selectnamefromvcontrolfile);
	var $controlFileDB = $controlFileDB1.toString();
	_assertExists("Control files DB", $controlFileDB);
	_assertEqual($controlFileDB, $controlFileGui, "Comparing Datafile path from DB and GUI");

	// Archive log file
	var $archiveLocationGui = _getCellText(_cell(1, _near(_cell($ArchiveLogsLocation))));
	_assertExists("archive location in GUI:", $archiveLocationGui);

}


/**
* Function is to get Dataset status from GUI and DB from PR.
*@param : null
*@return : null
* Author: Aditi Jain
*
*/
function Get_Dataset_Status_PR() {
	Get_Dataset_Status($userPR, $pwdPR, $internalLogon, $oracleListenerIPPR, $dbSidSelect, $drmServer, $drmUserName, $drmPassword, $compIPPR, $remoteUserNameValPR, $remotePwdValPR, $datasetNamePR);
}

/**
* Function is to get Dataset status from GUI and DB from DR.
*@param : null
*@return : null
* Author: Aditi Jain
*
*/
function Get_Dataset_Status_DR() {
	Get_Dataset_Status($userDR, $pwdDR, $internalLogon, $oracleListenerIPDR, $dbSidSelect, $drmServer, $drmUserName, $drmPassword, $compIPDR, $remoteUserNameValDR, $remotePwdValDR, $datasetNameDR);
}

/**
* Function is to get Dataset status from GUI and DB.
*@param : $user, $pwd, $internalLogon, $oracleListenerIP, $dbSidSelect, $drmServer, $drmUserName, $drmPassword, $compIP, $remoteUserNameVal, $remotePwdVal, $datasetName
*@return : $datasetStatusDb
* Author: Aditi Jain
*
*/
function Get_Dataset_Status($user, $pwd, $internalLogon, $oracleListenerIP, $dbSidSelect, $drmServer, $drmUserName, $drmPassword, $compIP, $remoteUserNameVal, $remotePwdVal, $datasetName) {
	navigateToDiscovery();
	_click(_link($Subsystems));
	_click(_link($Datasets));
	var $props = Get_User_Properties_for_OracleDb_Connection($user, $pwd, $internalLogon);
	var $conn = Get_Oracle_Db_Connection_URL($oracleListenerIP, $dbSidSelect);
	var $db = _getDB("oracle.jdbc.driver.OracleDriver", $conn, $props);

	if ($agentType == "Remote") {
		var $sshCommand = '../.' + $EAMSROOT + 'bin/' + "OracleAgent.sh status" + " " + $compIP + ' LINUXSERVER';
		var $statusStr = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		_log($statusStr);
/*		var $action = $status.get("output");
//		var $actionStatus = $action.toString();
		var $actionTime = $status.split("[");
		var $year = currentYear();
		var $actionStatus1 = $actionTime[0].split($year);
		var $actionStatus = $actionStatus1.pop(); */
		var $actionStatus = $statusStr.match($OracleAgentrunning);
		
		_assertExists("actionStatus for remote Oracle Agent ", $actionStatus);
		
		
		if (_exists($DatabaseConnectionEstablished)) {
			if ($actionStatus == $OracleAgentrunning) {
				var $datasetStatus = "ACTIVE";
			} else if ($actionStatus == " There is no OracleAgent running") {
				var $datasetStatus = "UNKNOWN";
			}
		} else {
			var $datasetStatus = "INACTIVE";
		}
	} else if ($agentType == "Local") {
		var $sshCommand = '../.' + $localAgentPath + "OracleAgent.sh status";
		var $statusStr = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
		_log($statusStr);
//		var $action = $status.get("output");
//		var $actionStatus1 = $action.toString();
//		var $actionStatus = $status.split(",");
		var $actionStatus = $statusStr.match($OracleAgentrunning);		
		_assertExists("actionStatus for Local Oracle Agent ", $actionStatus);
		
		if (_exists($DatabaseConnectionEstablished)) {
			if ($actionStatus == "OracleAgent running") {
				var $datasetStatus = "ACTIVE";
			} else if ($actionStatus == " There is no OracleAgent running") {
				var $datasetStatus = "UNKNOWN";
			}
		} else {
			var $datasetStatus = "INACTIVE";
		}
	}
	_assertExists($DatasetStatusDB, $datasetStatus);

	var $datasetStatusDb = new java.util.Properties();
	$datasetStatusDb.put($DatasetStatusDB, $datasetStatus)
	return $datasetStatusDb;
}

/**
* Function is to verify Dataset status from GUI and DB from PR.
*@param : null
*@return : null
* Author: Aditi Jain
*
*/
function Verify_Dataset_Status_PR() {
	Verify_Dataset_Status($userPR, $pwdPR, $internalLogon, $oracleListenerIPPR, $dbSidSelect, $drmServer, $drmUserName, $drmPassword, $compIPPR, $remoteUserNameValPR, $remotePwdValPR, $datasetNamePR);
}

/**
* Function is to verify Dataset status from GUI and DB from DR.
*@param : null
*@return : null
* Author: Aditi Jain
*
*/
function Verify_Dataset_Status_DR() {
	Verify_Dataset_Status($userDR, $pwdDR, $internalLogon, $oracleListenerIPDR, $dbSidSelect, $drmServer, $drmUserName, $drmPassword, $compIPDR, $remoteUserNameValDR, $remotePwdValDR, $datasetNameDR);
}

/**
* Function is to get Dataset status from GUI and DB.
*@param : $user, $pwd, $internalLogon, $oracleListenerIP, $dbSidSelect, $drmServer, $drmUserName, $drmPassword, $compIP, $remoteUserNameVal, $remotePwdVal, $datasetName
*@return : null
* Author: Aditi Jain
*
*/
function Verify_Dataset_Status($user, $pwd, $internalLogon, $oracleListenerIP, $dbSidSelect, $drmServer, $drmUserName, $drmPassword, $compIP, $remoteUserNameVal, $remotePwdVal, $datasetName) {

	var $datasetStatusDb = Get_Dataset_Status($user, $pwd, $internalLogon, $oracleListenerIP, $dbSidSelect, $drmServer, $drmUserName, $drmPassword, $compIP, $remoteUserNameVal, $remotePwdVal, $datasetName);

	var $datasetStatusGui = Get_Dataset_Status_Gui($datasetName);
	//_assertEqual($datasetStatusDb.get("Dataset Status DB:"), $datasetStatusGui.get("status"), $VerifyingDatasetStatusisEqualinDbandGUI);
	_log("Verifying Dataset Status is Equal in Db and GUI");
	_assertExists($datasetStatusDb.get("Dataset Status DB:"), $datasetStatusGui.get("status"));
}
