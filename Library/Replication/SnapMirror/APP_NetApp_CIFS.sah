/*************************************************************************
 ** CompanyName : Sanovi Technologies Ltd.
 ** Application Name : DRM 
 ** Objective : This script contains Creation of Protection Scheme for both remote agents. 
 ** AuthorName : Rakhee Hongunti
 ** Created Date : May 2014
 ************************************************************************/
//Description:create Protection Schemes in NetAppSnapMirror solution for PR

/**
* Function is for Creating Protection Schemes in NetAppSnapMirror solution for PR.
*@param :  null
*@return: null
* Author: Rakhee Hongunti
*
*/

function Create_NetApp_Protectionscheme_PR() {
	_log("Success");
	Create_NetApp_Protectionscheme($systemTypeProtection, $sernamePR, $mgmtHostNet_PR, $volumeNamePR);
}// end of Create_NetApp_ProtectionschemePR()


/**
* Function is for Creating Protection Schemes in NetAppSnapMirror solution for DR.
*@param :  null
*@return : null
* Author: Rakhee Hongunti
*
*/

function Create_NetApp_Protectionscheme_DR() {
	Create_NetApp_Protectionscheme($systemTypeProtection, $sernameDR, $mgmtHostNet_DR, $volumeNameDR);
}
// End of Create_NetApp_ProtectionschemeDR()


/**
* Function is for Creating Protection Schemes in NetAppSnapMirror solution.
*@param :  $systemTypeProtection, $sernamePR, $mgmtHost_NetAppPR, $volumeNamePR, $lunPathPR
*@return : null
* Author: Rakhee Hongunti
*
*/

function Create_NetApp_Protectionscheme($systemTypeProtection, $sername, $mgmtHost_NetApp, $volumeName) {
	Popup_Handler();
	_wait(6000);
   navigateToDiscovery()
	_click(_link("Subsystems"));
	_click(_link("Protection Schemes"));
	if (_exists(_link($sername))) {
		_log("Protectionscheme already exists");
	} else {
		_setSelected(_select("systemType"), $systemTypeProtection);
		_click(_button(" Go  "));
		_setSelected(_select("mgmtHost_NetApp"), $mgmtHost_NetApp);
		_setValue(_textbox("sername"), $sername);
		var $i = 0;
		// Looping till Register Agent link appears
		while ($i < 10) {
			// Pause for 30 seconds
			_log($i);
			_wait(30000);

			if (_exists(_link("Register Agent"))) {
				_click(_link("Register Agent"));
				_wait(30000);
			} else if (_exists(_cell("CONNECTED", _near(_cell("Status :"))))) {
				_log("Agent is CONNECTED");
				break;
			}
			$i = $i + 1;
		}// While loop ended
		_setSelected(_select("volumeName"), $volumeName);
		
	
		_click(_button("Save"));
}	
}
// end Of Create_NetApp_Protectionscheme()



/**
* Function is for verifying Protection Schemes status in NetAppSnapMirror solution for PR.
*@param :  null
*@return : null
* Author: Rakhee Hongunti
*
*/
function Verify_APP_NetApp_CIFS_Protection_Scheme_Status_PR(){
	Get_NetApp_SnapMirror_Protection_Scheme_status($drmServer, $drmUserName, $drmPassword,$NetAppcompIPPR, $NetAppUserNameValPR, $NetAppPwdValPR,$sernamePR);
}
// End of Verify_APP_NetApp_CIFS_Protection_Scheme_Status_PR()




/**
* Function is for verifying Protection Schemes status in NetAppSnapMirror solution for DR.
*@param :  null
*@return : null
* Author: Rakhee Hongunti
*
*/
function Verify_APP_NetApp_CIFS_Protection_Scheme_Status_DR(){
	Get_NetApp_SnapMirror_Protection_Scheme_status($drmServer, $drmUserName, $drmPassword,$NetAppcompIPDR, $NetAppUserNameValDR, $NetAppPwdValDR,$sernameDR);
}
// End of Verify_APP_NetApp_CIFS_Protection_Scheme_Status_DR()




/**
* Function is for get Protection Schemes Status in Application Subsystem with NetApp SnapMirror  solution.
*@param : $drmServer, $drmUserName, $drmPassword,$NetAppcompIP, $remoteUserNameVal, $remotePwdVal,$sername
*@return : null
* Author: Rakhee Hongunti
*
*/
function Get_NetApp_SnapMirror_Protection_Scheme_status($drmServer, $drmUserName, $drmPassword,$NetAppcompIP, $NetAppUserNameVal,$NetAppPwdVal,$sername) {
	navigateToDiscovery();
	_click(_link("Subsystems"));
	_click(_link("Protection Schemes"));
	if($agentType=="Remote"){
		var $sshCommand = '../.' + $EAMSROOT + 'bin/'+"NetAppAgent.sh status" + " " + $NetAppcompIP + ' LINUXSERVER';
		var $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
		var $action = $status.get("output");
		var $actionStatus = $action.toString();
		var $actionTime = $status.split("[");
		var $year = currentYear();
		var $actionStatus1 = $actionTime[0].split($year);
		var $actionStatus = $actionStatus1.pop();
		_assertExists("actionStatus",$actionStatus);
		if ($actionStatus == "NetAppAgent running") {
			var $protectionSchemeStatus = "ACTIVE";
		} else if ($actionStatus == "There is no NetAppAgent running") {
			 $protectionSchemeStatus = "UNKNOWN";
		} else {
			 $protectionSchemeStatus = "INACTIVE";
		}
		_assertExists("protection scheme Status DB:", $protectionSchemeStatus);
	}
	else if($agentType=="Local"){
	var $sshCommand = '../.' + $NetAppRemoteAgentPath + "NetAppAgent.sh status";
	var $status = SecuredShellConnection($NetAppcompIPPR, $NetAppUserNameVal, $NetAppPwdVal, $sshCommand);

	var $action = $status.get("output");
	var $actionStatus1 = $action.toString();
	var $actionStatus = $actionStatus1.split(",");
	_assertExists("actionStatus is:", $actionStatus[1]);
	if ($actionStatus[1] == " NetAppAgent running.") {
		 $protectionSchemeStatus = "ACTIVE";
	} else if ($actionStatus == " There is no NetAppAgent running") {
		 $protectionSchemeStatus = "UNKNOWN";
	} else {
		 $protectionSchemeStatus = "INACTIVE";
	}
	_assertExists("protection scheme Status DB:", $protectionSchemeStatus);
}
	var $protectionSchemeStatusDb=new java.util.Properties();
	$protectionSchemeStatusDb.put("protection scheme Status DB:", $protectionSchemeStatus);
	return $protectionSchemeStatusDb;
}


		
		