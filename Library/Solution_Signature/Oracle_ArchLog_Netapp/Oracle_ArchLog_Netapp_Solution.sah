/*************************************************************************
 ** CompanyName : Sanovi Technologies Ltd.
 ** Application Name : DRM 
 ** Objective : This script contains all the functions which are the part of  Oracle Archive Log Netapp solution screen wise fetching and comparing data from Db and GUI. 
 ** @AuthorName : Anita
 ** Created Date :Jan 2017
 ************************************************************************/

/**
* Function is for Functional Group creation for Oracle_FDB_NetApp solution.
*@param :null
*@return : null
*@Author: Anita
*
*/
function Creation_NetApp_SnapMirror_Group() {
	if (_exists(_link($groupName))) {
		_log("Same group name already exists");
	} else {
		navigateToDiscovery();
		_click(_link("Groups"));
		_click(_cell("Create new - Group - Functional Group Application Group Business Group 3 Site Group"));
		_setSelected(_select("createGroup"), "Functional Group");
		_click(_button("Go "));
		_wait(1000);
		_setValue(_textbox("groupName"), $groupName);
		_setValue(_textarea("groupDescription"), $groupDescription);	
		if($subscriber != ""){
		   _setSelected(_select("subscriberId"), $subscriber);
		} 
		_setSelected(_select("solutionType"), $SolutionSignature);
		_click(_button("/Next/"));
		_wait(10000);
		_click(_link("Server Component"));
		_click(_checkbox("primaryComponents", _near(_cell($primaryComponents, _under(_tableHeader("PrimaryComponent"))))));
		_click(_checkbox("remoteComponents", _near(_cell($remoteComponents, _under(_tableHeader("RemoteComponent"))))));
		_wait(1000);
		_click(_checkbox("primaryComponents", _near(_cell($primaryNetAppComponent,_under(_tableHeader("PrimaryComponent"))))));
		_click(_checkbox("remoteComponents", _near(_cell($remoteNetAppComponent, _under(_tableHeader("RemoteComponent"))))));
		
		_click(_submit("Save"));
		_wait(2000);
		_click(_link("Application Dataset"));		
		_setSelected(_select("primaryDatasets"), $datasetNamePR);
		_setSelected(_select("remoteDatasets"), $datasetNameDR);
		_click(_submit(" Save"));
		_wait(1000);
		_click(_link("Data Protection"));
		_setSelected(_select("primaryProtections"), $primaryProtections);
		_setSelected(_select("remoteProtections"), $remoteProtections);
		_click(_button("Save"));
		_click(_button("/Next/"));
		_wait(1000);
		_click(_button("Save"));
		_click(_link("License"));
		_click(_link("License"));
		_click(_checkbox("Recovery"));
		_click(_checkbox("Test"));
		_click(_button("Save[2]"));
		_click(_button("Finish"));
		if (_exists(_link($groupName))) {
			_assertExists("Group created succesfully");
		} else {
			_fail("Group not created succesfully.So that stopping execution.");
		}
	}
}// End Of Oracle_FDB_NetApp_Group_Creation



/**
* Function is for Post Group Creation Discovery > Groups > Solution Details > Show Advanced Configuration Post SO.
*@param : null
*@return : null
*@Author: Anita
**/


function Oracle_fulldb_Netapp_Post_Group_Creation_Post_SO(){
	
	Oracle_fulldb_Netapp_Post_Group_Creation_Details($groupName);
}


function Oracle_fulldb_Netapp_Post_Group_Creation(){
	
	Oracle_fulldb_Netapp_Post_Group_Creation_Details($groupName);
}




/**
* Function is for Post Group Creation Discovery > Groups > Solution Details.
*@param : $groupName
*@return : null
*@Author: Anita
*/

function Oracle_fulldb_Netapp_Post_Group_Creation_Details($groupName){
	navigateToGroups();
	_click(_link($groupName));
	_wait(3000);
	_click(_link("Solution Details"));
	
_click(_link("1.Gather the required information , more details"));
_assertExists(_cell("Find out and list the file system mount points the database files reside on for the primary and the DR databases"));
	
_click(_link("2.Choose the PIT/snapshot copies to be used with this group"));
_assertExists(_cell("No PIT/Snapshots discovered for this replication pair Use \"Rediscover\" to include PIT(s) that are already part of protection scheme list."));


_click(_span(".For device groups discovered on the primary, map mount points to device path"));
_assertExists(_cell("Device Group : " + $NetApp_Protection_PR));


_click(_span(".For device groups discovered on the DR, map mount points to device path"));
_assertExists(_cell("Device Group : " + $NetApp_Protection_DR));

_click(_link("5.Choose device group to be used for App RPO calculation"));
_assertExists(_cell($NetApp_Protection_DR));

_click(_link("6.Choose device group to be used when Failover (to DR) workflow is invoked"));
_assertExists(_cell($NetApp_Protection_DR+"[2]"));


}



/**
*This function is used to Edit SO/SB/FOTE/FO/pre post RPO Workflows
*@param :  null
*@return : null
*@Author : Anita
*/

function Oracle_fulldb_Netapp_Edit_SO_Workflow(){
	Oracle_fulldb_Netapp_Edit_Workflow($mountPoint,$fileSO);
}

function Oracle_fulldb_Netapp_Edit_SB_Workflow($mountpath){
	Oracle_fulldb_Netapp_Edit_Workflow($mountPoint,$fileSB);
}

function Oracle_fulldb_Netapp_Edit_PreRPO_Workflow(){
	Oracle_fulldb_Netapp_Edit_Workflow($mountPoint,$filePreRPO);
}

function Oracle_fulldb_Netapp_Edit_PostRPO_Workflow(){
	Oracle_fulldb_Netapp_Edit_Workflow($mountPoint,$filePostRPO);
}

function Oracle_fulldb_Netapp_Edit_FOTE_Workflow(){
	Oracle_fulldb_Netapp_Edit_Workflow($mountPoint,$fileFOTE);
}

function Oracle_fulldb_Netapp_Edit_FO_Workflow(){
	Oracle_fulldb_Netapp_Edit_Workflow($mountPoint,$fileFO);
}


function Oracle_fulldb_Netapp_Edit_Workflow($mountpath,$file)
{
	
	  var $fileRead= _userDataDir() + "\\Oracle\\OracleFullDBNetApp\\" + $file;
	  var $xmlStr =_readFile($fileRead); 
	  var $newXmlStr = $xmlStr.replace('<?xml version="1.0" encoding="UTF-8"?>',"");
	  var $xml = new XML($newXmlStr); 	  
	  $xml..userDef..entry.(@key=="MOUNT_POINT").(@value=$mountpath);
      _writeFile($xml.toString(),$fileRead, true);
     
}

/**
*This function is used to Edit SO/SB/FOTE Workflows for OracleArchLogNetapp Soln
*@param :  null
*@return : null
*@Author : Anita
*/

function Oracle_ArchLog_Netapp_Edit_SO_Workflow(){
	Oracle_ArchLog_Netapp_Edit_Workflow($datasetNamePR,$fileSO);
}

function Oracle_ArchLog_Netapp_Edit_SB_Workflow($mountpath){
	Oracle_ArchLog_Netapp_Edit_Workflow($datasetNameDR,$fileSB);
}

function Oracle_ArchLog_Netapp_Edit_FOTE_Workflow(){
	Oracle_ArchLog_Netapp_Edit_FOTE($fileFOTE,$dataVolName,$archMntPoint,$dataMntPoint,$archCloneName,$dataMntPath);
}

function Oracle_ArchLog_Netapp_Edit_Workflow($datasetName,$file)
{
	
	navigateToDiscovery();
	_click(_link("Subsystems"));
	_click(_link("Datasets"));
	_click(_link($datasetName));
	
	// Control Files
	var $controlFileGui1 = _getCellText(_cell(1, _near(_cell("Control file(s) :"))));
	var $controlFileGui = $controlFileGui1.replace(/ /g, ",");
	//_assertExists("Control files GUI", $controlFileGui);
    var $control=$controlFileGui.toString();
    var $controlGUI=$control.split(",");
    var $controlGUI1=$controlGUI[0];
    var $controlGUI2=$controlGUI[1];
   // var $controlGUI3=$controlGUI[2];
    
    var $redofilesGui1 = _getCellText(_cell(1, _near(_cell("Redo log(s) :"))));
	var $redofilesGui = $redofilesGui1.replace(/ /g, ",");
	//_assertExists("Redo files GUI", $redofilesGui);
	var $redo=$redofilesGui.toString();
	var $redoGUI=$redo.split(",");
	
	var $redoGUI1=$redoGUI[0];
	var $redo0=$redoGUI1.split("redo01.log");
	var $redo1=$redo0[0];
	
	var $redoGUI2=$redoGUI[1];
	var $redo2=$redoGUI2.split("redo02.log");
	var $redo3=$redo2[0];
	
	var $redoGUI3=$redoGUI[2];
	var $redo4=$redoGUI1.split("redo03.log");
	var $redo5=$redo4[0];
	  
	
	  var $fileRead= _userDataDir() + "\\Oracle\\OracleArLogNetApp\\" + $file;
	  var $xmlStr =_readFile($fileRead); 
	  var $newXmlStr = $xmlStr.replace('<?xml version="1.0" encoding="UTF-8"?>',"");

	  var $xml = new XML($newXmlStr); 
	  
	  //var $controlGUI1=$Control1;
	  $xml..userDef..entry.(@key=="PANORA_CONTROL_FILE1").(@value=$controlGUI1);
	  //var $controlGUI2=$Control2;
	  $xml..userDef..entry.(@key=="PANORA_CONTROL_FILE2").(@value=$controlGUI2);
	  //var $controlGUI3=$Control3;
	 // $xml..userDef..entry.(@key=="PANORA_CONTROL_FILE3").(@value=$controlGUI3);
	    
	  _writeFile($xml.toString(),$fileRead, true);
	  
	  var $fileReadSO = _userDataDir() +"\\Oracle\\\OracleArLogNetApp\\" + $file;
	  var $xmlStr =_readFile($fileReadSO); 
	  var $newXmlStr = $xmlStr.replace('<?xml version="1.0" encoding="UTF-8"?>',"");
		
	  var $anotherXmlStr = $newXmlStr.replace(/ws:pfrOperationAction/g,"pfrOperationAction");
	  var $xml = new XML($anotherXmlStr); 
	  
	  $xml..action.(@id=="13").privateProperties.pfrOperationAction.fileset.targetDirectory="/tmp/";
	 // $xml..action.(@id=="13").privateProperties.pfrOperationAction.fileset.sourceDirectory="/tmp/backupctl.trace";
	  
	  $xml..action.(@id=="20").privateProperties.pfrOperationAction.fileset.targetDirectory[0]=$redo1;
	  $xml..action.(@id=="20").privateProperties.pfrOperationAction.fileset.targetDirectory[1]=$redo3;
	  $xml..action.(@id=="20").privateProperties.pfrOperationAction.fileset.targetDirectory[2]=$redo1;
	  
	  $xml..action.(@id=="20").privateProperties.pfrOperationAction.fileset.sourceDirectory[0]=$redoGUI1;
	  $xml..action.(@id=="20").privateProperties.pfrOperationAction.fileset.sourceDirectory[1]=$redoGUI2;
	  $xml..action.(@id=="20").privateProperties.pfrOperationAction.fileset.sourceDirectory[2]=$redoGUI3;
	  
	  $xml..action.(@id=="29").privateProperties.pfrOperationAction.fileset.targetDirectory="/tmp/";
	 // $xml..action.(@id=="29").privateProperties.pfrOperationAction.fileset.sourceDirectory="/tmp/stdby.ctl";
	  
	  var $anotherXmlStr = $xml.toString().replace(/pfrOperationAction/g,"ws:pfrOperationAction");
	  
	  _writeFile($anotherXmlStr.toString(),$fileReadSO, true);  
}

function Oracle_ArchLog_Netapp_Edit_FOTE($file,$dataVolN,$archMntPt,$dataMntPt,$archCloneN,$dataMntPh){
	
	  var $fileRead= _userDataDir() + "\\Oracle\\OracleArLogNetApp\\" + $file;
	  var $xmlStr =_readFile($fileRead); 
	  var $newXmlStr = $xmlStr.replace('<?xml version="1.0" encoding="UTF-8"?>',"");
	  var $xml = new XML($newXmlStr); 	  
	  $xml..userDef..entry.(@key=="DATA_VOLUME_NAME").(@value=$dataVolN);
	  $xml..userDef..entry.(@key=="ARCHIVE_MOUNT_POINT").(@value=$archMntPt);
	  $xml..userDef..entry.(@key=="DATA_MOUNT_POINT").(@value=$dataMntPt);
	  $xml..userDef..entry.(@key=="ARCHIVE_CLONE_NAME").(@value=$archCloneN);
	  $xml..userDef..entry.(@key=="DATA_MOUNT_PATH").(@value=$dataMntPh);
      _writeFile($xml.toString(),$fileRead, true);
}

/**
* Function is for Verification of the all RTO detail from RPO/RTO screen for Oraclefulldb Net app  solution
*@param : null
*@return : $dbRto
*@Author: Anita
*
*/

function Oracle_fulldb_Netapp_Rto() {
	navigateToRTO($groupName);
	_wait(30000);
	// verification of current RTO :

	/*
	var $stepName1 = parseInt(_getText(_cell(1, _near(_cell("Custom action for Remote Pre-check"), _under(_cell("Expected Completion Time (sec)"))))));
	var $stepName2 = parseInt(_getText(_cell(1, _near(_cell("Break Replication"), _under(_cell("Expected Completion Time (sec)"))))));
	var $stepName3 = parseInt(_getText(_cell(1, _near(_cell("NetAppgetDataMountPath"), _under(_cell("Expected Completion Time (sec)"))))));
	var $stepName4 = parseInt(_getText(_cell(1, _near(_cell("mountDataVolume"), _under(_cell("Expected Completion Time (sec)"))))));
	var $stepName5 = parseInt(_getText(_cell(1, _near(_cell("OracleStartupDatabaseOperation"), _under(_cell("Expected Completion Time (sec)"))))));
	var $stepName6 = parseInt(_getText(_cell(1, _near(_cell("OracleVerifyDatabaseStateOperation"), _under(_cell("Expected Completion Time (sec)"))))));
	var $expectedCompletionTime = Math.floor($stepName1 + $stepName2 + $stepName3 + $stepName4 + $stepName5 + $stepName6);
	_assertExists("Expected completion time", $expectedCompletionTime);

	// Calling function Calculate_Rto from Group_manager.sah
	 $dbRto = Calculate_Rto($expectedCompletionTime);
	return $dbRto;
	*/
     _mouseOver(_svg_rect(14));
     var $step2 = RTO_Calculate();

     _mouseOver(_svg_rect(15));
     var $step3 = RTO_Calculate();

     _mouseOver(_svg_rect(16));
     var $step4 = RTO_Calculate();

     _mouseOver(_svg_rect(17));
     var $step5 = RTO_Calculate();
     
     _mouseOver(_svg_rect(18));
     var $step6 = RTO_Calculate();
     
     _mouseOver(_svg_rect(19));
     var $step7 = RTO_Calculate();
     
     _mouseOver(_svg_rect(20));
     var $step8 = RTO_Calculate();

     var $expectedCompletionTime = Math.floor($step2 + $step3 + $step4 + $step5+$step6+$step7+$step8);
     _assertExists("Expected completion time", $expectedCompletionTime);

     // Calling function Calculate_Rto from Group_manager.sah
     $dbRto = Calculate_Rto($expectedCompletionTime);
     return $dbRto;

} // End of Oracle_fulldb_Netapp_RTO


//Function is for Verification of  in RTO

function RTO_Calculate() {

	$RalHMS = _getText(_span("fusioncharts-tooltip-element"));
	_log($RalHMS);

    _log($RalHMS+ " Value");

      $RalHMSsplit = $RalHMS.split(" ");

    _log($RalHMSsplit + " RalHMSsplit");

     $RalLength =$RalHMSsplit.length;

    _log($RalLength+ " Lenght");  //2

       if($RalLength=="6"){        
               var $hours = parseInt($RalHMSsplit[0] * 3600);
               _log($hours , "Hours into sec");
           
               var $Minutes = parseInt($RalHMSsplit[2] * 60);
               _log($Minutes , "Minutes into sec");
         
              var $Seconds = parseInt($RalHMSsplit[4]);
               _log($Seconds , "Seconds");
             
               $RalHMSTotal= parseInt($hours+$Minutes+$Seconds);
               return $RalHMSTotal;
       }
       else if($RalLength=="4"){
               var $hoursorMinutesnum  = $RalHMSsplit[0];
               _log($hoursorMinutesnum , "Hours or Minutes in number");

               var $hoursorMinutesstr = $RalHMSsplit[1];     
               _log($hoursorMinutesstr , "Hours or Minutes in Character");

              var $Minutesorsecondsnum =$RalHMSsplit[2];
               _log($Minutesorsecondsnum , "Minutes or seconds in number");

              var $Minutesorsecondsstr =$RalHMSsplit[3];
               _log($Minutesorsecondsstr , "Minutes or seconds in Character");

              if($hoursorMinutesstr == "Hours"){

                     var $hoursorINsecMin = parseInt($hoursorMinutesnum * 3600);
                    _log($hoursorINsecMin , "Hours into sec");

              }
              else {

                     var $hoursorINsecMin = parseInt($hoursorMinutesnum * 60);
                     _log($hoursorINsecMin , "Minutes into sec");

                 }

               if($Minutesorsecondsstr=="Minutes"){
 
                      var $Minutesinsec = parseInt($Minutesorsecondsnum * 60);

                      _log($Minutesinsec , "Minutes into sec");
   
              }

              else{

                  var $Minutesinsec = parseInt($Minutesorsecondsnum);

                  _log($Minutesinsec , "Seconds");

              }
             $hoursorMinutesoesecTotal =  parseInt($hoursorINsecMin+$Minutesinsec);
               return $hoursorMinutesoesecTotal;

           }

          else if ($RalLength=="2"){

           var $HoursorMintorSecnum = ($RalHMSsplit[0]);
           var $HoursorMintorSecnum1 = $HoursorMintorSecnum.split("");
           if($HoursorMintorSecnum1[0]=="0"){
        	   $HoursorMintorSecnum = $HoursorMintorSecnum1[1];
           }
           var $HoursorMintorSecstr =  ($RalHMSsplit[1]);
   

               if($HoursorMintorSecstr == "Hours"){

                   var $HoursorMintorSec = parseInt($HoursorMintorSecnum * 3600);

                    _log($HoursorMintorSec , "Hours into sec");           

               }

               else if ($HoursorMintorSecstr == "Minutes"){

                   var $HoursorMintorSec = parseInt($HoursorMintorSecnum * 60);

                   _log($HoursorMintorSec , "Minutes into seconds");

               }

               else {

                   var $HoursorMintorSec = parseInt($HoursorMintorSecnum);

                   _log($HoursorMintorSec , "Seconds");

               }

                 $HoursorMintorSecnumsingleTotal = parseInt($HoursorMintorSec);

                return $HoursorMintorSecnumsingleTotal;

           }
  }

 

//END_RTO_Calculate

/**
* Function is for Verification of the all RPO detail from RPO/RTO screen for Oracle_fulldb_Netapp  solution Post SO
*@param : null
*@return : null
*@Author: Anita
*
*/
function Oracle_fulldb_Netapp_Rpo_Post_SO() {

	Oracle_fulldb_Netapp_Rpo_Status($groupName,$compIPDR,$remoteUserNameValDR,$remotePwdValDR);
	
} // End of APP_Rpo_Post_SO()

/**
* Function is for Verification of the all RPO detail from RPO/RTO screen for Oracle_fulldb_Netapp solution before SO
*@param : null
*@return : null
*@Author: Anita
*
*
*/
function Oracle_fulldb_Netapp_Rpo() {

	Oracle_fulldb_Netapp_Rpo_Status($groupName,$compIPPR,$remoteUserNameValPR,$remotePwdValPR);

}// End of APP_Rpo()

/**
* Function is for Verification of the all RPO detail from RPO/RTO screen for Oracle fulldb Netapp solution.
*@param : $groupName,$datasetName,$compIP,$remoteUserNameVal,$remotePwdVal
*@return : $dbRecoveryPoint
*@Author: Anita
*
*/
function Oracle_fulldb_Netapp_Rpo_Status($groupName,$compIP,$remoteUserNameVal,$remotePwdVal) {

	navigateToRPO($groupName);	
	_wait(3000);
	
	//PR
    var $CurrentTransactionIDPR=_getText(_div(1,_near(_div("Transaction ID"))));
    _assertExists("Current Transaction ID from GUI" ,$CurrentTransactionIDPR);
        
    var $CurrentTransactionTimePR =_getText(_div(1,_near(_div("Transaction Time"))));
    _assertExists("Current Transaction Time from GUI" ,$CurrentTransactionTimePR);
    
    $CurrentTransactionTimePR = $CurrentTransactionTimePR.slice(0,-2);
    //time cal 2017-01-09 15:31:02.0
   // 17 Jan, 2017 15:31:43 dd MMM, yyyy HH:mm:ss
    var $CurrentTransactionTimeGUIPR = new java.text.SimpleDateFormat("dd MMM, yyyy HH:mm:ss").parse($CurrentTransactionTimePR).getTime();
	_assertExists("Current Transaction Time from GUI", $CurrentTransactionTimeGUIPR);
    
	//DR
    var $CurrentTransactionIDDR=_getText(_div(1,_near(_div("Transaction ID[1]"))));
    _assertExists("Current Transaction ID from GUI" ,$CurrentTransactionIDDR);
        
    var $CurrentTransactionTimeDR =_getText(_div(1,_near(_div("Transaction Time[1]"))));
    _assertExists("Current Transaction Time from GUI" ,$CurrentTransactionTimeDR);
    //time cal
    $CurrentTransactionTimeDR = $CurrentTransactionTimeDR.slice(0,-2);
    var $CurrentTransactionTimeGUIDR = new java.text.SimpleDateFormat("dd MMM, yyyy HH:mm:ss").parse($CurrentTransactionTimeDR).getTime();
	_assertExists("Current Transaction Time from GUI", $CurrentTransactionTimeGUIDR);
    
    
	var $mountpath = $mountPoint;
	_log($mountpath + " is $mountpath");
	//Create file 
  var $sshCommand = "echo > " + $mountpath +"/file100.txt";
  SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
    
   navigateToRPO($groupName);

   var $count = 1;

		while($count<10){
			_wait(30000);
			$count++;	
		}
	
		
		
		//PR
	    var $CurrentTransactionIDPRdb=_getText(_div(1,_near(_div("Current Transaction ID"))));
	    _assertExists("Current Transaction ID from db" ,$CurrentTransactionIDPRdb);
	        
	    var $CurrentTransactionTimePRdb =_getText(_div(1,_near(_div("Current Transaction Time"))));
	    _assertExists("Current Transaction Time from db" ,$CurrentTransactionTimePRdb);
	    //time cal
	    $CurrentTransactionTimePRdb = $CurrentTransactionTimePRdb.slice(0,-2);
	    var $CurrentTransactionTimedbPR = new java.text.SimpleDateFormat("dd MMM, yyyy HH:mm:ss").parse($CurrentTransactionTimePRdb).getTime();
		_assertExists("Current Transaction Time from db", $CurrentTransactionTimedbPR);
	    
	    
	    var $CheckPointTransactionIDPRdb =_getText(_div(1,_near(_div("CheckPoint Transaction ID"))));
	    _assertExists("CheckPoint Transaction ID from db" ,$CheckPointTransactionIDPRdb);
	    
	    
	    var $CheckPointTransactionTimePRdb =_getText(_div(1,_near(_div("CheckPoint Transaction Time"))));
	    _assertExists("Check Point Transaction Time from db" ,$CheckPointTransactionTimePRdb);
	    //time cal
	    $CheckPointTransactionTimePRdb = $CheckPointTransactionTimePRdb.slice(0,-2);
	    var $CheckPointTransactionTimedbPR = new java.text.SimpleDateFormat("dd MMM, yyyy HH:mm:ss").parse($CheckPointTransactionTimePRdb).getTime();
		_assertExists("Current Transaction Time from db", $CheckPointTransactionTimedbPR);
	    
	    

		//DR
	    var $CurrentTransactionIDDRdb =_getText(_div(1,_near(_div("Current Transaction ID[1]"))));
	    _assertExists("Current Transaction ID from db" ,$CurrentTransactionIDDRdb);
	        
	    var $CurrentTransactionTimeDRdb =_getText(_div(1,_near(_div("Current Transaction Time[1]"))));
	    _assertExists("Current Transaction Time from db" ,$CurrentTransactionTimeDRdb);
	    //time cal
	    $CurrentTransactionTimeDRdb = $CurrentTransactionTimeDRdb.slice(0,-2);
	    var $CurrentTransactionTimedbDR = new java.text.SimpleDateFormat("dd MMM, yyyy HH:mm:ss").parse($CurrentTransactionTimeDRdb).getTime();
		_assertExists("Current Transaction Time from db", $CurrentTransactionTimedbDR);
	    
	    
	    var $CheckPointTransactionIDDRdb=_getText(_div(1,_near(_div("CheckPoint Transaction ID[1]"))));
	    _assertExists("CheckPoint Transaction ID from db" ,$CheckPointTransactionIDDRdb);
	    
	    
	    var $CheckPointTransactionTimeDRdb =_getText(_div(1,_near(_div("CheckPoint Transaction Time[1]"))));
	    _assertExists("Check Point Transaction Time from db" ,$CheckPointTransactionTimeDRdb);
	    //time cal
	    $CheckPointTransactionTimeDRdb = $CheckPointTransactionTimeDRdb.slice(0,-2);
	    var $CheckPointTransactionTimedbDR = new java.text.SimpleDateFormat("dd MMM, yyyy HH:mm:ss").parse($CheckPointTransactionTimeDRdb).getTime();
		_assertExists("Current Transaction Time from db", $CheckPointTransactionTimedbDR); 
	    		
		

		//PR
		_assertTrue($CurrentTransactionIDPR<=$CurrentTransactionIDPRdb, "Current Transaction ID is Equal in GUI and db");

		_assertTrue($CurrentTransactionTimeGUIPR<=$CurrentTransactionTimedbPR, "Current Transaction Time is Equal in GUI and db");

		_assertTrue($CheckPointTransactionIDPR<=$CheckPointTransactionIDPRdb, "CheckPoint Transaction ID is Equal in GUI and db");

		_assertTrue($CheckPointTransactionTimeGUIPR<=$CheckPointTransactionTimedbPR, "CheckPoint Transaction Time is Equal in GUI and db");

		//DR
		_assertTrue($CurrentTransactionIDDR<=$CurrentTransactionIDDRdb, "Current Transaction ID is Equal in GUI and db");

		_assertTrue($CurrentTransactionTimeGUIDR<=$CurrentTransactionTimedbDR, "Current Transaction Time is Equal in GUI and db");

		_assertTrue($CheckPointTransactionIDDR<=$CheckPointTransactionIDDRdb, "CheckPoint Transaction ID is Equal in GUI and db");

		_assertTrue($CheckPointTransactionTimeGUIDR<=$CheckPointTransactionTimedbDR, "CheckPoint Transaction Time is Equal in GUI and db");


    // Calling Calulate_Rpo function to verify RPO calculation from gui
	$dbRpo = Calulate_Rpo($CurrentTransactionTimedbPR,$CurrentTransactionTimedbDR);
    $recoveryPointinDB = $dbRpo.get("recoveryPointDB");
    
    $dbRecoveryPoint = new java.util.Properties();
 	$dbRecoveryPoint.put("recoveryPointDB", $recoveryPointinDB);
	return $dbRpo;
	return $dbRecoveryPoint;
	
}// End Of Oracle_fulldb_Netapp RPO


/**
* Function is for Verification of the all data RPO detail from RPO/RTO screen for Oracle_fulldb_Netapp  solution Post SO
*@param : null
*@return : null
*@Author: Anita
*
*/
function Oracle_fulldb_Netapp_data_Rpo_Post_SO() {

	Oracle_fulldb_Netapp_Data_RPO($groupName,$compIPDR,$remoteUserNameValDR,$remotePwdValDR);
	
} // End of APP_Rpo_Post_SO()

/**
* Function is for Verification of the all data RPO detail from RPO/RTO screen for Oracle_fulldb_Netapp solution before SO
*@param : null
*@return : null
*@Author: Anita
*
*
*/
function Oracle_fulldb_Netapp_data_Rpo() {

	Oracle_fulldb_Netapp_Data_RPO($groupName,$compIPPR,$remoteUserNameValPR,$remotePwdValPR);

}// End of APP_Rpo()

/**
* Function is for Verification of the all data RPO detail from RPO/RTO screen for Oracle fulldb Netapp solution.
*@param : $groupName,$datasetName,$compIP,$remoteUserNameVal,$remotePwdVal
*@return : $dbRecoveryPoint
*@Author: Anita
*
*/



function Oracle_fulldb_Netapp_Data_RPO($groupName,$compIP,$remoteUserNameVal,$remotePwdVal){
	
var $CurrentPRtimestampGUI =_getCellText(_div(1,_near(_div("Current PR timestamp"))));
_assertExists("Check Point Transaction Time from db" ,$CurrentPRtimestampGUI);
//time cal
var $CurrentPRtimestampGUIPR = new java.text.SimpleDateFormat("yyyy-mm-dd HH:mm:ss").parse($CurrentPRtimestampGUI).getTime();
_assertExists("Current Transaction Time from db", $CurrentPRtimestampGUIPR); 
	
	
var $CheckPointTransactionTimeDRGUI =_getCellText(_div(1,_near(_div("Current DR timestamp"))));
_assertExists("Check Point Transaction Time from db" ,$CheckPointTransactionTimeDRdb);
//time cal
var $CheckPointTransactionTimeGUIDR = new java.text.SimpleDateFormat("yyyy-mm-dd HH:mm:ss").parse($CheckPointTransactionTimeDRGUI).getTime();
_assertExists("Current Transaction Time from db", $CheckPointTransactionTimeGUIDR); 

var $sshCommand = "echo > " + $mountpath +"/file1010.txt";
$status = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $sshCommand);
		    
		   _click(_link("Monitor"));
			_click(_link($groupName));
			_click(_link("RPO/RTO"));
			 $count = 1;
				while($count<10){
					_wait(30000);
					$count++;	
				}

var $CurrentPRtimestampdb =_getCellText(_cell(1,_near(_cell("Current PR timestamp"))));
   _assertExists("Check Point Transaction Time from db" ,$CurrentPRtimestampdb);
//time cal
 var $CurrentPRtimestampdbPR = new java.text.SimpleDateFormat("yyyy-mm-dd HH:mm:ss").parse($CurrentPRtimestampdb).getTime();
_assertExists("Current Transaction Time from db", $CurrentPRtimestampdbPR); 
				
				
var $CheckPointTransactionTimeDRdb =_getCellText(_cell(1,_near(_cell("Current DR timestamp"))));
  _assertExists("Check Point Transaction Time from db" ,$CheckPointTransactionTimeDRdb);
//time cal
 var $CheckPointTransactionTimedbDR = new java.text.SimpleDateFormat("yyyy-mm-dd HH:mm:ss").parse($CheckPointTransactionTimeDRdb).getTime();
_assertExists("Current Transaction Time from db", $CheckPointTransactionTimedbDR); 


_assertTrue($CurrentPRtimestampGUIPR<=$CurrentPRtimestampdbPR, "Current PR time stamp is Equal in GUI and db");

_assertTrue($CheckPointTransactionTimeGUIDR<=$CheckPointTransactionTimedbDR, "Current DR time stamp is Equal in GUI and db");


}


/**
* Function is for Verification of replication status in replication page after SO
*@param : null
*@return : null
*@Author: Anita
*
*/
function Oracle_fulldb_Netapp_Replication_Post_SO() {
	Oracle_fulldb_Netapp_Replication_Status($groupName);
	}

/**
* Function is for Verification of replication status in replication page before SO
*@param : null
*@return : null
*@Author: Anita
*
*/
function Oracle_fulldb_Netapp_Replication() {
	Oracle_fulldb_Netapp_Replication_Status($groupName);
}


/**
* Function is for Verification of replication status in replication page .
*@param : $groupName
*@return : null
*@Author: Anita
*/

function Oracle_fulldb_Netapp_Replication_Status($groupName)
{
	navigateToGroups();
	_click(_link($groupName));
	_click(_image("Manage Group"));
	_click(_link("Replication"));
	
	var $ProtectionGUI=_getCellText(_span(1,_near(_span("Protection:"))));
	_assertExists("Protection  from Gui" , $ProtectionGUI);
	_assertEqual($ProtectionGUI, $systemTypeProtection, "Primary Remote Services from DB and GUI");
		 
	var $ReplicationStatusGUI=_getCellText(_span(1,_near(_span("Replication Status:"))));
	_assertExists("Replication Status from Gui" , $ReplicationStatusGUI);
	
	var $primaryRemoteServicesGUI=_getCellText(_span(1,_near(_span("Primary - Remote Services:"))));
	_assertExists("Primary Remote Servicesfrom Gui" , $primaryRemoteServicesGUI);
	var $primaryRemoteServices=$primaryRemoteServicesGUI.split("-");
	_assertEqual($primaryRemoteServices[0], $NetApp_Protection_PR, "Primary Remote Services from DB and GUI");
	_assertEqual($primaryRemoteServices[1], $NetApp_Protection_DR, "Remote Remote Services from DB and GUI");
	
	var $StateGUI=_getCellText(_span(1,_near(_span("State:"))));
	_assertExists("State from Gui" , $StateGUI);
	
	var $StatusGUI=_getCellText(_span(1,_near(_span("Status:"))));
	_assertExists("Status from Gui" , $StatusGUI);
	
	var $primaryModeGUI=_getCellText(_cell(1,_near(_cell("Mode"))));
	_assertExists("Primary Mode from Gui" , $primaryModeGUI);
	
	var $remoteModeGUI=_getCellText(_cell(2,_near(_cell("Mode"))));
	_assertExists("Remote Mode from GUI" , $remoteModeGUI);
	
	
	var $primaryClusterVserverGUI=_getCellText(_cell(1,_near(_cell("Cluster/Vserver"))));
	_assertExists("$Primary Cluster Vserver from Gui" , $primaryClusterVserverGUI);
	_assertEqual($primaryClusterVserverGUI, $NetAppcompIPPR, "Remote Remote Services from DB and GUI");
	
	
	var $remoteClusterVserverGUI=_getCellText(_cell(2,_near(_cell("Cluster/Vserver"))));
	_assertExists("$remote Cluster Vserverfrom Gui" , $remoteClusterVserverGUI);
	_assertEqual($remoteClusterVserverGUI, $NetAppcompIPDR, "Remote Remote Services from DB and GUI");
	
	var $primaryloctionGUI=_getCellText(_cell(1,_near(_cell("Location:"))));
	_assertExists("primary  Remote Services from GUI" , $primaryloctionGUI);
	
	var $remoteLocationGUI=_getCellText(_cell(2,_near(_cell("Location:"))));
	_assertExists("Remote Location from GUI" , $remoteLocationGUI);
	
	var $primaryVolumeNameGUI =_getCellText(_cell(1,_near(_cell("Volume Name:"))));
	_assertExists("primary Volume Name from GUI" , $primaryVolumeNameGUI);
	
	var $remoteVolumeNameGUI =_getCellText(_cell(2,_near(_cell("Volume Name:"))));
	_assertExists("Remote Volume Name from GUI" , $remoteVolumeNameGUI);
	
}

/**
* Function is for Monitor Relationship Screen.
*@param :  $groupName.
*@return : null
*@Author: Anita
*
*/
function  Oracle_fulldb_Netapp_Monitor_Relationship($groupName) {

       Popup_Handler();
       _wait(5000);
       Popup_Handler();
       navigateToGroups();
       _click(_link($groupName));
       _click(_link("Relationship"));
       _click(_link("Expand All"));
       
       // Validation of Solution Signature
       var $drSolutionSignature = _getText(_cell(1, _near(_cell("DR Solution Signature[1]"))));
       _assertEqual($SolutionSignature, $drSolutionSignature, "Checking DR Solution Signature from the user input and GUI showing for group");

       // Validation of Replication Details for PR

       var $primaryService = _getText(_link(0, _near(_strong("Primary Service"))));
       _assertEqual($primaryProtections, $primaryService, "Checking Protection Scheme name from user input and GUI showing for PR");

       // Splitting the strings to get the replication type for PR
       var $replicationTypePR = _getText(_cell(0, _near(_strong("Primary Service"))));
       var $replicationPR = $replicationTypePR.split(":");
       var $replication_PR = $replicationPR[1].split("[");
       var $primaryServiceType = $replication_PR[1].split("]");
       var $primaryServiceType1=$primaryServiceType[0];
   _assertEqual($systemTypeProtection, $primaryServiceType1, "Checking System type Protection from user input and GUI showing for PR");

       var $primaryServiceStatus = _getText(_cell(0, _near(_strong("Primary Service Status"))));
       _assertExists("Primary Service Status:", $primaryServiceStatus);
       // Validation of Replication Details for DR
       var $remoteService = _getText(_link(0, _near(_strong("Remote Service"))));
       _assertEqual($remoteProtections, $remoteService, "Checking Protection Scheme from user input and GUI for DR");
       // Splitting the strings to get the replication type for DR
       var $replicationTypeDR =  _getText(_cell(0, _near(_strong("Remote Service"))));
       var $replicationDR = $replicationTypeDR.split(":");
       var $replication_DR = $replicationDR[1].split("[");
       var $remoteServiceType = $replication_DR[1].split("]");
       var $remoteServiceType1=$remoteServiceType[0];
       _assertEqual($systemTypeProtection,$remoteServiceType1 , "Checking System type Protection from user input and GUI showing for DR");

       var $remoteServiceStatus = _getText(_cell(0, _near(_strong("Remote Service Status"))));
       _assertExists("Remote Service Status:", $remoteServiceStatus);

       // Validation of Data set for PR
       var $primaryDataset = _getText(_link(1, _near(_strong("Primary Dataset"))));
       _assertExists("Primary Dataset:", $primaryDataset);
       _assertEqual($datasetNamePR, $primaryDataset, "Checking Dataset from user input and GUI for PR");

       // Splitting the strings to get the Data set type for PR
       var $datasetPR = _getText(_cell(0, _near(_strong("Primary Dataset"))));
       var $datasetTypePR = $datasetPR.split(":");
       var $prDataset = $datasetTypePR[1].split("[");
       var $prDatasetType = $prDataset[1].split("]");
       _assertEqual($datasetType, $prDatasetType[0], "Checking Dataset Type from user input and GUI for PR");


       var $primaryDataset = _getText(_cell(0, _near(_strong("Primary Dataset Status"))));
       var $primaryDatasetPR = $primaryDataset.split(":");
       _assertExists("Primary Dataset Status:", $primaryDatasetPR[2]);

       // Validation of Data set for DR
       var $remoteDataset = _getText(_link(0, _near(_strong("Remote Dataset"))));
       _assertEqual($datasetNameDR, $remoteDataset, "Checking Dataset from user input and GUI for DR");

 

       // Splitting the strings to get the Data set type for DR
       var $datasetDR = _getText(_cell(0, _near(_strong("Remote Dataset"))));
       var $datasetType_DR = $datasetDR.split(":");
       var $drDataset = $datasetType_DR[1].split("[");
       var $drDatasetType = $drDataset[1].split("]");
       _assertEqual($datasetType, $drDatasetType[0], "Checking Dataset Type from user input and GUI for DR");

 

       var $remoteDataset = _getText(_cell(0, _near(_strong("Remote Dataset Status"))));
       var $remoteDataset_DR = $remoteDataset.split(":");
       _assertExists("Remote Dataset Status:", $remoteDataset_DR[2]);
       // Validation of Component for PR 1
       var $primaryComponent = _getText(_link(0, _near(_strong("Primary Component 1"))));
       _assertEqual($compNamePR, $primaryComponents, "Checking Component from user input and GUI for PR");

       // Splitting the strings to get the Component type for PR
       var $componentPR = _getText(_cell(0, _near(_strong("Primary Component 1"))));
       var $systemTypePR = $componentPR.split(":");
       var $prComponent = $systemTypePR[1].split("[");
       var $prSystemType = $prComponent[1].split("]");
       _assertEqual($systemType, $prSystemType[0], "Checking System type component from user input and GUI for PR");

 

       var $prComponent1 = _getText(_cell(0, _near(_strong("Primary Component 1 Status"))));
       var $prComponent = $prComponent1.split(":");
       _assertExists("Primary Component Status", $prComponent[1]);

      // Validation of Component for PR 2
       var $primaryComponent = _getText(_link(0, _near(_strong("Primary Component 2"))));
       _assertEqual($NetAppcompNamePR, $primaryNetAppComponent, "Checking Component from user input and GUI for PR");

       // Splitting the strings to get the Component type for PR
       var $componentPR = _getText(_cell(0, _near(_strong("Primary Component 2"))));
       var $systemTypePR = $componentPR.split(":");
       var $prComponent = $systemTypePR[1].split("[");
       var $prSystemType = $prComponent[1].split("]");
       _assertEqual($NetAppFilerSytemType, $prSystemType[0], "Checking System type component from user input and GUI for PR");

 
       var $prComponent1 = _getText(_cell(0, _near(_strong("Primary Component 2 Status"))));
       var $prComponent = $prComponent1.split(":");
       _assertExists("Primary Component Status", $prComponent[1]);

       // Validation of Component for DR 1
       var $remoteComponent = _getText(_link(0, _near(_strong("Remote Component 1"))));
       _assertEqual($compNameDR, $remoteComponents, "Checking Component from user input and GUI for DR");


       // Splitting the strings to get the Component type for DR
       var $componentDR = _getText(_cell(0, _near(_strong("Remote Component 1"))));
       var $systemTypeDR = $componentDR.split(":");
       var $drComponent = $systemTypeDR[1].split("[");
       var $drSystemType = $drComponent[1].split("]");
       _assertEqual($systemType, $drSystemType[0], "Checking System type component from user input and GUI for DR");


       var $remoteComponent = _getText(_cell(0, _near(_strong("Remote Component 1 Status"))));
       var $remoteComponentDR = $remoteComponent.split(":");
       _assertExists("Remote Component Status:", $remoteComponentDR[1]);
       

// Validation of Component for DR 2
       var $remoteComponent = _getText(_link(0, _near(_strong("Remote Component 2"))));
       _assertEqual($NetAppcompNameDR, $remoteNetAppComponent, "Checking Component from user input and GUI for DR");

// Splitting the strings to get the Component type for DR
       var $componentDR = _getText(_cell(0, _near(_strong("Remote Component 2"))));
       var $systemTypeDR = $componentDR.split(":");
       var $drComponent = $systemTypeDR[1].split("[");
       var $drSystemType = $drComponent[1].split("]");
       _assertEqual($NetAppFilerSytemType, $drSystemType[0], "Checking System type component from user input and GUI for DR");
       var $remoteComponent = _getText(_cell(0, _near(_strong("Remote Component 2 Status"))));
       var $remoteComponentDR = $remoteComponent.split(":");
       _assertExists("Remote Component Status:", $remoteComponentDR[1]);

 }




/**
* Function is for verification of details in Manage-Group Information screen for Oracle_PFR solution Post SO
*@param : null
*@return : null
*@Author: Swati Chowdhary
*
*/

function Oracle_fulldb_Netapp_Groupinformation_Post_SO() {
	
	Group_Managegroupinformation($groupName,"SO");
}// End of Oracle_Groupinformation_Post_SO()

/**
* Function is for verification of details in Manage-Group Information screen for Oracle_PFR solution Before SO
*@param : null
*@return : null
*@Author: Anita
*
*/
function Oracle_fulldb_Netapp_Groupinformation() {
	Group_Managegroupinformation($groupName);
}// End of Oracle_Groupinformation()


/**
* Function is for Validation of logs in Monitor > GroupSnapshot screen for oraclePFR solution post SO.
*@param : null
*@return : null
*@Author: Anita
*
*/

function Oracle_fulldb_Netapp_Groupsnapshot_Post_SO() {
	
	Oracle_fulldb_Netapp_Groupsnapshot_Status($groupName,"SO");

} // End of Oracle_Groupsnapshot_Post_SO()


/**
* Function is for Validation of logs in Monitor > GroupSnapshot screen for oraclePFR solution before SO.
*@param : null
*@return : null
*@Author: Anita
*
*/
function Oracle_fulldb_Netapp_Groupsnapshot() {
	
	Oracle_fulldb_Netapp_Groupsnapshot_Status($groupName);
}// End of Oracle_Groupsnapshot()

/**
* Function is for Validation of logs in Monitor > GroupSnapshot screen for oraclePFR solution.
*@param : $groupName,$WFType
*@return : null
*@Author: Anita
*
*/


function Oracle_fulldb_Netapp_Groupsnapshot_Status($groupName,$WFType) {
	Popup_Handler();
	_click(_link("Monitor"));
	_click(_link($groupName));
	_click(_link("Group Snapshot"));

	// verifying Recovery Point
	if ($WFType == "SO") {
		if (_exists(_cell("Not supported in Switchover mode"))) {
			_log("So done successfully");
		} else {
			_log("Gui not showing correct value");
		}
		// calling Mysql_RPO_Post_SO function
		
		Oracle_fulldb_Netapp_Rpo_Post_SO();

	} else {
		// calling Mysql_RPO function
		Oracle_fulldb_Netapp_Rpo();
	}
	
	var $recoveryPointGui1 = _getText(_span(1, _near(_span("DR Data Consistent up to:"), _near(_cell("Continuity")))));
	_assertExists("Recovery Point DR Data Consistent up to:", $recoveryPointGui1);
	var $date = $recoveryPointGui1;
     var $dateString = $date.toString();
     var $recoveryPointGui = new java.text.SimpleDateFormat("yyyy-mm-dd HH:mm:ss").parse($dateString).getTime();
	_assertExists("Recovery Point DR Data Consistent up to:", $recoveryPointGui);
	if ($recoveryPointinDB == $recoveryPointGui){
	_assertEqual($recoveryPointinDB, $recoveryPointGui, "Validating Recovery Point DR Data Consistent upto correct in GUI");
	}
	else {
 		_log("Validating Recovery Point DR Data Consistent is not  correct in GUI");
 	}
	// Verfing Recovery time
	if ($WFType == "SO") {
		if (_exists(_cell("Not supported in Switchover mode"))) {
			_log("Not supported in Switchover mode");
		}
	} else {
		Popup_Handler();
		_click(_link("Monitor"));
		_click(_link($groupName));
		_click(_link("Group Snapshot"));
		var $recoveryTimeGui1 = (_getText(_cell(5, _near(_span("Est. time to recover:", _near((_cell("Recovery Time")))))))).split("Est. time to recover:");
		var $recoveryTimeGui = $recoveryTimeGui1[1];
		_assertExists("Recovery Time  Est. time to recover:", $recoveryTimeGui);
		// calling function to calculate rto for Recovery Time
		var $dbRto = Oracle_fulldb_Netapp_Rto($groupName);
		Popup_Handler();
		_click(_link("Monitor"));
		_click(_link($groupName));
		_click(_link("Group Snapshot"));
		_assertEqual($dbRto.get("actualRtoDB"), $recoveryTimeGui, "Validating Recovery Time  Est. time to recover correct in GUI");
	}
	Popup_Handler();
	
	_click(_link("Monitor"));
	_click(_link($groupName));
	_click(_link("Group Snapshot"));
	var $continuityOperation = _getText(_cell(1, _near(_cell("Continuity Operation:"))));
	_assertExists("Continuity Operation:", $continuityOperation);

}

/**
* Function is for Verification of details in Manage-Manage DR Solution screen for Oracle_fulldb_Netapp solution Post SO
*@param : null
*@return : null
*@Author: Anita
*
*/

function Oracle_fulldb_Netapp_Managedrsolution_PostSO() {
	Oracle_fulldb_Netapp_Managedrsolution_Status($groupName,"SO" );
} // End of Oracle_PFR_Managedrsolution_PostSO()

/**
* Function is for Verification of details in Manage-Manage DR Solution screen for Oracle_fulldb_Netapp  solution before SO
*@param : null
*@return : null
*@Author: Anita
*
*/
function Oracle_fulldb_Netapp_Managedrsolution() {
	Oracle_fulldb_Netapp_Managedrsolution_Status($groupName);
}// End of Oracle_fulldb_Netapp_Managedrsolution()


/**
* Function is for Verification of details in Manage-Manage DR Solution screen for Oracle_fulldb_Netapp solution.
*@param : $groupName,$WFType 
*@return : null
*@Author: Anita
*
*/
function Oracle_fulldb_Netapp_Managedrsolution_Status($groupName){
	
	_wait(5000);
	navigateToGroups();
	_click(_link($groupName));
	_click(_image("Manage Group"));
	_click(_link("Replication"));
	_wait(3000);
	_click(_button("Refresh Details"));
	_wait(5000);

	var $protectionMechanism = _getText(_span(1, _near(_span("Protection:"))));
	_assertExists("Protection Mechanism is:", $protectionMechanism);
	_assertEqual($systemTypeProtection, $protectionMechanism, "Validating Protection Mechanism in GUI");
	
	var $replicationStatusGui = _getText(_span(1, _near(_span("Replication Status:"))));
	_assertExists("Replication Status:", $replicationStatusGui);
	var $primaryRemoteServicesGUI=_getCellText(_span(1,_near(_span("Primary - Remote Services:"))));
	_assertExists("Primary Remote Servicesfrom Gui" , $primaryRemoteServicesGUI);
}
// end Of Oracle_fulldb_Netapp_Managedrsolution_Status()

/**
* Function is to get NetApp agent status from backend and GUI for PR.
*@param :$agentType,$compIP
*@return :null
*@Author: Anita
*
*/

function Verify_NetAppAgent_Status_PR($agentType) {
	_wait(5000);
	Popup_Handler();
	if ($agentType == "Local") {
		var $componentStatusDB = Get_Local_NetAppAgent_Status_DB_PR();
	} else {
		var $componentStatusDB = Get_Remote_NetAppAgent_Status_DB_PR($NetAppcompIPPR);
	}
	var $componentStatusGui = Get_Component_Status_Gui_PR();
	//_assertEqual($componentStatusDB.get("componentStatusdb"), $componentStatusGui.get("componentStatusGui"), "Comparing Component status from DB and GUI for PR");
} // end of Verify_Component_Status_PR()

function Verify_NetAppAgent_Status_DR($agentType) {
	_wait(5000);
	Popup_Handler();
	if ($agentType == "Local") {
		var $componentStatusDB = Get_Local_NetAppAgent_Status_DB_DR();
	} else {
		var $componentStatusDB = Get_Remote_NetAppAgent_Status_DB_DR($NetAppcompIPDR);
	}
	var $componentStatusGui = Get_Component_Status_Gui_DR();
	//_assertEqual($componentStatusDB.get("componentStatusdb"), $componentStatusGui.get("componentStatusGui"), "Component status not same in GUI and backend for DR");
}

function Get_Remote_NetAppAgent_Status_DB_PR($compIPPR) {
	return Get_Remote_NetAppAgent_Status_DB($compIPPR,$drmServer, $drmUserName, $drmPassword);
} 

function Get_Remote_NetAppAgent_Status_DB_DR($compIPDR) {
	return Get_Remote_NetAppAgent_Status_DB($compIPDR,$drmServer, $drmUserName, $drmPassword);
} 
/**
* Function is to get Remote NetApp agent status from backend DRM
*@param :$compIP
*@return :$componentStatusDB
*@Author: Anita
*
*/
function Get_Remote_NetAppAgent_Status_DB($compIP,$drmServer, $drmUserName, $drmPassword) {
	
	var $sshCommand =  '../.' + $EAMSROOT + 'bin/' + 'NetAppAgent.sh status' + ' '+ $compIP + ' '+ 'NetAppONTAP';
	var $status = SecuredShellConnection($drmServer, $drmUserName, $drmPassword, $sshCommand);
	_log($status);
	var $linuxAgentStatus =$status;
	_assertExists($systemType+"AgentStatus", $linuxAgentStatus);

	if ((new java.lang.String($linuxAgentStatus.toString())).contains(new java.lang.String("There is no "+"NetAppAgent running"))) {
		var $componentStatus = "UNKNOWN";
		_assertExists("Componenet Status in DB is: ", $componentStatus);

	} else if ((new java.lang.String($linuxAgentStatus.toString())).contains(new java.lang.String("NetAppAgent running"))) {
		var $componentStatus = "ACTIVE";
		_assertExists("Componenet Status in DB is: ", $componentStatus);

	} else {
		var $componentStatus = "UNKNOWN";
		_assertExists("Componenet Status in DB is: ", $componentStatus);
	}
	var $componentStatusDB = new java.util.Properties();
	$componentStatusDB.put("componentStatusdb", $componentStatus);

	return $componentStatusDB;
}

//Description: For Lcoal Linux agent get the status from backend for PR and DR
function Get_Local_NetAppAgent_Status_DB_PR() {
	return Get_Local_NetAppAgent_Status_DB($localAgentPathPR, $compIPPR, $remoteUserNameValPR, $remotePwdValPR);
} 

function Get_Local_Componenet_Status_DB_DR() {
	return Get_Local_NetAppAgent_Status_DB($localAgentPathDR, $compIPDR, $remoteUserNameValDR, $remotePwdValDR);
} 


/**
* Function is to get local NetAppAgent status from backend.
*@param :$localAgentPath, $compIP, $remoteUserNameVal, $remotePwdVal
*@return :$componentStatusDB
*@Author: Anita
*
*/
function Get_Local_NetAppAgent_Status_DB($localAgentPath, $compIP, $remoteUserNameVal, $remotePwdVal) {
	
	var $agentStatus = '../.' + $localAgentPath + "DRMAgents/"+ "NetAppAgent.sh status ";
	var $linuxAgentStatus = SecuredShellConnection($compIP, $remoteUserNameVal, $remotePwdVal, $agentStatus);
    
	// verify linuxAgentStatus
	_assertExists("NetAppAgentStatus", $linuxAgentStatus);

	if ($linuxAgentStatus == "NetAppAgent is running.") {
		var $componentStatus = "ACTIVE";
		_assertExists("Component Status in DB is: ", $componentStatus);
		
	} else if ($linuxAgentStatus == "NetAppAgent is not running.") {
		var $componentStatus = "UNKNOWN";
		_assertExists("Component Status in DB is: ", $componentStatus);

	} else {
		var $componentStatus = "UNKNOWN";
		_assertExists("Component Status in DB is: ", $componentStatus);
	}
	var $componentStatusDB = new java.util.Properties();
	$componentStatusDB.put("componentStatusdb", $componentStatus);

	return $componentStatusDB;
}

/// Anita

function Import_NetApp_WF_PrePOSTRPO($fileIn,$flag) {
	var $file = $l_Sahi_UserData + $WFPath + '\\' + $fileIn;
	navigateToGroups();
	_click(_link($groupName));
	_click(_link("Group Configuration"));
	_click(_link("RPO/RTO"));
	if($flag =="Pre"){
		_click(_link("Configure Pre App RPO Computation Workflow"));
	}
	if($flag =="Post"){
		_click(_link("Configure Post App RPO Computation Workflow"));
	}
	 _wait(3000);
	 _click(_span("glyphIon"));
	_click(_link("Workflows"));
	_click(_button("Import Workflow"));
    _wait(3000);
    
    $file = $file.replace(/\//g, "\\");
    _log($file + "workflow file path");
    
    if (_isChrome()){
    	_log($SAHI_HOME+"utility\\importChrome.exe"+" "+$file);
    	_execute($SAHI_HOME+"utility\\importChrome.exe"+" "+$file);
	}else{
		_log($SAHI_HOME+"utility\\import.exe"+" "+$file);
		_execute($SAHI_HOME+"utility\\import.exe"+" "+$file);
	}
	 
	_wait(40000, _isVisible(_link("Save Now")));
	_click(_link("Save Now"));
	_wait(5000);
	_click(_link("Next"));
	_wait(30000, _isVisible(_heading4("Key-Value List")));
	_click(_div("Publish Workflow"));
	_wait(30000, _isVisible(_heading4("BCO Workflows")));
	_log("RPO WF published successfully");
} 

function OracleArLogNetApp_Rpo() {
	var $archivePathPR = get_archive_path_PR("Archive Logs Location PR");
	var $archivePathDR = get_archive_path_DR("Archive Logs Location DR");
	return OracleDG_Rpo_Status($userPR, $pwdPR, $internalLogon, $oracleListenerIPPR, $dbSidSelect);

}// End of Oracle_Rpo()

/**
* Function is verify NC RPO Deviation
*@param :
*@return :
*@Author: Anita
*/
function Verify_NC_RPO_Deviation($workflowType){
	
	navigateToManageRecovery();
	_click(_link("View all workflows"));
	if(_isVisible(_link("EXECUTING", _near(_link($workflowType))))){
		_log($workflowType + " is workflow Executing");
	} 
	if(_isVisible(_link("AWAITING INPUT", _near(_link($workflowType))))){
		
		quiesceDestVolSnapMirror($volumeNameDR,$NetAppcompIPDR,$NetAppUserNameValDR,$NetAppPwdValDR);
		_wait(10000);
		resumeDestVolSnapMirror($volumeNameDR,$NetAppcompIPDR,$NetAppUserNameValDR,$NetAppPwdValDR);
		_wait(180000);
	}
	
	verifyRPODeviation($workflowType);
}

/**
* Function is verify RNC RPO Deviation
*@param :
*@return :
*@Author: Anita
*/
function Verify_RNC_RPO_Deviation($workflowType){
	
	_wait(5000);
	navigateToManageRecovery();
	_click(_link("View all workflows"));
	if(_isVisible(_link("EXECUTING", _near(_link($workflowType))))){
		_log($workflowType + " is workflow Executing");
	} 
	if(_isVisible(_link("AWAITING INPUT", _near(_link($workflowType))))){
		
		quiesceDestVolSnapMirror($volumeNamePR,$NetAppcompIPPR,$NetAppUserNameValPR,$NetAppPwdValPR);
		_wait(15000);
		resumeDestVolSnapMirror($volumeNamePR,$NetAppcompIPPR,$NetAppUserNameValPR,$NetAppPwdValPR);
		_wait(180000);
	}
	
	verifyRPODeviation($workflowType);
}

// RPO page verify RPO deviation

function verifyRPODeviation($workflowType){
	var $i= 0;
	while($i<6){
		navigateToRPO($groupName);
		var $dev1 = _getText(_heading5(1, _near(_link("RPO", _near(_italic("image-deviation"))))));
		var $dev2 = _getText(_heading5(3, _near(_link("RPO", _near(_italic("image-deviation"))))));
		_log("NC RPO deviation "+$dev1 +" " + $dev2);
		if($dev1==$dev2){
			_log("logs sync fine..");
			break;
		}
		if(($dev1=="0%") && ($dev2 < "30%")){
			_log("logs sync fine..");
			break;
		}
		
		if($i==3){
			_log("$i=" +$i);
			if($workflowType == "NormalCopy"){
				updateDestVolSnapMirror($volumeNameDR,$NetAppcompIPDR,$NetAppUserNameValDR,$NetAppPwdValDR,$volumeNamePR);
				_wait(15000);
			}
			if($workflowType == "ReverseNormalCopy"){
				updateDestVolSnapMirror($volumeNamePR,$NetAppcompIPPR,$NetAppUserNameValPR,$NetAppPwdValPR,$volumeNameDR);
				_wait(15000);
			}
		}
		BCO_Exceution_Status($workflowType);		
		_log("wait for 3 mins apply logs at DR .....");
		_wait(180000);
		$i++;
	}
}

//BCO_EXec Status

function BCO_Exceution_Status($workflowType) {
	
	navigateToManageRecovery();
	_click(_link("View all workflows"));
	if(_isVisible(_link("EXECUTING", _near(_link($workflowType))))){
		_log($workflowType + " is workflow Executing");
	} 
	if(_isVisible(_link("AWAITING INPUT", _near(_link($workflowType))))){
		
		_click(_link("AWAITING INPUT", _near(_link($workflowType))));
		_click(_button("Awaiting Input"));
		if (_exists(_submit("Retry=RETRY userInputButton btn btn-primary btn-xs btn btn-info"))) {
			_click(_submit("Retry=RETRY userInputButton btn btn-primary btn-xs btn btn-info"));
			_wait(20000);
		}
	}
}

/**
* Function is verify SO exec status
*@param :
*@return :
*@Author: Anita
*/

function OracleArchLogNetApp_SO_Execution_Status($groupName,$WFName){
	navigateDrillListing();
	Waitfor_TestWF_Completion($groupName, $WFName);
}
/**
* Function is verify OracleNetApp_ReplicationStatus
*@param :
*@return :
*@Author: Anita
*/
function OracleNetApp_ReplicationStatus(){
	_log("wait for some time get replication status in GUI");
	_wait(120000);
	 navigateToGroups();
	_click(_link($groupName));
	_click(_image("Manage Group"));
	_click(_link("Replication"));
	
    var $i=0;
    while($i<60){
    	var $repStatus = _getText(_span(1, _near(_span("Replication Status:"))));
    	var $primaryRemoteServicesGUI=_getCellText(_span(1,_near(_span("Primary - Remote Services:"))));
    	
    	_log("replication status: "+$repStatus);
    	if ($repStatus=="ACTIVE"){
    		_log("Replication Status Active");
    		_assertExists("Primary Remote Servicesfrom Gui" , $primaryRemoteServicesGUI);
    		break;
    	}
    	if ($repStatus=="INACTIVE"){
    		_assertExists("Primary Remote Servicesfrom Gui" , $primaryRemoteServicesGUI);
    		_log("Replication Status is InActive so need Rysnc step");
    		break;
    	}
    	_wait(30000);
    	$i++;
    }
}


// GEt volume status on DR

function Oracle_Replication_Status_backend_DR(){
	getSnapMirrorVolStatus($volumeNameDR,$NetAppcompIPDR,$NetAppUserNameValDR,$NetAppPwdValDR);
}

function Oracle_Replication_Status_backend_PR(){
	getSnapMirrorVolStatus($volumeNamePR,$NetAppcompIPPR,$NetAppUserNameValPR,$NetAppPwdValPR);
}
// get the status volume of netapp snappmirror

function getSnapMirrorVolStatus($volumeName,$NetAppcompIP,$NetAppUserNameVal,$NetAppPwdVal){
	var $sshCommand = 'snapmirror status -l ' + $volumeName;
	var $netappVolStatus = SecuredShellConnection($NetAppcompIP, $NetAppUserNameVal, $NetAppPwdVal, $sshCommand);
	_log($netappVolStatus);
}

//update the volume of netapp snappmirror

function updateDestVolSnapMirror($volumeName,$NetAppcompIP,$NetAppUserNameVal,$NetAppPwdVal,$sourceVolName){
	//snapmirror update -S prfiler1:Auto_oracleNetapp_PR -w drfiler1:Auto_oracleNetapp_DR
	var $sshCommand = 'snapmirror update -S ' + $sourceVolName + ' -w ' + $volumeName;
	var $netappVolStatus = SecuredShellConnection($NetAppcompIP, $NetAppUserNameVal, $NetAppPwdVal, $sshCommand);
	_log($netappVolStatus);
}

//quiesce the volume of netapp snappmirror

function quiesceDestVolSnapMirror($volumeName,$NetAppcompIP,$NetAppUserNameVal,$NetAppPwdVal){
	var $sshCommand = 'snapmirror quiesce ' + $volumeName;
	var $netappVolStatus = SecuredShellConnection($NetAppcompIP, $NetAppUserNameVal, $NetAppPwdVal, $sshCommand);
	_log($netappVolStatus);
}

//resume the volume of netapp snappmirror

function resumeDestVolSnapMirror($volumeName,$NetAppcompIP,$NetAppUserNameVal,$NetAppPwdVal){
	var $sshCommand = 'snapmirror resume ' + $volumeName;
	var $netappVolStatus = SecuredShellConnection($NetAppcompIP, $NetAppUserNameVal, $NetAppPwdVal, $sshCommand);
	_log($netappVolStatus);
}

//resync the volume of netapp snappmirror

function resyncDestVolSnapMirror($volumeName,$NetAppcompIP,$NetAppUserNameVal,$NetAppPwdVal){
	var $sshCommand = 'snapmirror resync -f ' + $volumeName;
	var $netappVolStatus = SecuredShellConnection($NetAppcompIP, $NetAppUserNameVal, $NetAppPwdVal, $sshCommand);
	_log($netappVolStatus);
}
/**
* Function is Perofrm Rsync thru cmd line after SO since bug#19508
*@param :
*@return :
*@Author: Anita
*/

function Apply_Resync_SnapMirror_PostSO(){
	resyncDestVolSnapMirror($volumeNamePR,$NetAppcompIPPR,$NetAppUserNameValPR,$NetAppPwdValPR);
	_wait(60000);
}

/**
* Function is Perofrm Rsync thru cmd line after SwitchBack since bug#19508
*@param :
*@return :
*@Author: Anita
*/

function Apply_Resync_SnapMirror_PostSB(){
	resyncDestVolSnapMirror($volumeNameDR,$NetAppcompIPDR,$NetAppUserNameValDR,$NetAppPwdValDR);
	_wait(60000);
}